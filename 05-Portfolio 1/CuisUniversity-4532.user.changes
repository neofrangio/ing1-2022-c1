

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (20 September 2021 17:48:17) as D:\Cuis\CuisUniversity-4532.image!


ObjectBuilder create: #Rodrigo
	collaboratorNames: ''
	in: 'Bueno'
	!

!classDefinition: #Rodrigo category: 'Bueno' stamp: 'MF 9/20/2021 17:53:12'!
DenotativeObject subclass: #Rodrigo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Bueno'!

!classDefinition: 'Rodrigo class' category: 'Bueno' stamp: 'MF 9/20/2021 17:53:12'!
Rodrigo class
	instanceVariableNames: ''!
!Rodrigo class methodsFor: 'nil' stamp: 'MF 9/20/2021 17:55:18'!
hola
	"ricardo mollo"

	^'chau'! !
!Rodrigo class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 17:56:01' prior: 50859347!
hola
	"ricardo mollo"

	^'chau'.! !

Rodrigo hola.!

ObjectBuilder create: #Bill
	collaboratorNames: ''
	in: 'Zombie'
	!

!classDefinition: #Bill category: 'Zombie' stamp: 'MF 9/20/2021 18:02:13'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombie'!

!classDefinition: 'Bill class' category: 'Zombie' stamp: 'MF 9/20/2021 18:02:13'!
Bill class
	instanceVariableNames: ''!
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:02:42'!
caminar: unaCtdKm
	"Bill camina"

	! !
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:03:13'!
comer: klDeComida
	"Bill come"
! !
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:04:29'!
energia
	"La energía de bill"
! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:05:24' prior: 50859376!
energia
	"La energía de bill"

	^28! !

!classDefinition: 'Bill class' category: 'Zombie' stamp: 'MF 9/20/2021 18:08:45'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:08:13' prior: 50859368!
caminar: unaCtdKm
	"Bill camina"
	
	energia := energia - 3 - unaCtdKm

	! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:10:31' prior: 50859380!
energia
	"La energía de bill"

	^energia.
	! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:10:51' prior: 50859372!
comer: klDeComida
	"Bill come"
	
	energia:= energia+klDeComida! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:13:47' prior: 50859400!
comer: klDeComida
	"Bill come"
	
	energia:= energia+(4*klDeComida)! !

!classRemoval: #Rodrigo stamp: 'MF 9/20/2021 18:15:45'!
DenotativeObject subclass: #Rodrigo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Bueno'!

----STARTUP---- (20 September 2021 18:21:58) as D:\Cuis\CuisUniversity-4532.image!


!classDefinition: #Rodrigo category: 'Bueno' stamp: 'mf 9/20/2021 18:22:10'!
DenotativeObject subclass: #Rodrigo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Bueno'!

!classDefinition: 'Rodrigo class' category: 'Bueno' stamp: 'mf 9/20/2021 18:22:10'!
Rodrigo class
	instanceVariableNames: ''!

!classDefinition: #Rodrigo category: 'Bueno' stamp: 'mf 9/20/2021 18:22:10'!
DenotativeObject subclass: #Rodrigo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Bueno'!

!classDefinition: 'Rodrigo class' category: 'Bueno' stamp: 'mf 9/20/2021 18:22:10'!
Rodrigo class
	instanceVariableNames: ''!
!Rodrigo class methodsFor: 'nil' stamp: 'MF 9/20/2021 17:55:18'!
hola
	"ricardo mollo"

	^'chau'! !
!Rodrigo class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 17:56:01' prior: 50859439!
hola
	"ricardo mollo"

	^'chau'.! !

!classDefinition: #Bill category: 'Zombie' stamp: 'mf 9/20/2021 18:22:10'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombie'!

!classDefinition: 'Bill class' category: 'Zombie' stamp: 'mf 9/20/2021 18:22:10'!
Bill class
	instanceVariableNames: ''!

!classDefinition: #Bill category: 'Zombie' stamp: 'mf 9/20/2021 18:22:10'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombie'!

!classDefinition: 'Bill class' category: 'Zombie' stamp: 'mf 9/20/2021 18:22:10'!
Bill class
	instanceVariableNames: ''!
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:02:42'!
caminar: unaCtdKm
	"Bill camina"

	! !
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:03:13'!
comer: klDeComida
	"Bill come"
! !
!Bill class methodsFor: 'nil' stamp: 'MF 9/20/2021 18:04:29'!
energia
	"La energía de bill"
! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:05:24' prior: 50859476!
energia
	"La energía de bill"

	^28! !

!classDefinition: 'Bill class' category: 'Zombie' stamp: 'mf 9/20/2021 18:22:10'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:08:13' prior: 50859468!
caminar: unaCtdKm
	"Bill camina"
	
	energia := energia - 3 - unaCtdKm

	! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:10:31' prior: 50859480!
energia
	"La energía de bill"

	^energia.
	! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:10:51' prior: 50859472!
comer: klDeComida
	"Bill come"
	
	energia:= energia+klDeComida! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'MF 9/20/2021 18:13:47' prior: 50859500!
comer: klDeComida
	"Bill come"
	
	energia:= energia+(4*klDeComida)! !

!classRemoval: #Rodrigo stamp: 'mf 9/20/2021 18:22:11'!
DenotativeObject subclass: #Rodrigo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Bueno'!

ObjectBuilder create: #verdaderoYfalsoTests
	collaboratorNames: ''
	in: 'ej vyf'
	!

!classDefinition: #verdaderoYfalsoTests category: 'ej vyf' stamp: 'mf 9/20/2021 18:23:26'!
DenotativeObject subclass: #verdaderoYfalsoTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ej vyf'!

!classDefinition: 'verdaderoYfalsoTests class' category: 'ej vyf' stamp: 'mf 9/20/2021 18:23:26'!
verdaderoYfalsoTests class
	instanceVariableNames: ''!
!verdaderoYfalsoTests class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:24:06'!
testVerdaderoNoDevuelveFalso
	"testeamos la negueijon"

	! !
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:24:35'!
testNoVerdaderoDevuelveFalso
	"testeamos la negueijon"

	! !

!methodRemoval: verdaderoYfalsoTests class #testVerdaderoNoDevuelveFalso stamp: 'mf 9/20/2021 18:25:31'!
testVerdaderoNoDevuelveFalso
	"testeamos la negueijon"

	!

!classDefinition: #Falso category: 'ej vyf' stamp: 'mf 9/20/2021 18:26:46'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ej vyf'!

!classDefinition: #Verdadero category: 'ej vyf' stamp: 'mf 9/20/2021 18:26:50'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ej vyf'!
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:26:44' prior: 50859536!
testNoVerdaderoDevuelveFalso
	"testeamos la negueijon"

	Assert that: Falso isEqualTo: Verdadero no.! !
!verdaderoYfalsoTests class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:27:34' prior: 50859560!
testNoVerdaderoDevuelveFalso
	"testeamos la negueijon"

	Assert that: Falso isEqualTo: Verdadero no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:27:54'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:28:29'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:28:52'!
no
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:29:12' prior: 50859579!
no
	^Falso.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:29:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:29:19'!
PASSED!
!Falso class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:31:13'!
no
	^Verdadero.! !
!verdaderoYfalsoTests class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:31:59'!
testNoFalsoDevuelveVerdadero
	
	Assert that: Verdadero isEqualTo: Falso no! !
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:32:03' prior: 50859596!
testNoFalsoDevuelveVerdadero
	
	Assert that: Verdadero isEqualTo: Falso no.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:32:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:32:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:32:15'!
PASSED!
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:33:03'!
y: unBooleano! !
!verdaderoYfalsoTests class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:35:47'!
testVerdaderoYVerdaderoDevuelveFalso
	
	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero! !
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:52:27' prior: 50859616!
y: unBooleano
	^unBooleano! !
!Falso class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:52:53'!
y: unBooleano
	^ Falso.! !
!verdaderoYfalsoTests class methodsFor: 'nil' stamp: 'mf 9/20/2021 18:53:34'!
testVerdaderoSiVerdaderoEjecutaElCodigo
	! !
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:55:31' prior: 50859633!
testVerdaderoSiVerdaderoEjecutaElCodigo
	Assert that: (Verdadero siVerdadero: [^3+2]) isEqualTo: 5! !
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:55:56' prior: 50859638!
testVerdaderoSiVerdaderoEjecutaElCodigo
	Assert that: (Verdadero siVerdadero: [^3+2]) isEqualTo: 5 ! !
!verdaderoYfalsoTests class methodsFor: 'as yet unclassified' stamp: 'mf 9/20/2021 18:55:58' prior: 50859645!
testVerdaderoSiVerdaderoEjecutaElCodigo
	Assert that: (Verdadero siVerdadero: [^3+2]) isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:56:45'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:56:54'!
siVerdadero: aBlockClosure 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:57:25' prior: 50859661!
siVerdadero: aBlockClosure 
	^aBlockClosure! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:57:49'!
ERROR!
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:58:09' prior: 50859666!
siVerdadero: aBlockClosure 
	aBlockClosure! !
!Verdadero class methodsFor: 'protocolo' stamp: 'mf 9/20/2021 18:59:47' prior: 50859674!
siVerdadero: aBlockClosure 
	^aBlockClosure value.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 9/20/2021 18:59:54'!
PASSED!

----STARTUP---- (22 September 2021 18:42:03) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\13-CodigoRepetido\CodigoRepetido-Ejercicio.st----!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Pre-Numero-Exercise.st----!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'mf 9/22/2021 18:45:09'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'mf 9/22/2021 18:45:25'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'no messages' stamp: 'mf 9/22/2021 18:46:06' overrides: 50860145!
+ unEntero
	! !
!Entero methodsFor: 'Operaciones aritméticas' stamp: 'mf 9/22/2021 18:46:47' prior: 50860336 overrides: 50860145!
+ unEntero
	! !
!Entero methodsFor: 'Operaciones aritméticas' stamp: 'mf 9/22/2021 18:46:51' prior: 50860341 overrides: 50860145!
+ anAdder
	! !
!Entero methodsFor: 'Operaciones aritméticas' stamp: 'mf 9/22/2021 18:47:24' prior: 50860346 overrides: 50860145!
+ anAdder
	
	! !
!Entero methodsFor: 'Operaciones aritméticas' stamp: 'mf 9/22/2021 18:50:34' prior: 50860351 overrides: 50860145!
+ anAdder
	
	^self class with: value + anAdder integerValue ! !
!Entero methodsFor: 'Operaciones aritméticas' stamp: 'mf 9/22/2021 18:50:39' prior: 50860356 overrides: 50860145!
+ anAdder
	
	^self class with: value + anAdder integerValue.! !
!Fraccion methodsFor: 'no messages' stamp: 'mf 9/22/2021 18:51:10' overrides: 50860145!
+ anAdder
	! !
!Fraccion methodsFor: 'operaciones aritméticas' stamp: 'mf 9/22/2021 18:52:18' prior: 50860367 overrides: 50860145!
+ anAdder
	
	| newNumerator newDenominator |
		
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
		
	^ self class with: newNumerator over: newDenominator! !
!Fraccion methodsFor: 'operaciones aritméticas' stamp: 'mf 9/22/2021 18:52:23' prior: 50860372 overrides: 50860145!
+ anAdder
	
	| newNumerator newDenominator |
		
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
		
	^ self class with: newNumerator over: newDenominator.! !

----QUIT----(22 September 2021 19:01:39) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (22 September 2021 22:25:00) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'mf 9/22/2021 22:25:14'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'mf 9/22/2021 22:25:14'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'mf 9/22/2021 22:25:15'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'mf 9/22/2021 22:25:15'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Ejercicio\Ejercicio\Numero-Exercise.st----!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-3.sin if incluido el bonus.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:32:46'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:32:46'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:32:46'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 9/22/2021 22:32:46'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test27BisEnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test27ZeroDivideAnythingIsZero stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 9/22/2021 22:32:47'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 9/22/2021 22:32:47'!
PASSED!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-3.2.incluye switch dinamico al crear enteros.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test27BisEnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test27ZeroDivideAnythingIsZero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 9/22/2021 22:33:22'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 9/22/2021 22:33:22'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 9/22/2021 22:33:23'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 9/22/2021 22:33:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 9/22/2021 22:33:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test27BisEnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test27ZeroDivideAnythingIsZero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 9/22/2021 22:33:26'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:27'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:33:36'!
PASSED!

!classRemoval: #Fraccion stamp: 'mf 9/22/2021 22:33:48'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'mf 9/22/2021 22:33:49'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'mf 9/22/2021 22:33:49'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'mf 9/22/2021 22:33:49'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'mf 9/22/2021 22:33:50'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'mf 9/22/2021 22:33:50'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'mf 9/22/2021 22:33:50'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'mf 9/22/2021 22:33:50'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'mf 9/22/2021 22:33:51'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-3.2.incluye switch dinamico al crear enteros.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 9/22/2021 22:34:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 9/22/2021 22:34:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 9/22/2021 22:34:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 9/22/2021 22:34:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 9/22/2021 22:34:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test27BisEnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test27ZeroDivideAnythingIsZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 9/22/2021 22:34:37'!
PASSED!

----STARTUP---- (22 September 2021 23:31:27) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'mf 9/22/2021 23:31:49'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'mf 9/22/2021 23:31:49'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'mf 9/22/2021 23:31:49'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'mf 9/22/2021 23:31:50'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:50'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:50'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:51'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50865048!
* aMultiplier 
	
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50865053!
+ anAdder 
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:40:37' overrides: 50865057!
- aSubtrahend 
	
	^ self class with: value - aSubtrahend integerValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50865062!
/ aDivisor 
	
	^Fraccion with: self over: aDivisor! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55'!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:47:50'!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16881029!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16881052!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 50683280!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' overrides: 50865076!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50865080!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50865084!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24'!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2016 22:53'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50865048!
* aMultiplier 
	
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50865053!
+ anAdder 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:43:50' overrides: 50865057!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50865062!
/ aDivisor 
	
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16881029!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16881052!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50865076!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50865080!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50865084!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 50683280!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'mf 9/22/2021 23:31:52'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'NR 9/23/2018 23:45:19'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !

!classDefinition: #NumeroTest category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #NumeroTest category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/24/2018 01:22:59' prior: 50865019 overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11' prior: 50864754!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50864759!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50864764!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50864769!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50864774!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18' prior: 50864779!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20' prior: 50864784!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38' prior: 50864789!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52' prior: 50864803!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56' prior: 50864812!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50864820!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50864827!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50' prior: 50864833!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52' prior: 50864839!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57' prior: 50864845!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59' prior: 50864851!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38' prior: 50864857!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39' prior: 50864862!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40' prior: 50864867!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50864873!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50864879!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43' prior: 50864885!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50864890!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50864899!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50864908!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50864913!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 10/1/2018 01:21:31'!
test27BisEnteroSubstractsEnteroCorrectly

	self assert: two - one equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 5/3/2017 19:24:12'!
test27ZeroDivideAnythingIsZero

	self assert: zero / one equals: zero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:44' prior: 50864922!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:50' prior: 50864928!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05' prior: 50864933!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08' prior: 50864940!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:11' prior: 50864948!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:17' prior: 50864953!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14' prior: 50864958!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:27' prior: 50864967!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:33' prior: 50864972!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:22' prior: 50864977!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:29' prior: 50864987!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:36' prior: 50864996!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:41' prior: 50865001!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:45' prior: 50865006!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/30/2018 19:50:22' prior: 50865012!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)
	! !

!classDefinition: #Numero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:53'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Numero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:53'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50865048!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50865053!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:55:01' prior: 50865057!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50865062!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:56:58' prior: 50865072!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:40:13'!
addEntero: anEnteroAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:40:18'!
addFraccion: aFraccionAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:40:24'!
divideEntero: anEnteroDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:41:05'!
divideFraccion: aFraccionDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:41:12'!
multiplyEntero: anEnteroMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:41:17'!
multiplyFraccion: aFraccionMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:41:22'!
subtractEntero: anEnteroMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:41:27'!
subtractFraccion: aFraccionMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:12' prior: 50865076!
isNegative

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:07' prior: 50865080!
isOne

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:13' prior: 50865084!
isZero

	^false! !

!classDefinition: 'Numero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2016 22:45' prior: 50865097!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero'! !

!classDefinition: #Entero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Entero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:59' prior: 50865122 overrides: 50865705!
* aMultiplier 
	
	^aMultiplier multiplyEntero: self ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:56' prior: 50865128 overrides: 50865710!
+ anAdder 
	
	^anAdder addEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 5/13/2020 10:47:57' prior: 50865134 overrides: 50865715!
- aSubtrahend 
	
	^aSubtrahend subtractEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:01' prior: 50865140 overrides: 50865720!
/ aDivisor 
	
	^aDivisor divideEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:23:59' prior: 50865145!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 20:24:33' prior: 50865150!
fibonacci

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:24:07' prior: 50865161!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:13:24' overrides: 50865729!
addEntero: anEnteroAdder 
	
	^self class with: anEnteroAdder integerValue + self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:46:08' overrides: 50865734!
addFraccion: aFraccionAdder

	^self + aFraccionAdder 
	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:31:24'!
asDenominatorOf: aNumerator

	^Fraccion safeWith: aNumerator over: self
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:46:25' overrides: 50865739!
divideEntero: anEnteroDividend

	^anEnteroDividend over: self! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:46:36' overrides: 50865744!
divideFraccion: aFraccionDividend

	^aFraccionDividend numerator / (aFraccionDividend denominator * self) ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:13:48' overrides: 50865749!
multiplyEntero: anEnteroMultiplier

	^self class with: anEnteroMultiplier integerValue * self integerValue! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:46:56' overrides: 50865754!
multiplyFraccion: aFraccionMultiplier

	^self * aFraccionMultiplier ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:54:09'!
over: anEnteroDivisor
	
	| denominator greatestCommonDivisor numerator |
	
	greatestCommonDivisor := self greatestCommonDivisorWith: anEnteroDivisor. 
	numerator := self // greatestCommonDivisor.
	denominator := anEnteroDivisor // greatestCommonDivisor.
	
	^denominator asDenominatorOf: numerator	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:48:05' overrides: 50865759!
subtractEntero: anEnteroMinuend 
	
	^self class with: anEnteroMinuend integerValue - self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:48:10' overrides: 50865764!
subtractFraccion: aFraccionMinuend 
			
	^aFraccionMinuend numerator - (self * aFraccionMinuend denominator) / (aFraccionMinuend denominator). ! !
!Entero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:39' prior: 50865181!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	self subclassResponsibility ! !
!Entero methodsFor: 'printing' stamp: 'NR 9/30/2018 19:49:42' prior: 50865189 overrides: 50683280!
printOn: aStream

	aStream print: self integerValue ! !

!classDefinition: 'Entero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 10/1/2018 15:47:28' prior: 50865219!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"Estos ifs no se pueden evitar ya que son los que diferencian la clase a utilizar... si estuvieramos implementando un lenguaje estarian
	en la VM. 
	Notar la implementacion de #new en Cero y Uno, ¿que hace? - Hernan"
	aValue = 0 ifTrue: [ ^Cero new ].
	aValue = 1 ifTrue: [ ^Uno new ].
	aValue < 0 ifTrue: [^Negativo new initializeWith: aValue].
	^PositivoMayorAUno new initializeWith: aValue! !
!Entero class methodsFor: 'error descriptions' stamp: 'NR 9/24/2018 01:11:49' prior: 50865213!
negativeFibonacciErrorDescription
	
	^ ' Fibonacci no está definido aquí para enteros negativos'! !

!classDefinition: #Cero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Cero category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:54'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Cero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:48' overrides: 50865919!
integerValue

	^0! !
!Cero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:34' overrides: 50865201!
isZero

	^true! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:34:25' overrides: 50865867!
divideEntero: aDividend

	self error: self class canNotDivideByZeroErrorDescription
	! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'NR 10/1/2020 17:58:17' overrides: 50865892!
over: anEnteroDivisor

	^self! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:03' overrides: 50865837!
fibonacci

	^ Entero with: 1.! !

!classDefinition: 'Cero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Cero class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'Cero class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Cero class
	instanceVariableNames: 'uniqueInstance'!
!Cero class methodsFor: 'initialization' stamp: 'HAW 5/3/2017 18:27:46' overrides: 16883149!
initialize

	uniqueInstance := self basicNew ! !
!Cero class methodsFor: 'instance creation' stamp: 'HAW 5/3/2017 18:27:26' overrides: 16783533!
new

	^uniqueInstance! !

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!EnteroMenosCeroYUno methodsFor: 'initialization' stamp: 'NR 9/24/2018 01:25:29'!
initializeWith: aValue 
	
	value := aValue! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:02' overrides: 50865167!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:08' overrides: 50865173!
hash

	^value hash! !
!EnteroMenosCeroYUno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:02' overrides: 50865919!
integerValue

	^value ! !

!classDefinition: #Negativo category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Negativo category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Negativo methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 19:44:11' overrides: 50865867!
divideEntero: aDividend
	
	^ aDividend negated / self negated! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:07' overrides: 50865837!
fibonacci
	
	^ self error: Entero negativeFibonacciErrorDescription ! !
!Negativo methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:54' overrides: 50865193!
isNegative
	
	^true! !

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!PositivoMayorAUno methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:18' overrides: 50865837!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci! !

!classDefinition: #Uno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Uno category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Uno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:09' overrides: 50865919!
integerValue

	^1! !
!Uno methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:41' overrides: 50865197!
isOne

	^true! !
!Uno methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:28:26' overrides: 50865861!
asDenominatorOf: aNumerator

	^aNumerator ! !
!Uno methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:22' overrides: 50865837!
fibonacci
	
	^ self		! !

!classDefinition: 'Uno class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Uno class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'Uno class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Uno class
	instanceVariableNames: 'uniqueInstance'!
!Uno class methodsFor: 'initialization' stamp: 'HAW 5/3/2017 18:29:22' overrides: 16883149!
initialize

	uniqueInstance := self basicNew ! !
!Uno class methodsFor: 'instance creation' stamp: 'HAW 5/3/2017 18:28:02' overrides: 16783533!
new

	^uniqueInstance! !

!classDefinition: #Fraccion category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classDefinition: #Fraccion category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:55'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:03' prior: 50865246 overrides: 50865705!
* aMultiplier 
	
	^aMultiplier multiplyFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:04' prior: 50865253 overrides: 50865710!
+ anAdder 
	
	^anAdder addFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 5/13/2020 10:51:03' prior: 50865264 overrides: 50865715!
- aSubtrahend 
	
	^aSubtrahend subtractFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:06' prior: 50865275 overrides: 50865720!
/ aDivisor 
	
	^aDivisor divideFraccion: self! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' prior: 50865281 overrides: 16881029!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' prior: 50865289 overrides: 16881052!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:48:35' overrides: 50865729!
addEntero: anEnteroAdder

	^anEnteroAdder * denominator + numerator / denominator ! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:15:24' overrides: 50865734!
addFraccion: aFraccionAdder

	| newNumerator newDenominator |
	
	newNumerator :=  (denominator * aFraccionAdder numerator) + (numerator * aFraccionAdder denominator).
	newDenominator := denominator * aFraccionAdder denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:49:04' overrides: 50865739!
divideEntero: anEnteroDividend

	^anEnteroDividend * denominator / numerator
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:49:16' overrides: 50865744!
divideFraccion: aFraccionDividend

	^(aFraccionDividend numerator * denominator) / (aFraccionDividend denominator * numerator)
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:49:29' overrides: 50865749!
multiplyEntero: anEnteroMultiplier

	^anEnteroMultiplier * numerator / denominator 
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:17:14' overrides: 50865754!
multiplyFraccion: aFraccionMultiplier

	^(aFraccionMultiplier numerator * numerator) / (aFraccionMultiplier denominator * denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:50:41' overrides: 50865759!
subtractEntero: anEnteroMinuend

	^anEnteroMinuend * denominator - numerator / denominator ! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 10:50:47' overrides: 50865764!
subtractFraccion: aFraccionMinuend

	| newNumerator newDenominator |
	
	newNumerator := (denominator * aFraccionMinuend numerator) - (numerator * aFraccionMinuend denominator) .
	newDenominator := denominator * aFraccionMinuend denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50865293!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50865297!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HAW 5/3/2017 19:32:45'!
initializeSafeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' prior: 50865328 overrides: 50683280!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 4/24/2021 17:33:28' prior: 50865316 overrides: 50865769!
isNegative
	
	^numerator isNegative! !

!classDefinition: 'Fraccion class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:56'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Solution-3' stamp: 'mf 9/22/2021 23:31:56'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation - private' stamp: 'NR 9/30/2018 19:57:05'!
safeWith: aDividend over: aDivisor

	"Sólo para ser enviado desde los objetos de la jerarquia ya que se asume que aDividend no es 0, y aDivisor no es ni 0 ni 1 ni negativo - Hernan y Nicolás."
	
	^self new initializeSafeWith: aDividend over: aDivisor ! !

!classDefinition: #NumeroTest category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:56'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #NumeroTest category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:56'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/24/2018 01:22:59' prior: 50865384 overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11' prior: 50865400!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50865405!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50865411!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50865416!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50865422!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18' prior: 50865428!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20' prior: 50865434!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38' prior: 50865440!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52' prior: 50865454!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56' prior: 50865463!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50865471!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50865479!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50' prior: 50865486!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52' prior: 50865492!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57' prior: 50865498!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59' prior: 50865504!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38' prior: 50865510!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39' prior: 50865516!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40' prior: 50865522!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50865528!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50865534!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43' prior: 50865540!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50865546!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50865556!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50865566!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50865571!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 10/1/2018 01:21:31' prior: 50865575!
test27BisEnteroSubstractsEnteroCorrectly

	self assert: two - one equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 5/3/2017 19:24:12' prior: 50865580!
test27ZeroDivideAnythingIsZero

	self assert: zero / one equals: zero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:44' prior: 50865585!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:50' prior: 50865591!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05' prior: 50865597!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08' prior: 50865605!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:11' prior: 50865613!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:17' prior: 50865619!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14' prior: 50865625!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:27' prior: 50865635!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:33' prior: 50865640!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:22' prior: 50865645!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:29' prior: 50865655!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:36' prior: 50865665!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:41' prior: 50865671!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:45' prior: 50865677!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/30/2018 19:50:22' prior: 50865684!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)
	! !

!classDefinition: #Numero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:57'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Numero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:57'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50865705!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50865710!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:55:01' prior: 50865715!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50865720!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:56:58' prior: 50865725!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:34' prior: 50865729!
addEntero: anEnteroAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:39' prior: 50865734!
addFraccion: aFraccionAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:50' prior: 50865739!
divideEntero: anEnteroDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:58' prior: 50865744!
divideFraccion: aFraccionDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:03' prior: 50865749!
multiplyEntero: anEnteroMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:10' prior: 50865754!
multiplyFraccion: aFraccionMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:51' prior: 50865759!
subtractEntero: anEnteroMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:46' prior: 50865764!
subtractFraccion: aFraccionMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:12' prior: 50865769!
isNegative

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:07' prior: 50865773!
isOne

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:13' prior: 50865776!
isZero

	^false! !

!classDefinition: 'Numero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2016 22:45' prior: 50865789!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero'! !

!classDefinition: #Entero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Entero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:59' prior: 50865809 overrides: 50866677!
* aMultiplier 
	
	^aMultiplier multiplyEntero: self ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:56' prior: 50865815 overrides: 50866682!
+ anAdder 
	
	^anAdder addEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 5/13/2020 12:07:31' prior: 50865820 overrides: 50866687!
- aSubtrahend 
	
	^aSubtrahend subtractEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:01' prior: 50865826 overrides: 50866692!
/ aDivisor 
	
	^aDivisor divideEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:23:59' prior: 50865831!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 20:24:33' prior: 50865837!
fibonacci

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:24:07' prior: 50865842!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:14:16' prior: 50865849 overrides: 50866702!
addEntero: anEnteroAdder 
	
	^self class with: anEnteroAdder integerValue + self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:22' prior: 50865856 overrides: 50866708!
addFraccion: aFraccionAdder

	^self + aFraccionAdder 
	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:31:24' prior: 50865861!
asDenominatorOf: aNumerator

	^Fraccion safeWith: aNumerator over: self
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:36' prior: 50865867 overrides: 50866714!
divideEntero: anEnteroDividend

	^anEnteroDividend over: self! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:47' prior: 50865873 overrides: 50866720!
divideFraccion: aFraccionDividend

	^aFraccionDividend numerator / (aFraccionDividend denominator * self) ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:14:31' prior: 50865880 overrides: 50866726!
multiplyEntero: anEnteroMultiplier

	^self class with: anEnteroMultiplier integerValue * self integerValue! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:06:03' prior: 50865887 overrides: 50866732!
multiplyFraccion: aFraccionMultiplier

	^self * aFraccionMultiplier ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:06:34' prior: 50865892!
over: anEnteroDivisor
	
	| denominator greatestCommonDivisor numerator |
	
	greatestCommonDivisor := self greatestCommonDivisorWith: anEnteroDivisor. 
	numerator := self // greatestCommonDivisor.
	denominator := anEnteroDivisor // greatestCommonDivisor.
	
	^denominator asDenominatorOf: numerator	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:07:11' prior: 50865905 overrides: 50866738!
subtractEntero: anEnteroMinuend 
	
	^self class with: anEnteroMinuend integerValue - self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:07:15' prior: 50865912 overrides: 50866744!
subtractFraccion: anEnteroMinuend 
			
	^anEnteroMinuend numerator - (self * anEnteroMinuend denominator) / (anEnteroMinuend denominator). ! !
!Entero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:39' prior: 50865919!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	self subclassResponsibility ! !
!Entero methodsFor: 'printing' stamp: 'NR 9/30/2018 19:49:42' prior: 50865928 overrides: 50683280!
printOn: aStream

	aStream print: self integerValue ! !

!classDefinition: 'Entero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:11'!
canHandle: aValue

	self subclassResponsibility! !
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:18'!
for: aValue

	self subclassResponsibility 
! !
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:25:28' prior: 50865942!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^(Entero allSubclasses detect:[:aClass | aClass canHandle: aValue]) for: aValue! !
!Entero class methodsFor: 'error descriptions' stamp: 'NR 9/24/2018 01:11:49' prior: 50865964!
negativeFibonacciErrorDescription
	
	^ ' Fibonacci no está definido aquí para enteros negativos'! !

!classDefinition: #Cero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Cero category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Cero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:48' prior: 50865983 overrides: 50866907!
integerValue

	^0! !
!Cero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:34' prior: 50865987 overrides: 50865201!
isZero

	^true! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:34:25' prior: 50865991 overrides: 50866850!
divideEntero: aDividend

	self error: self class canNotDivideByZeroErrorDescription
	! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'HAW 10/1/2018 10:33:21' prior: 50865998 overrides: 50866878!
over: aDivisor

	^self! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 09:58:06' overrides: 50866789!
* aMultiplier 
	
	^ self! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 09:58:51' overrides: 50866795!
+ anAdder 
	
	^anAdder
	! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 10:04:03' overrides: 50866800!
- aSubtrahend 
	
	^aSubtrahend negated! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:03' prior: 50866002 overrides: 50866817!
fibonacci

	^ Entero with: 1.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 10:04:23' overrides: 50866697!
negated

	^self! !

!classDefinition: 'Cero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Cero class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'Cero class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:58'!
Cero class
	instanceVariableNames: 'uniqueInstance'!
!Cero class methodsFor: 'initialization' stamp: 'HAW 5/3/2017 18:27:46' prior: 50866016 overrides: 16883149!
initialize

	uniqueInstance := self basicNew ! !
!Cero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:51' overrides: 50866929!
canHandle: aValue

	^aValue = 0! !
!Cero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:57' overrides: 50866934!
for: aValue

	^self new! !
!Cero class methodsFor: 'instance creation' stamp: 'HAW 5/3/2017 18:27:26' prior: 50866021 overrides: 16783533!
new

	^uniqueInstance! !

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!EnteroMenosCeroYUno methodsFor: 'initialization' stamp: 'NR 9/24/2018 01:25:29' prior: 50866040!
initializeWith: aValue 
	
	value := aValue! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:02' prior: 50866045 overrides: 50865167!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:08' prior: 50866051 overrides: 50865173!
hash

	^value hash! !
!EnteroMenosCeroYUno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:02' prior: 50866055 overrides: 50866907!
integerValue

	^value ! !

!classDefinition: 'EnteroMenosCeroYUno class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroMenosCeroYUno class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno class
	instanceVariableNames: ''!
!EnteroMenosCeroYUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:28:36' overrides: 50866929!
canHandle: anEntero

	^false! !
!EnteroMenosCeroYUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:00' overrides: 50866934!
for: aValue

	^self new initializeWith: aValue! !

!classDefinition: #Negativo category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Negativo category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Negativo methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 19:44:11' prior: 50866074 overrides: 50866850!
divideEntero: aDividend
	
	^ aDividend negated / self negated! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:07' prior: 50866080 overrides: 50866817!
fibonacci
	
	^ self error: Entero negativeFibonacciErrorDescription ! !
!Negativo methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:54' prior: 50866085 overrides: 50865193!
isNegative
	
	^true! !

!classDefinition: 'Negativo class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Negativo class
	instanceVariableNames: ''!

!classDefinition: 'Negativo class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Negativo class
	instanceVariableNames: ''!
!Negativo class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:18' overrides: 50867090!
canHandle: anEntero

	^anEntero < 0! !

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!PositivoMayorAUno methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:18' prior: 50866105 overrides: 50866817!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci! !

!classDefinition: 'PositivoMayorAUno class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
PositivoMayorAUno class
	instanceVariableNames: ''!

!classDefinition: 'PositivoMayorAUno class' category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
PositivoMayorAUno class
	instanceVariableNames: ''!
!PositivoMayorAUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:30' overrides: 50867090!
canHandle: anEntero

	^anEntero > 1! !

!classDefinition: #Uno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Uno category: 'Numero-Solution-3.6' stamp: 'mf 9/22/2021 23:31:59'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Uno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:09' prior: 50866125 overrides: 50866907!
integerValue

	^1! !

----STARTUP---- (22 September 2021 23:32:04) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'mf 9/22/2021 23:32:17'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'mf 9/22/2021 23:32:17'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'mf 9/22/2021 23:32:18'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'mf 9/22/2021 23:32:18'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-3.sin if incluido el bonus.st----!

!classRemoval: #Fraccion stamp: 'mf 9/22/2021 23:32:56'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #Uno stamp: 'mf 9/22/2021 23:32:56'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #PositivoMayorAUno stamp: 'mf 9/22/2021 23:32:56'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #Negativo stamp: 'mf 9/22/2021 23:32:57'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'mf 9/22/2021 23:32:57'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #Cero stamp: 'mf 9/22/2021 23:32:57'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #Entero stamp: 'mf 9/22/2021 23:32:58'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #Numero stamp: 'mf 9/22/2021 23:32:58'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

!classRemoval: #NumeroTest stamp: 'mf 9/22/2021 23:32:58'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-3.2.incluye switch dinamico al crear enteros.st----!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test27BisEnteroSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test27ZeroDivideAnythingIsZero stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 9/22/2021 23:35:01'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 9/22/2021 23:35:02'!
PASSED!

Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

!classDefinition: #UnaEmpresaTelefonica category: 'Llamadas' stamp: 'mf 9/23/2021 00:05:58'!
Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

----End fileIn of D:\Cuis\Packages\TerseGuide.pck.st----!
!UnaEmpresaTelefonica methodsFor: 'no messages' stamp: 'mf 9/23/2021 00:28:06'!
realizarLlamadaDesde: numeroDeTelefonoEmisor al: numeroDeTelefonoDelReceptor

	(self  numerosDeTelefonos includes: numeroDeTelefonoEmisor) ifFalse: ['El numero no existe'].! !
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:29:08'!
assertNumeroExiste: numeroDeTelefonoEmisor

	^ (self  numerosDeTelefonos includes: numeroDeTelefonoEmisor) ifFalse: ['El numero no existe']! !
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:29:08' prior: 50872291!
realizarLlamadaDesde: numeroDeTelefonoEmisor al: numeroDeTelefonoDelReceptor

	self assertNumeroExiste: numeroDeTelefonoEmisor.! !
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:29:32' prior: 50872300!
assertNumeroExiste: numeroDeTelefonoEmisor

	^ (self  numerosDeTelefonos includes: numeroDeTelefonoEmisor) ifFalse: [self error: 'El numero no existe']! !
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:30:33' prior: 50872316!
assertNumeroExiste: numeroDeTelefono

	^ (self  numerosDeTelefonos includes: numeroDeTelefono) ifFalse: [self error: 'El numero',  numeroDeTelefono print,'no existe']! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

!classDefinition: #NameOfSubclass category: 'Llamadas' stamp: 'mf 9/23/2021 00:31:37'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

!classRemoval: #NameOfSubclass stamp: 'mf 9/23/2021 00:31:50'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

!classDefinition: #UnaEmpresaTelefonica category: 'Llamadas' stamp: 'mf 9/23/2021 00:31:54'!
Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: ''
	classVariableNames: 'numerosDeTelefonos'
	poolDictionaries: ''
	category: 'Llamadas'!

Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: ''
	classVariableNames: 'NumerosDeTelefonos'
	poolDictionaries: ''
	category: 'Llamadas'!

!classDefinition: #UnaEmpresaTelefonica category: 'Llamadas' stamp: 'mf 9/23/2021 00:32:30'!
Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: ''
	classVariableNames: 'NumerosDeTelefonos'
	poolDictionaries: ''
	category: 'Llamadas'!
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:32:39' prior: 50872325!
assertNumeroExiste: numeroDeTelefono

	^ (self  NumerosDeTelefonos includes: numeroDeTelefono) ifFalse: [self error: 'El numero',  numeroDeTelefono print,'no existe']! !

!classDefinition: #UnaEmpresaTelefonica category: 'Llamadas' stamp: 'mf 9/23/2021 00:33:01'!
Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: 'NumerosDeTelefonos'
	poolDictionaries: ''
	category: 'Llamadas'!
!UnaEmpresaTelefonica methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 00:32:53' prior: 50872382!
assertNumeroExiste: numeroDeTelefono

	^ (numerosDeTelefonos includes: numeroDeTelefono) ifFalse: [self error: 'El numero',  numeroDeTelefono print,'no existe']! !

Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

!classDefinition: #UnaEmpresaTelefonica category: 'Llamadas' stamp: 'mf 9/23/2021 00:33:09'!
Object subclass: #UnaEmpresaTelefonica
	instanceVariableNames: 'numerosDeTelefonos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Llamadas'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\15-Stack\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:53:35'!
ERROR!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 01:54:10'!
isEmpty
	self shouldBeImplemented.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 01:56:02' prior: 50872578!
isEmpty
	^true.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:56:09'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:56:09'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:56:09'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:56:27'!
ERROR!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 01:56:47'!
push: aString 
	self shouldBeImplemented.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 01:56:55' prior: 50872624!
push: anElement 
	self shouldBeImplemented.! !

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 01:57:33'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 01:57:29' prior: 50872628!
push: anElement 
	elementos add: anElement.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:57:40'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:57:40'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:57:40'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:57:43'!
ERROR!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 01:58:31'!
inizializate
	elementos _ OrderedCollection new.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:58:36'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:58:39'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 01:58:39'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:58:39'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 01:58:39'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:58:39'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 01:58:40'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:58:45'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:59:04'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 01:59:09'!
ERROR!

| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty!

| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:01:05' prior: 50872582!
isEmpty
	^elementos isEmpty.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:01:13'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:01:19'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:01:29'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:02:05'!
ERROR!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:02:49'!
inizialize
	elementos _ OrderedCollection new.! !

!methodRemoval: OOStack #inizializate stamp: 'mf 9/23/2021 02:02:59'!
inizializate
	elementos _ OrderedCollection new.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:03:03'!
ERROR!

OOStack new!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:04:16' overrides: 16896425!
initialize
	elementos _ OrderedCollection new.! !

!methodRemoval: OOStack #inizialize stamp: 'mf 9/23/2021 02:04:23'!
inizialize
	elementos _ OrderedCollection new.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:04:28'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:04:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:04:28'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:04:28'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:04:35'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 02:04:53'!
pop
	self shouldBeImplemented.! !

!methodRemoval: OOStack #pop stamp: 'mf 9/23/2021 02:05:24'!
pop
	self shouldBeImplemented.!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:08:19'!
pop
	
	| tope |! !

OrderedCollection!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:12:00' prior: 50872821!
pop
	
	| tope |
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:12:05'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:12:05'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:12:05'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:12:05'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:12:05'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:12:05'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:12:21'!
ERROR!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:12:41'!
top
	self shouldBeImplemented.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:12:58' prior: 50872869!
top
	^elementos last.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:13:07'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:13:07'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:13:07'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:13:07'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:13:07'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:13:43'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:14:04'!
ERROR!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:15:09' overrides: 16880927!
size
	^elementos size.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:15:16'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:15:16'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:15:16'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:15:16'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:17:49' prior: 50872825!
pop
	
	| tope |
	
	elementos size = 0 ifTrue: [self error . 'La pila está vacía'].
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:17:55' prior: 50872959!
pop
	
	| tope |
	
	elementos size = 0 ifTrue: [self error , 'La pila está vacía'].
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:20:35' prior: 50872967!
pop
	
	| tope |
	
	elementos size = 0 ifTrue: [self error: 'La pila está vacía'].
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:21:03'!
assertPilaNoVacia

	^ elementos size = 0 ifTrue: [self error: 'La pila está vacía']! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:21:03' prior: 50872975!
pop
	
	| tope |
	
	self assertPilaNoVacia.
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:22:35'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:22:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:22:35'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:22:36'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:22:36'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:22:36'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:22:36'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:22:36'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:22:36'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:22:36'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:22:36'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:23:10'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:23:10'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:23:10'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:23:10'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:23:11'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:23:11'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:23:11'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:23:11'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:23:11'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:23:11'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:23:11'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:28:17' prior: 50872988!
pop
	
	| tope |
	
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 02:28:26'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:28:26'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 02:28:26'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 02:28:27'!
FAILURE!

!methodRemoval: OOStack #assertPilaNoVacia stamp: 'mf 9/23/2021 02:30:53'!
assertPilaNoVacia

	^ elementos size = 0 ifTrue: [self error: 'La pila está vacía']!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:32:07' prior: 50873066!
pop
	
	| tope |
	
	self isEmpty isTrue: [].
	
	tope _ elementos last.
	elementos removeLast.
	^ tope ! !

OOStack subclass: #OOStackEmpty
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:33:09'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackEmptyNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmptyNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:33:20'!
OOStack subclass: #OOStackEmptyNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:33:36' prior: 50872739!
isEmpty
	^false.! !
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 02:34:04' overrides: 50873146!
isEmpty
	^true.! !
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:35:40' prior: 50872767 overrides: 16896425!
initialize
	^OOStackEmpty new.! !
!OOStackEmpty methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:36:07' overrides: 50872919!
size
	^0.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:36:44' prior: 50873112!
pop
	! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:38:08' prior: 50872919 overrides: 16880927!
size
	self subclassResponsibility.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:38:22' prior: 50873161!
pop
	
	self subclassResponsibility.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:38:43' prior: 50872640!
push: anElement 
	
	self subclassResponsibility.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:38:52' prior: 50872873!
top
	
	self subclassResponsibility.! !

!classRenamed: #OOStackEmptyNotEmpty as: #OOStackNotEmpty stamp: 'mf 9/23/2021 02:40:22'!
Smalltalk renameClassNamed: #OOStackEmptyNotEmpty as: #OOStackNotEmpty!
!OOStackEmpty methodsFor: 'operations' stamp: 'mf 9/23/2021 02:41:04' overrides: 50873173!
push: unElemento
	
	^OOStackNotEmpty with: unElemento.! !
!OOStackNotEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 02:42:03'!
with: unElemento
	
	^ OOStackNotEmpty initializeWith: unElemento! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 02:42:59'!
initializeWith: unElemento
	
	elementos _ OrderedCollection with: unElemento.! !

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:44:00'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:44:06'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:35:40' prior: 50873154 overrides: 16896425!
initialize
	^OOStackEmpty new.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:33:36' prior: 50873146!
isEmpty
	^false.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:38:22' prior: 50873169!
pop
	
	self subclassResponsibility.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 02:38:43' prior: 50873173!
push: anElement 
	
	self subclassResponsibility.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 02:38:08' prior: 50873165 overrides: 16880927!
size
	self subclassResponsibility.! !
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:04:16' prior: 50873226 overrides: 16896425!
initialize
	elementos _ OrderedCollection new.! !

!classRemoval: #OOStackEmpty stamp: 'mf 9/23/2021 02:53:34'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNotEmpty stamp: 'mf 9/23/2021 02:53:41'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:54:35'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:54:48'!
Object subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:54:30' prior: 50873248 overrides: 16896425!
initialize
	elementos _ OrderedCollection with: Base new.! !
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:56:10' prior: 50873280 overrides: 16896425!
initialize
	elementos _ OrderedCollection with: 'Soy la base de la pila xdxdxd'.! !

!classRemoval: #Base stamp: 'mf 9/23/2021 02:56:18'!
Object subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:57:36'!
OOStack subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #Elemento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Elemento category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:57:44'!
OOStack subclass: #Elemento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'elementos tope'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 02:58:06'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos tope'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:58:17' prior: 50873286 overrides: 16896425!
initialize
	elementos _ OrderedCollection with: Base new.! !
!OOStack methodsFor: 'initialization' stamp: 'mf 9/23/2021 02:59:32' prior: 50873331 overrides: 16896425!
initialize
	|base|
	base _ Base new.
	elementos _ OrderedCollection with: base.
	tope _ base.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:00:13' prior: 50873230!
isEmpty
	self subclassResponsibility.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:00:27' prior: 50873234!
pop
	self subclassResponsibility.! !

!classRenamed: #Base as: #BaseDePila stamp: 'mf 9/23/2021 03:01:02'!
Smalltalk renameClassNamed: #Base as: #BaseDePila!
!OOStack methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 03:01:02' prior: 50873337 overrides: 16896425!
initialize
	|base|
	base _ BaseDePila new.
	elementos _ OrderedCollection with: base.
	tope _ base.! !

!classRenamed: #Elemento as: #ElementoDePila stamp: 'mf 9/23/2021 03:01:31'!
Smalltalk renameClassNamed: #Elemento as: #ElementoDePila!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:02:10' prior: 50873238!
push: anElement 
	
	elementos add: anElement.
	tope _ anElement.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:02:18' prior: 50873178!
top
	self subclassResponsibility.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:02:37' prior: 50873243 overrides: 16880927!
size
	^elementos size -1.! !
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:03:16' prior: 50873343!
isEmpty
	tope isEmpty.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:03:39' prior: 50873347!
pop
	tope pop.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:04:05' prior: 50873372!
top
	tope top.! !
!BaseDePila methodsFor: 'no messages' stamp: 'mf 9/23/2021 03:04:31' overrides: 50873381!
isEmpty
	
	^true.! !
!ElementoDePila methodsFor: 'no messages' stamp: 'mf 9/23/2021 03:05:00' overrides: 50873381!
isEmpty
	^false! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:06:06' prior: 50873367!
push: anElement 

	|nuevoTope|
	nuevoTope _ ElementoDePila with: anElement	.
	elementos add: anElement.
	tope _ anElement.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:06:18' prior: 50873401!
push: anElement 

	|nuevoTope|
	nuevoTope _ ElementoDePila with: anElement	.
	elementos add: nuevoTope.
	tope _ nuevoTope.! !
!ElementoDePila methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 03:07:48'!
with: anElement
	^ElementoDePila initializeWith: anElement.! !

!classDefinition: #ElementoDePila category: 'Stack-Exercise' stamp: 'mf 9/23/2021 03:08:23'!
OOStack subclass: #ElementoDePila
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!ElementoDePila methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 03:08:18'!
initializeWith: anElement
	valor _ anElement.! !
!ElementoDePila methodsFor: 'nil' stamp: 'mf 9/23/2021 03:08:56'!
valor
	^valor.! !
!ElementoDePila methodsFor: 'nil' stamp: 'mf 9/23/2021 03:09:44' overrides: 50873389!
top
	^valor.! !

!methodRemoval: ElementoDePila #valor stamp: 'mf 9/23/2021 03:09:52'!
valor
	^valor.!

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 9/23/2021 03:15:03'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #ElementoDePila stamp: 'mf 9/23/2021 03:15:03'!
OOStack subclass: #ElementoDePila
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #BaseDePila stamp: 'mf 9/23/2021 03:15:03'!
OOStack subclass: #BaseDePila
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 9/23/2021 03:15:04'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos tope'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 9/23/2021 03:15:04'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 9/23/2021 03:15:04'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\15-Stack\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:15:22'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:15:33'!
ERROR!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:15:42'!
isEmpty
	self shouldBeImplemented.! !

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 03:15:56'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:15:54' prior: 50873642!
isEmpty
	elementos size.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:16:07'!
ERROR!
!OOStack methodsFor: 'nil' stamp: 'mf 9/23/2021 03:16:53' overrides: 16896425!
initialize
	elementos _ OrderedCollection new.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:17:10'!
ERROR!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:17:29' prior: 50873653!
isEmpty
	^elementos isEmpty.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:17:35'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:17:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:17:35'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:17:38'!
ERROR!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:18:20'!
push: aString 
	self shouldBeImplemented.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:18:42' prior: 50873710!
push: anElement
	elementos add: anElement.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:18:52'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:18:53'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:18:53'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:18:53'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:18:58'!
ERROR!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:19:19'!
pop
	self shouldBeImplemented.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:19:33' prior: 50873757!
pop
	elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:19:38'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:19:38'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:19:38'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:19:38'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:19:38'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:19:38'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:19:38'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:19:38'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:19:38'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:19:38'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:19:38'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:19:42'!
ERROR!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:19:57'!
top
	self shouldBeImplemented.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:20:05' prior: 50873803!
top
	elementos last.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:20:17'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:20:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:20:17'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:20:17'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:20:17'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:20:17'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:20:23'!
ERROR!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:21:32' overrides: 16880927!
size
	elementos size.! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:21:37'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:21:37'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:21:38'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:21:38'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:21:38'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:21:41'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:23:14' prior: 50873761!
pop

	elementos isEmpty isTrue: [self error: self stackEmptyErrorDescription]
	elementos removeLast.! !
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:23:18' prior: 50873893!
pop

	elementos isEmpty isTrue: [self error: self stackEmptyErrorDescription].
	elementos removeLast.! !
!OOStack methodsFor: 'error handeling' stamp: 'mf 9/23/2021 03:24:20'!
stackEmptyErrorDescription
	^'No se puede popear de un stack vacío'! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:24:25'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:24:25'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:24:25'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:24:25'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:24:25'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:24:25'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:24:25'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:24:25'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:24:25'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:24:25'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:24:25'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:24:49' prior: 50873899!
pop
	elementos isEmpty isTrue: [self error: self stackEmptyErrorDescription].
	elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:24:55'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:24:55'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:24:55'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:24:55'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:24:55'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:24:55'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:24:55'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:24:55'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:24:55'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:24:55'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:24:55'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:25:00'!
ERROR!

elementos isEmpty!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:25:46' prior: 50873946!
pop
	elementos isEmpty isTrue: [self error: self stackEmptyErrorDescription].
	elementos removeLast.! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:25:54'!
ERROR!
!False methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 03:26:15'!
isTrue: aBlockClosure 
	self shouldBeImplemented.! !

False!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:27:00' prior: 50873992!
pop
	elementos isEmpty ifTrue: [self error: self stackEmptyErrorDescription].
	elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:27:05'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:27:05'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:27:05'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:27:05'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:27:05'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:27:15'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:28:19' prior: 50874006!
pop
	|temp|
	elementos isEmpty ifTrue: [self error: self stackEmptyErrorDescription].
	
	temp _ elementos removeLast.
	^temp! !

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:28:24'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:28:24'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:28:25'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:28:25'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:28:25'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:28:25'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:28:25'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:28:25'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:28:25'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:28:25'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:28:25'!
FAILURE!

stack top!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:30:34'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:30:34'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:30:35'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:30:35'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:30:35'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:30:35'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:30:35'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:30:35'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:30:35'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:30:35'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:30:35'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:30:53'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:31:17' prior: 50873807!
top
	^elementos last.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:31:22'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:31:22'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:31:22'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:31:22'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:31:22'!
FAILURE!

pepito _ OrderedCollection with: 3.!

pepito last.!

pepito!

pepito _ OrderedCollection with: 3 with: 4.!

pepito last.!

pepito!

pepito removeLast.!

pepito!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:36:07' prior: 50874051!
pop
	^elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:36:19'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:36:19'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:36:20'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:36:20'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:36:20'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:36:20'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:36:20'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:36:20'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:36:20'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:36:20'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:36:20'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:36:30'!
FAILURE!
!OOStack methodsFor: 'comparing' stamp: 'mf 9/23/2021 03:36:48' prior: 50873850 overrides: 16880927!
size
	^elementos size.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:36:52'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:36:52'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:36:52'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:36:52'!
FAILURE!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:37:54' prior: 50874178!
pop

	self isEmpty ifTrue: [self error: self stackEmptyErrorDescription ].
	
	^elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:37:59'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:37:59'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:37:59'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:37:59'!
FAILURE!

jorge _ OOStack new.!

jorge pop.!
!OOStack methodsFor: 'operations' stamp: 'mf 9/23/2021 03:41:02' prior: 50874262!
pop

	self isEmpty ifTrue: [self message: self stackEmptyErrorDescription ].
	
	^elementos removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 9/23/2021 03:41:06'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:41:06'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 9/23/2021 03:41:06'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 9/23/2021 03:41:07'!
FAILURE!

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 9/23/2021 03:43:49'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 9/23/2021 03:43:49'!
Object subclass: #OOStack
	instanceVariableNames: 'elementos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 9/23/2021 03:43:49'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 9/23/2021 03:43:50'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----QUIT----(23 September 2021 03:44:04) CuisUniversity-4532.image priorSource: 16919802!

----STARTUP---- (23 September 2021 03:45:02) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\ing1-2021-c2-main\ing1-2021-c2-main\15-Stack\Stack-Exercise.st----!

OOStack stackEmptyErrorDescription!

!classRemoval: #NotEmptyState stamp: 'mf 9/23/2021 03:58:05'!
State subclass: #NotEmptyState
	instanceVariableNames: 'lastPoppedElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyState stamp: 'mf 9/23/2021 03:58:05'!
State subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #State stamp: 'mf 9/23/2021 03:58:06'!
Object subclass: #State
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 9/23/2021 03:58:06'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'savedStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 9/23/2021 03:58:06'!
Object subclass: #OOStack
	instanceVariableNames: 'elements state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 9/23/2021 03:58:07'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 9/23/2021 03:58:07'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\15-Stack\Stack-Exercise.st----!

Object subclass: #ElementoDeOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ElementoDeOOStack category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:01:26'!
Object subclass: #ElementoDeOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

ElementoDeOOStack subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:01:36'!
ElementoDeOOStack subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

ElementoDeOOStack subclass: #NoLaBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NoLaBase category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:01:43'!
ElementoDeOOStack subclass: #NoLaBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoLaBase stamp: 'mf 9/23/2021 04:02:19'!
ElementoDeOOStack subclass: #NoLaBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Base stamp: 'mf 9/23/2021 04:02:34'!
ElementoDeOOStack subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #ElementoDeOOStack stamp: 'mf 9/23/2021 04:02:47'!
Object subclass: #ElementoDeOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:03:55'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:03:59'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 04:07:30'!
push: anElement.
	
	^OOStackNotEmpty tope: anElement pila: self size:1.! !
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 04:07:52' overrides: 16880927!
size
	^0.! !
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 04:08:08'!
isEmpty
	^true.! !
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 04:09:06'!
pop
	self error: OOStack stackEmptyErrorDescription.! !
!OOStackEmpty methodsFor: 'nil' stamp: 'mf 9/23/2021 04:10:13'!
top
	^ self error: OOStack stackEmptyErrorDescription.! !

!methodRemoval: OOStackEmpty #push: stamp: 'mf 9/23/2021 04:11:14'!
push: anElement.
	
	^OOStackNotEmpty tope: anElement pila: self size:1.!
!OOStack methodsFor: 'no messages' stamp: 'mf 9/23/2021 04:11:42'!
push: anElement.
	
	^OOStackNotEmpty tope: anElement pila: self size:(self size + 1).! !

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:13:42'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:13:43'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope pila'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:13:45'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope pila size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackNotEmpty methodsFor: 'no messages' stamp: 'mf 9/23/2021 04:13:39'!
tope: unElemento pila: unOOStack
	
	tope _ unElemento.
	pila _ unOOStack.
	size _ unOOStack size + 1.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:14:01' prior: 50875115!
push: anElement.
	
	^OOStackNotEmpty tope: anElement pila: self.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:15:08' prior: 50875143!
tope: unElemento pila: unOOStack
	
	^OOStackNotEmpty initializeWith: unElemento and: unOOStack.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:15:58'!
initializeWith: unElemento and: unOOStack.
	
	tope _ unElemento.
	pila _ unOOStack.
	size _ unOOStack size +1.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:16:31'!
isEmpty
	^false.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:16:42' overrides: 16880927!
size
	^size.! !

OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope pila'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'mf 9/23/2021 04:16:58'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope pila'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:17:09' prior: 50875173 overrides: 16880927!
size
	^pila size + 1.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:17:22' prior: 50875162!
initializeWith: unElemento and: unOOStack.
	
	tope _ unElemento.
	pila _ unOOStack.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:17:54'!
top
	^tope.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:18:58'!
pop
	^pila.! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 04:19:24' prior: 50875204!
pop
	
	^pila.! !

!classRemoval: #Fraccion stamp: 'mf 9/23/2021 04:32:41'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'mf 9/23/2021 04:32:42'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'mf 9/23/2021 04:32:42'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'mf 9/23/2021 04:32:42'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'mf 9/23/2021 04:32:43'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'mf 9/23/2021 04:32:43'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'mf 9/23/2021 04:32:43'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'mf 9/23/2021 04:32:44'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'mf 9/23/2021 04:32:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\14-Numeros\Numeros-Solucion\Numero-Solution-2.2.b.sin if basico con calculador de fibonacci sin jerarquia y metodo de calculo dinÃ¡mico.st----!

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 9/23/2021 04:41:51'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNotEmpty stamp: 'mf 9/23/2021 04:41:51'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: 'tope pila'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackEmpty stamp: 'mf 9/23/2021 04:41:52'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 9/23/2021 04:41:52'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 9/23/2021 04:41:52'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 9/23/2021 04:41:53'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Descargas\2021-2c-main\2021-2c-main\15-Stack\Solucion\Stack-Solution-1.st----!

----SNAPSHOT----(23 September 2021 05:21:14) CuisUniversity-4532.image priorSource: 17367102!

----QUIT----(23 September 2021 05:21:25) CuisUniversity-4532.image priorSource: 17433772!

----STARTUP---- (23 September 2021 17:26:56) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:34:49' prior: 50876904!
setName: aName

	"name _ aName."! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:34:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:34:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:34:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:34:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:34:57'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:37:59' prior: 50877043!
setName: aName

	name _ aName.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:40:27'!
new 

	^ City initialize.! !

!methodRemoval: City #new stamp: 'mf 9/23/2021 17:40:59'!
new 

	^ City initialize.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:06'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:11'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:17'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:41:49'!
PASSED!

!classRemoval: #Zone stamp: 'mf 9/23/2021 17:41:55'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 9/23/2021 17:41:55'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 9/23/2021 17:41:55'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 9/23/2021 17:41:56'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----STARTUP---- (23 September 2021 17:42:26) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!
!City methodsFor: 'nil' stamp: 'mf 9/23/2021 17:43:29' overrides: 16896425!
initialize
	zones _ OrderedCollection new.! !
!City methodsFor: 'initialization' stamp: 'mf 9/23/2021 17:44:06' prior: 50878586 overrides: 16896425!
initialize
	zones _ OrderedCollection new.
	services _ OrderedCollection new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:44:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:44:29'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:44:44' prior: 50878365!
addService: aService 

	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:44:49' prior: 50878371!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:02' prior: 50878406!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:07' prior: 50878424!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:15' prior: 50878437!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:30' prior: 50878456!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:36' prior: 50878474!
waterProduced
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:45:44' prior: 50878486!
zones

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:45:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:45:52'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 17:47:14' prior: 50878553!
initializeWithType: aZoneType 

	type _ aZoneType.! !

Zone subclass: #Residential
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 17:47:56'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Comertial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 17:48:15'!
Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 17:48:20'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:51:38'!
addResidentialZone: aZone

	^ aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:51:38' prior: 50878705!
addZone: aZone

	self addResidentialZone: aZone.

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:52:40' prior: 50878952!
addResidentialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:53:10' prior: 50878963!
addZone: aZone

	aZone type = #Residential ifTrue: [self addResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:54:10' prior: 50878996!
addZone: aZone

	aZone type = #Residential ifTrue: [self addResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [
		
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:54:27' prior: 50878986!
addResidentialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:55:06'!
addComertialZone: aZone
 
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:55:10' prior: 50879044!
addComertialZone: aZone
 
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:57:04' prior: 50879020!
addZone: aZone

	aZone type = #Residential ifTrue: [self addResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self addComertialZone: aZone].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 17:57:16'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 17:57:17'!
PASSED!
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:57:31'!
addIndustrialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 17:58:11' prior: 50879188!
addIndustrialZone: aZone
 
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 17:59:50' prior: 50879070!
addZone: aZone

	aZone type = #Residential ifTrue: [self addResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self addComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self addIndustrialZone: aZone].

	zones add: aZone.
! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 18:02:58'!
canAddComertialZone: aZone
 
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:02:58' prior: 50879208!
addZone: aZone

	aZone type = #Residential ifTrue: [self addResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self addIndustrialZone: aZone].

	zones add: aZone.
! !

!methodRemoval: City #addComertialZone: stamp: 'mf 9/23/2021 18:02:59'!
addComertialZone: aZone
 
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	!
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 18:03:27'!
canAddResidentialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:03:28' prior: 50879231!
addZone: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self addIndustrialZone: aZone].

	zones add: aZone.
! !

!methodRemoval: City #addResidentialZone: stamp: 'mf 9/23/2021 18:03:28'!
addResidentialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	!
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 18:03:48'!
canAddIndustrialZone: aZone
 
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:03:48' prior: 50879263!
addZone: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self canAddIndustrialZone: aZone].

	zones add: aZone.
! !

!methodRemoval: City #addIndustrialZone: stamp: 'mf 9/23/2021 18:03:49'!
addIndustrialZone: aZone
 
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:04:01'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:04:33'!
canAdd: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self canAddIndustrialZone: aZone]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:04:33' prior: 50879292!
addZone: aZone

	self canAdd: aZone.

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:05:02' prior: 50879425!
addZone: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self canAddIndustrialZone: aZone].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:05:38' prior: 50879430!
addZone: aZone

	self canAdd: aZone.

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:05:44'!
PASSED!
!Zone methodsFor: 'nil' stamp: 'mf 9/23/2021 18:07:19'!
canBeAddedTo: aCity
	
	self subclassResponsibility.! !
!Comertial methodsFor: 'no messages' stamp: 'mf 9/23/2021 18:08:12' overrides: 50879548!
canBeAddedTo: aCity
	
	aCity canAddComertialZone: self.! !
!Industrial methodsFor: 'no messages' stamp: 'mf 9/23/2021 18:08:50' overrides: 50879548!
canBeAddedTo: aCity
	
	aCity canAddIndustrialZone: self.! !
!Residential methodsFor: 'no messages' stamp: 'mf 9/23/2021 18:09:07' overrides: 50879548!
canBeAddedTo: aCity
	
	aCity canAddResidentialZone: self.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:09:26'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:09:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:09:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:09:26'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:09:27'!
PASSED!
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 18:09:52' prior: 50879415!
canAdd: aZone

	aZone canBeAddedTo: self.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:10:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:10:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:10:01'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:10:01'!
ERROR!
!Comertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:11:34' overrides: 50878567!
type
	^ #Comertial! !

!classRenamed: #Comertial as: #ComertialZone stamp: 'mf 9/23/2021 18:12:21'!
Smalltalk renameClassNamed: #Comertial as: #ComertialZone!
!ComertialZone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:12:22' prior: 50879779 overrides: 50878567!
type
	^ #ComertialZone! !
!ComertialZone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:12:56' prior: 50879788 overrides: 50878567!
type
	^ 'Comertial'.! !
!City methodsFor: 'add - private' stamp: 'mf 9/23/2021 18:04:33' prior: 50879671!
canAdd: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #Industrial ifTrue: [self canAddIndustrialZone: aZone]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:13:59'!
PASSED!

!classRenamed: #Industrial as: #IndustrialZone stamp: 'mf 9/23/2021 18:14:31'!
Smalltalk renameClassNamed: #Industrial as: #IndustrialZone!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:14:31' prior: 50879797!
canAdd: aZone

	aZone type = #Residential ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #IndustrialZone ifTrue: [self canAddIndustrialZone: aZone]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:14:31' prior: 50878772!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:14:31' prior: 50878734!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:14:31' prior: 50878024!
industrialZone

	^ Zone withType: #IndustrialZone! !
!ComertialZone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:15:17' prior: 50879793 overrides: 50878567!
type
	^ #Comertial.! !

!classRenamed: #Residential as: #ResidentialZone stamp: 'mf 9/23/2021 18:16:32'!
Smalltalk renameClassNamed: #Residential as: #ResidentialZone!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:32' prior: 50879915!
canAdd: aZone

	aZone type = #ResidentialZone ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #IndustrialZone ifTrue: [self canAddIndustrialZone: aZone]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:32' prior: 50879943!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:32' prior: 50878762!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:32' prior: 50879926!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:32' prior: 50878028!
residentialZone

	^ Zone withType: #ResidentialZone! !
!ComertialZone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:16:49' prior: 50879967 overrides: 50878567!
type
	^ self class.! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:17:06' prior: 50878567!
type
	
	^ self class.! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:17:09' prior: 50880042!
type
	
	^ self class.! !

!methodRemoval: ComertialZone #type stamp: 'mf 9/23/2021 18:17:30'!
type
	^ self class.!

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:17:57'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:19:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:19:14'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:19:48' prior: 50880032!
residentialZone

	^ ResidentialZone new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:20:17' prior: 50879961!
industrialZone

	^ IndustrialZone new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:20:30' prior: 50878020!
commertialZone

	^ ComertialZone new.! !

!methodRemoval: Zone #initializeWithType: stamp: 'mf 9/23/2021 18:21:10'!
initializeWithType: aZoneType 

	type _ aZoneType.!
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:21:37' overrides: 16896425!
initialize
	
	numberOfCells _ 1.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:21:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:21:59'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:22:04'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:23:05'!
FAILURE!

----SNAPSHOT----(23 September 2021 18:23:40) CuisUniversity-4532.image priorSource: 17433867!

----QUIT----(23 September 2021 18:24:33) CuisUniversity-4532.image priorSource: 17556854!

----STARTUP---- (23 September 2021 18:25:07) as D:\Cuis\CuisUniversity-4532.image!


!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:25:13'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:25:13'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:25:14'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:25:18'!
FAILURE!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 18:28:14'!
initializeWithType: aType
	
	| type |
	type _ aType.
	numberOfCells _ 1! !

Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #Zone
	instanceVariableNames: 'tipo numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:29:00'!
Object subclass: #Zone
	instanceVariableNames: 'tipo numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 18:29:11' prior: 50880418!
initializeWithType: aType
	
	tipo _ aType.
	numberOfCells _ 1! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:29:21' prior: 50880046!
type
	
	^ tipo.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:29:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:29:26'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:29:27'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:04' prior: 50880179!
commertialZone

	^ Zone withType: #Commertial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:14' prior: 50880174!
industrialZone

	^ Zone withType: #Industrial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:55' prior: 50880169!
residentialZone

	^ Zone withType: #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:33:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:33:10'!
FAILURE!

Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:33:32'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 18:33:51' prior: 50880441!
initializeWithType: aZoneType 

	type := aZoneType.! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:34:14' prior: 50878557!
getNumberOfCells

	numberOfCells ifNil: [ ^ 1].	
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:34:42' prior: 50880446!
type
	
	^ type.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:35:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:35:21'!
FAILURE!

!classRemoval: #ResidentialZone stamp: 'mf 9/23/2021 18:38:08'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'mf 9/23/2021 18:38:08'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ComertialZone stamp: 'mf 9/23/2021 18:38:09'!
Zone subclass: #ComertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 9/23/2021 18:38:09'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 9/23/2021 18:38:09'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 9/23/2021 18:38:10'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 9/23/2021 18:38:10'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:38:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:38:31'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:39:42' prior: 50881207!
addZone: aZone

	self canAdd: aZone.

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:40:00' prior: 50881237!
energyAvailable
	
	^ self energyProduced - self energyConsumption
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:40:17' prior: 50881242!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:40:36' prior: 50881260!
energyProduced
	
	| index total |
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:40:56' prior: 50881273!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:41:10' prior: 50881283!
setName: aName

	name _ aName.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:41:23' prior: 50881287!
waterAvailable
	
	^ self waterProduced - self waterConsumption.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:41:37' prior: 50881292!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:41:59' prior: 50881310!
waterProduced
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:42:09' prior: 50881322!
zones

	^ zones.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:42:22' overrides: 16896425!
initialize
	zones _ OrderedCollection new.
	services _ OrderedCollection new.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:42:45'!
canAdd: aZone

	aZone type = #ResidentialZone ifTrue: [self canAddResidentialZone: aZone.].

	aZone type = #Commertial ifTrue: [self canAddComertialZone: aZone].

	aZone type = #IndustrialZone ifTrue: [self canAddIndustrialZone: aZone]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:43:00'!
canAddComertialZone: aZone
 
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:43:12'!
canAddIndustrialZone: aZone
 
	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:43:31'!
canAddResidentialZone: aZone
 
	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:44:01'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:44:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:44:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:44:02'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:44:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:44:02'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:44:02'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:44:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:44:02'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:44:04'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:45:11'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:45:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:45:12'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:45:12'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:45:12'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:45:12'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:45:12'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:45:12'!
FAILURE!

!classRemoval: #Zone stamp: 'mf 9/23/2021 18:45:21'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 9/23/2021 18:45:21'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 9/23/2021 18:45:21'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 9/23/2021 18:45:22'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!
!City methodsFor: 'nil' stamp: 'mf 9/23/2021 18:46:14' overrides: 16896425!
initialize
	zones _ OrderedCollection new.
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:46:39' prior: 50882477 overrides: 16896425!
initialize
	zones _ OrderedCollection new.
	services  _ OrderedCollection new.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:07' prior: 50882297!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:11' prior: 50882315!
energyProduced
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:15' prior: 50882328!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:25' prior: 50882256!
addService: aService 

	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:29' prior: 50882262!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:47:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:47:43'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:56' prior: 50882347!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:48:05' prior: 50882365!
waterProduced
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:48:10' prior: 50882377!
zones

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:48:19'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:49:12' prior: 50882531!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:49:16'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:49:17'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:49:48'!
assertAZoneCanBeAdded: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:49:48' prior: 50882798!
addZone: aZone

	self assertAZoneCanBeAdded: aZone.

	zones add: aZone.
! !

Zone subclass: #ComertialZone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #ComertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ComertialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:51:16'!
Zone subclass: #ComertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:51:23'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 18:51:31'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:52:02'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:52:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:52:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:52:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:52:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:52:11'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 18:54:17' overrides: 16896425!
initialize 

	numberOfCells  _ 1.! !

!classRenamed: #ComertialZone as: #Comertial stamp: 'mf 9/23/2021 18:54:34'!
Smalltalk renameClassNamed: #ComertialZone as: #Comertial!

!classRenamed: #IndustrialZone as: #Industrial stamp: 'mf 9/23/2021 18:54:53'!
Smalltalk renameClassNamed: #IndustrialZone as: #Industrial!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:54:53' prior: 50882488!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:54:53' prior: 50882663!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:54:53' prior: 50882929!
assertAZoneCanBeAdded: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:54:53' prior: 50881915!
industrialZone

	^ Zone withType: #Industrial! !

!classRenamed: #ResidentialZone as: #Residential stamp: 'mf 9/23/2021 18:55:41'!
Smalltalk renameClassNamed: #ResidentialZone as: #Residential!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:55:41' prior: 50883224!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:55:41' prior: 50883258!
assertAZoneCanBeAdded: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:55:41' prior: 50882516!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:55:41' prior: 50883241!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:55:41' prior: 50881919!
residentialZone

	^ Zone withType: #Residential! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:56:36' prior: 50882458!
type
	
	^ self class.! !

!classRenamed: #Comertial as: #Commertial stamp: 'mf 9/23/2021 18:57:16'!
Smalltalk renameClassNamed: #Comertial as: #Commertial!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:57:16' prior: 50883296!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:57:16' prior: 50883352!
waterConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:57:16' prior: 50883313!
assertAZoneCanBeAdded: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:57:16' prior: 50881911!
commertialZone

	^ Zone withType: #Commertial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:57:46' prior: 50883445!
commertialZone

	^ Commertial new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:57:54'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:57:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:57:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:57:54'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:57:54'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:57:54'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:57:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:57:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:57:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:57:55'!
FAILURE!
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 18:58:08' prior: 50883374!
type
	
	^ type.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:59:00' prior: 50883450!
commertialZone

	^ Zone withType: #Commertial.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 18:59:05'!
PASSED!
!Commertial methodsFor: 'no messages' stamp: 'mf 9/23/2021 18:59:36' overrides: 50883558!
type
	^self name.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:59:50' prior: 50883562!
commertialZone

	^ Commertial new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 18:59:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:00:00'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:00:00'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:00:00'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:00:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:00:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:00:00'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:00:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:00:02'!
FAILURE!

!methodRemoval: Commertial #type stamp: 'mf 9/23/2021 19:00:51'!
type
	^self name.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:01:03'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:01:21' prior: 50883674!
commertialZone

	^ Zone withType: Commertial.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:02:27' prior: 50883369!
residentialZone

	Residential new.
	^ Zone withType: #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:02:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:02:31'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:02:31'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:02:31'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:02:31'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:02:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:02:48'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:03:22'!
FAILURE!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:04:37' prior: 50881923!
solarPlant

	^ Service withType: #SolarPlant! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:04:42'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:04:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:04:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:04:43'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:04:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:04:43'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:04:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:04:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:04:43'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:04:43'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:04:52' prior: 50884014!
solarPlant

	^ Service withType: #SolarPlant.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:33' prior: 50884122!
solarPlant

	^ Service withType: #SolarPlant! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:05:10'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:05:17' prior: 50883897!
residentialZone

	
	^ Zone withType: #Residential! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:05:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:05:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:05:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:05:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:05:20'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:05:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:05:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:05:28'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:05:36'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:11'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:12'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:06:12'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:06:12'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:06:12'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:06:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:06:28'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:06:28'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:06:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:06:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:07:12'!
FAILURE!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:11:07'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:11:07'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:11:07'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:11:50'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:11:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:11:51'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:51'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:51'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:11:51'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:11:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:11:51'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:11:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:11:53'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:12:07'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:12:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:12:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:12:57'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:12:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:12:57'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:12:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:12:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:12:57'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:12:57'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:13:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:13:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:09'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:09'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:32'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:42'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:42'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:13:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:53'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:13:53'!
FAILURE!

!methodRemoval: Zone #initialize stamp: 'mf 9/23/2021 19:15:19'!
initialize 

	numberOfCells  _ 1.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:15:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:17:20'!
FAILURE!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:20:07' prior: 50883382!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:20:36' prior: 50883892!
commertialZone

	^ Zone withType: #Commertial.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:20:52' prior: 50885032!
energyConsumption
	
	| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:20:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:20:57'!
PASSED!

Commertial new type!

Commertial new class!

Zone initializeWithType: #Commertial type!

Zone withType: #Commertial.!

Zone withType: #Commertial type.!

carlitos _ Zone withType: #Commertial. !

carlitos type!

carlitos class !
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 19:25:08' overrides: 16896425!
initialize
	numberOfCells  _ 1.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:25:13'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:27:39'!
assertAResidentialZoneCanBeAdded: aZone

	^ aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:27:39' prior: 50883416!
assertAZoneCanBeAdded: aZone

	self assertAResidentialZoneCanBeAdded: aZone.

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:28:07'!
assertAComertialZoneCanBeAdded: aZone

	^ aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:28:07' prior: 50885301!
assertAZoneCanBeAdded: aZone

	self assertAResidentialZoneCanBeAdded: aZone.

	self assertAComertialZoneCanBeAdded: aZone.

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:28:34'!
assertAnIndustrialZoneCanBeAdded: aZone

	^ aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:28:34' prior: 50885339!
assertAZoneCanBeAdded: aZone

	self assertAResidentialZoneCanBeAdded: aZone.

	self assertAComertialZoneCanBeAdded: aZone.

	self assertAnIndustrialZoneCanBeAdded: aZone! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:28:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:28:46'!
PASSED!

----SNAPSHOT----(23 September 2021 19:29:35) CuisUniversity-4532.image priorSource: 17556949!
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 19:30:17' prior: 50883558!
type
	
	^ self subclassResponsibility.! !
!Commertial methodsFor: 'no messages' stamp: 'mf 9/23/2021 19:30:36' overrides: 50885479!
type
	^ #Commertial.! !
!Industrial methodsFor: 'no messages' stamp: 'mf 9/23/2021 19:30:57' overrides: 50885479!
type
	^ #Industrial! !
!Residential methodsFor: 'no messages' stamp: 'mf 9/23/2021 19:31:16' overrides: 50885479!
type

	^ #Residential! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:31:46' prior: 50885050!
commertialZone

	^ Commertial new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:31:57' prior: 50883287!
industrialZone

	^ Industrial new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:32:05' prior: 50884235!
residentialZone

	
	^ Residential new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:32:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:32:09'!
PASSED!

!methodRemoval: Zone #initializeWithType: stamp: 'mf 9/23/2021 19:33:14'!
initializeWithType: aZoneType 

	type := aZoneType.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:33:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:33:21'!
PASSED!
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 19:33:47' prior: 50882448!
getNumberOfCells
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 19:34:25'!
canBeAddedTo: aCity
	
	^ self subclassResponsibility.! !
!Commertial methodsFor: 'nil' stamp: 'mf 9/23/2021 19:35:02' overrides: 50885724!
canBeAddedTo: aCity
	aCity assertAComertialZoneCanBeAdded: self.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:35:42' overrides: 50885724!
canBeAddedTo: aCity
	aCity assertAnIndustrialZoneCanBeAdded: self.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:35:58' overrides: 50885724!
canBeAddedTo: aCity
	aCity assertAResidentialZoneCanBeAdded: self.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:36:33' prior: 50882958!
addZone: aZone

	aZone canBeAddedTo: self.

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:36:37'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:36:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:36:38'!
PASSED!

!methodRemoval: City #assertAZoneCanBeAdded: stamp: 'mf 9/23/2021 19:36:47'!
assertAZoneCanBeAdded: aZone

	self assertAResidentialZoneCanBeAdded: aZone.

	self assertAComertialZoneCanBeAdded: aZone.

	self assertAnIndustrialZoneCanBeAdded: aZone!
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 19:37:35'!
assertCanBeAddedTo: aCity
	
	^ self subclassResponsibility.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:37:35' overrides: 50885861!
assertCanBeAddedTo: aCity
	aCity assertAResidentialZoneCanBeAdded: self.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:37:35' overrides: 50885861!
assertCanBeAddedTo: aCity
	aCity assertAComertialZoneCanBeAdded: self.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:37:35' overrides: 50885861!
assertCanBeAddedTo: aCity
	aCity assertAnIndustrialZoneCanBeAdded: self.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:37:35' prior: 50885746!
addZone: aZone

	aZone assertCanBeAddedTo: self.

	zones add: aZone.
! !

!methodRemoval: Zone #canBeAddedTo: stamp: 'mf 9/23/2021 19:37:35'!
canBeAddedTo: aCity
	
	^ self subclassResponsibility.!

!methodRemoval: Residential #canBeAddedTo: stamp: 'mf 9/23/2021 19:37:35'!
canBeAddedTo: aCity
	aCity assertAResidentialZoneCanBeAdded: self.!

!methodRemoval: Commertial #canBeAddedTo: stamp: 'mf 9/23/2021 19:37:35'!
canBeAddedTo: aCity
	aCity assertAComertialZoneCanBeAdded: self.!

!methodRemoval: Industrial #canBeAddedTo: stamp: 'mf 9/23/2021 19:37:35'!
canBeAddedTo: aCity
	aCity assertAnIndustrialZoneCanBeAdded: self.!
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 19:41:03' prior: 50885324!
assertAComertialZoneCanBeAdded: aZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 19:41:43' prior: 50885289!
assertAResidentialZoneCanBeAdded: aZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 19:41:54' prior: 50885353!
assertAnIndustrialZoneCanBeAdded: aZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:42:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:42:01'!
PASSED!
!Zone methodsFor: 'nil' stamp: 'mf 9/23/2021 19:45:48'!
getEnergyConsumption
	self subclassResponsibility.! !
!Commertial methodsFor: 'nil' stamp: 'mf 9/23/2021 19:46:18' overrides: 50886042!
getEnergyConsumption
	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:47:00' prior: 50886047 overrides: 50886042!
getEnergyConsumption
	
	^(5 * ep) * self getNumberOfCells
	! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:47:33' prior: 50886052 overrides: 50886042!
getEnergyConsumption
	
	^(5 * ep) * numberOfCells.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:47:56'!
PASSED!
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:48:20' overrides: 50886042!
getEnergyConsumption
	
	^(5 * ep) * numberOfCells.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:48:47' prior: 50886166 overrides: 50886042!
getEnergyConsumption
	
	^(8 * ep) * numberOfCells.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:49:18' prior: 50886172 overrides: 50886042!
getEnergyConsumption
	
	^(10 * ep) * numberOfCells.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:49:38' prior: 50886058 overrides: 50886042!
getEnergyConsumption
	
	^(8 * ep) * numberOfCells.
	! !
!Zone methodsFor: 'nil' stamp: 'mf 9/23/2021 19:51:10'!
calculateEnergyConsumption: xxx
	
	^ (xxx * ep) * numberOfCells.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:51:29' prior: 50886184 overrides: 50886042!
getEnergyConsumption
	
	^ self calculateEnergyConsumption: 8.
	! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:51:46' prior: 50886178 overrides: 50886042!
getEnergyConsumption
	
	^self calculateEnergyConsumption: 10.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:52:10' overrides: 50886042!
getEnergyConsumption
	
	^self calculateEnergyConsumption: 5.! !
!Zone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:52:34' prior: 50886188!
calculateEnergyConsumption: anEpAmmount
	
	^ (anEpAmmount * ep) * numberOfCells.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:52:47'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:52:47'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:52:48'!
PASSED!

Commertial new getEnergyConsumption !

Industrial new getEnergyConsumption !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:55:32' prior: 50885055!
energyConsumption
	
	"| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total."
	
	^ zones sum: []
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 19:57:42' prior: 50886322!
energyConsumption
	
	"| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total."
	
	^ zones sum: [:aZone | aZone getEnergyConsumption].
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:57:51'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:57:58'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 19:57:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 19:57:58'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 19:57:58'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 19:57:58'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 19:57:58'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 19:57:58'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 19:57:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 19:57:59'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 19:57:59'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:00:41'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:00:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:00:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:00:41'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:00:41'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:01:25'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:01:57' prior: 50886340!
energyConsumption
	
	"| index total |
	
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total."
	
	^ zones sum: [:aZone | aZone getEnergyConsumption] ifEmpty: 0.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:02:11'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:02:25' prior: 50886572!
energyConsumption
	
	^ zones sum: [:aZone | aZone getEnergyConsumption] ifEmpty: 0.
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:04:30' prior: 50883342!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential]
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:04:58' prior: 50886700!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential].
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:05:27' prior: 50886706!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential].
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:06:21' prior: 50886712!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential] ifNone: false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:06:30'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:06:30'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:06:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:06:31'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:06:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:07:09'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 18:47:15' prior: 50886718!
hasResidentialZones

	| index |

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:09:31'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:06:21' prior: 50886831!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential] ifNone: false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:10:51' prior: 50886944!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential] ifNone: false not.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:10:59'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:10:59'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:11:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:11:00'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:11:00'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:11:13' prior: 50886950!
hasResidentialZones

	^ (zones detect: [:aZone | aZone class = Residential] ifNone: false) not.
! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:11:20'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:12:07' prior: 50887059!
hasResidentialZones

	^ zones detect: [:aZone | aZone class = Residential] ifNone: true
! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:12:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:12:23'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:24'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:12:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:12:24'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:12:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:12:32'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:12:33'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:33'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:33'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:12:33'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:12:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:12:33'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:12:33'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:16:04' prior: 50887069!
hasResidentialZones
	|temp|
	temp _ zones detect: [:aZone | aZone class = Residential] ifNone: [^true].
	^false.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:16:12' prior: 50887281!
hasResidentialZones
	
	zones detect: [:aZone | aZone class = Residential] ifNone: [^true].
	^false.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:16:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:16:23'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:16:23'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:16:23'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:17:53' prior: 50887288!
hasResidentialZones
	
	^zones select: [:aZone | aZone class = Residential] isEmpty.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:18:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:18:04'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:04'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:04'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:04'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:18:04'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:18:04'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:18:04'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:18:19' prior: 50887397!
hasResidentialZones
	
	^zones select: [:aZone | aZone class = Residential].! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:18:47' prior: 50887506!
hasResidentialZones
	|temp|
	
	temp _ zones select: [:aZone | aZone class = Residential].
	^ temp isEmpty.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:18:52'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:18:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:18:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:18:53'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:18:53'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:19:18' prior: 50887512!
hasResidentialZones
	|temp|
	
	temp _ zones select: [:aZone | aZone class = Residential].
	^ temp isEmpty not.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:19:25'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:19:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:19:26'!
PASSED!
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:20:39' prior: 50885907!
assertAComertialZoneCanBeAdded: aZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'nil' stamp: 'mf 9/23/2021 20:24:54'!
assertYYY: amountOfEnergy yyy: amountOfWater
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:25:47' prior: 50887743!
assertYYY: amountOfEnergy yyy: amountOfWater
	
	self energyAvailable < (amountOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (amountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:26:18' prior: 50885930!
assertAnIndustrialZoneCanBeAdded: aZone
	
	self assertYYY: 10 yyy: 10
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:27:45'!
assertHasEnoughEnergy: amountOfEnergy andEnoughWater: amountOfWater
	
	self energyAvailable < (amountOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (amountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:27:46' prior: 50887759!
assertAnIndustrialZoneCanBeAdded: aZone
	
	self assertHasEnoughEnergy: 10 andEnoughWater: 10
	! !

!methodRemoval: City #assertYYY:yyy: stamp: 'mf 9/23/2021 20:27:46'!
assertYYY: amountOfEnergy yyy: amountOfWater
	
	self energyAvailable < (amountOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (amountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].!
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:28:23' prior: 50885920!
assertAResidentialZoneCanBeAdded: aZone

	self assertHasEnoughEnergy: 5 andEnoughWater: 9
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:28:54' prior: 50887730!
assertAComertialZoneCanBeAdded: aZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	self assertHasEnoughEnergy: 2 andEnoughWater: 8.
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !
!City methodsFor: 'assertions' stamp: 'mf 9/23/2021 20:29:01' prior: 50887798!
assertAComertialZoneCanBeAdded: aZone

	self assertHasEnoughEnergy: 2 andEnoughWater: 8.
		
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:29:46'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:29:47'!
PASSED!

Service subclass: #SolarPlant
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 20:30:27'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 20:31:19'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:33:57'!
calculateConsumptionOf: aMeasureingSystem with: anAmountConsumedByCell
	
	^ (anAmountConsumedByCell * aMeasureingSystem ) * numberOfCells.! !

!methodRemoval: Zone #calculateEnergyConsumption: stamp: 'mf 9/23/2021 20:34:23'!
calculateEnergyConsumption: anEpAmmount
	
	^ (anEpAmmount * ep) * numberOfCells.!
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:34:47' prior: 50886194 overrides: 50886042!
getEnergyConsumption
	
	^ self calculateConsumptionOf: ep with: 8.
	! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:35:16' prior: 50886200 overrides: 50886042!
getEnergyConsumption
	
	^self calculateConsumptionOf: ep with: 10.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:35:31' prior: 50886206 overrides: 50886042!
getEnergyConsumption
	
	^self calculateConsumptionOf: ep with: 5.! !
!Zone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:36:02'!
getWaterConsumption

	self subclassResponsibility.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:37:02' overrides: 50887984!
getWaterConsumption
		
	^self calculateConsumptionOf: wp with: 9.! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:37:41' overrides: 50887984!
getWaterConsumption
		
	^self calculateConsumptionOf: wp with: 2.
	! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:38:31' overrides: 50887984!
getWaterConsumption
		
	^self calculateConsumptionOf: wp with: 10.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:38:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:38:46'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:39:51' prior: 50883399!
waterConsumption
	
	^zones sum: [:aZone | aZone getEnergyConsumption] ifEmpty: 0.

	 ! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:40:40'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:40:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:40:40'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:40:40'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:40:40'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:40:41'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:40:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:40:41'!
FAILURE!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:40:56' prior: 50888109!
waterConsumption
	
	^zones sum: [:aZone | aZone getWaterConsumption] ifEmpty: 0.

	 ! !

Object subclass: #Service
	instanceVariableNames: 'type unitOfMeasurement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 20:44:20'!
Object subclass: #Service
	instanceVariableNames: 'type unitOfMeasurement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 20:44:57'!
unitOfMeassurment
	self subclassResponsibility ! !
!SolarPlant methodsFor: 'no messages' stamp: 'mf 9/23/2021 20:45:20' overrides: 50888237!
unitOfMeassurment
	^ep.! !
!WaterTower methodsFor: 'no messages' stamp: 'mf 9/23/2021 20:45:31' overrides: 50888237!
unitOfMeassurment
	^wp.! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:46:42' overrides: 50882416!
type
	^#SolarPlant.! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:46:58' overrides: 50882416!
type
	^#WaterTower.! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 20:47:55'!
serviceProduced
	self subclassResponsibility! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:48:42' prior: 50887621!
hasResidentialZones
	|temp|
	
	"Recordar Intentar cambiar estoy por un detect"
	
	temp _ zones select: [:aZone | aZone class = Residential].
	^ temp isEmpty not.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:48:46' prior: 50888262!
hasResidentialZones
	|temp|
	
	"Recordar intentar cambiar estoy por un detect"
	
	temp _ zones select: [:aZone | aZone class = Residential].
	^ temp isEmpty not.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:49:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:49:16'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:49:37' prior: 50884127!
solarPlant

	^ SolarPlant new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:49:41'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:49:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:49:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:49:41'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:49:41'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:49:42'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:49:55' prior: 50882219!
waterTower

	^ WaterTower new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:50:02'!
PASSED!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:51:29' overrides: 50888257!
serviceProduced
	^ep.! !

!methodRemoval: SolarPlant #unitOfMeassurment stamp: 'mf 9/23/2021 20:51:29'!
unitOfMeassurment
	^ep.!

!methodRemoval: Service #unitOfMeassurment stamp: 'mf 9/23/2021 20:52:18'!
unitOfMeassurment
	self subclassResponsibility !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:52:35' overrides: 50888257!
serviceProduced
	^wp.! !

!methodRemoval: WaterTower #unitOfMeassurment stamp: 'mf 9/23/2021 20:52:35'!
unitOfMeassurment
	^wp.!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:52:51' prior: 50888607 overrides: 50888257!
serviceProduced
	^  2* wp.! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:53:08' prior: 50888615 overrides: 50888257!
serviceProduced
	^  200 * wp.! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:53:16' prior: 50888596 overrides: 50888257!
serviceProduced
	^500 * ep.! !

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:54:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:54:13'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 20:54:13'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 20:54:13'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 20:54:14'!
PASSED!

500 * ep type.!

(500 * ep) type.!

(500 * ep) .!

kk _ (500 * ep) .!

kk type!

kk class!

kk !

kk class!

kk _ 500 * ep!

kk unit!
!Zone methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 20:58:43' prior: 50887953!
calculateConsumptionOf: aUnit with: anAmountConsumedByCell
	
	^ (anAmountConsumedByCell * aUnit ) * numberOfCells.! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 21:00:27'!
unitOfServiceProduced
	self subclassResponsibility! !

!methodRemoval: Service #serviceProduced stamp: 'mf 9/23/2021 21:00:27'!
serviceProduced
	self subclassResponsibility!
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 21:01:01'!
amountOfServiceProduced
	self subclassResponsibility! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:02:13' overrides: 50888855!
amountOfServiceProduced
	^500 * ep.! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:02:13' overrides: 50888855!
amountOfServiceProduced
	^  200 * wp.! !

!methodRemoval: SolarPlant #serviceProduced stamp: 'mf 9/23/2021 21:02:13'!
serviceProduced
	^500 * ep.!

!methodRemoval: WaterTower #serviceProduced stamp: 'mf 9/23/2021 21:02:13'!
serviceProduced
	^  200 * wp.!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:02:59' prior: 50888860 overrides: 50888855!
amountOfServiceProduced
	^500 * self unitOfServiceProduced.! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:03:14' overrides: 50888847!
unitOfServiceProduced
	^ep! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 21:04:34' prior: 50888855!
amountOfServiceProduced
	^self cuantityOfSeriviceProduced * self unitOfServiceProduced.! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 21:04:50'!
cuantityOfSeriviceProduced
	self subclassResponsibility! !

!methodRemoval: SolarPlant #amountOfServiceProduced stamp: 'mf 9/23/2021 21:05:00'!
amountOfServiceProduced
	^500 * self unitOfServiceProduced.!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:05:11' overrides: 50888892!
cuantityOfSeriviceProduced
	^ 500! !

!methodRemoval: WaterTower #amountOfServiceProduced stamp: 'mf 9/23/2021 21:05:25'!
amountOfServiceProduced
	^  200 * wp.!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:05:39' overrides: 50888892!
cuantityOfSeriviceProduced
	^ 200! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:05:56' overrides: 50888847!
unitOfServiceProduced
	^ep! !

ep = ep!

ep = wp true !

(500 * ep) unit = (200*wp) unit !

(500 * ep) unit = (200*ep) unit   !

ep!

ep = ep!

ep unit!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:07:37' prior: 50888916 overrides: 50888847!
unitOfServiceProduced
	^(1 * ep) unit.! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:07:53' prior: 50888925 overrides: 50888847!
unitOfServiceProduced
	^(1 * wp) unit.! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:07:59' prior: 50888883 overrides: 50888847!
unitOfServiceProduced
	^(1 * wp) unit.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:08:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:08:18'!
PASSED!

(1 * ep) unit!

ep !

ep = (1 * ep) unit!

ep = (1 * wp) unit!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:09:48' prior: 50888930 overrides: 50888847!
unitOfServiceProduced
	^wp.! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:10:01' prior: 50888935 overrides: 50888847!
unitOfServiceProduced
	^ep.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:11:24'!
serviceConsumption: aUnitOfAService
	
	! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:13:40' prior: 50882505!
energyProduced
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:14:04'!
serviceProduced: aUnitOfAService
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:15:18' prior: 50889070!
serviceProduced: aUnitOfAService
	
	^zones sum: [:aService | aUnitOfAService = aService unitOfServiceProduced]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:19:54' prior: 50889082!
serviceProduced: aUnitOfAService
	
	^zones sum: [:aService | aUnitOfAService = aService unitOfServiceProduced] ! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:21:29' prior: 50889089!
serviceProduced: aUnitOfAService
	
	^zones collect: [:aService | aUnitOfAService = aService unitOfServiceProduced] 
	andFold: [:a :b | a amountOfServiceProduced + b amountOfServiceProduced]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:21:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:21:41'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:22:41' prior: 50889059!
energyProduced
	
	^ self serviceProduced: ep.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:22:47'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:22:58'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:23:49' prior: 50889096!
serviceProduced: aUnitOfAService

	zones ifEmpty:[^0].	
	^zones collect: [:aService | aUnitOfAService = aService unitOfServiceProduced] 
	andFold: [:a :b | a amountOfServiceProduced + b amountOfServiceProduced]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:23:58'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:23:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:23:58'!
FAILURE!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:23:58'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:23:58'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:23:58'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:23:58'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:23:59'!
FAILURE!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:23:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:23:59'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:23:59'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:24:15'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:25:32' prior: 50889220!
serviceProduced: aUnitOfAService

	services ifEmpty:[^0].	
	^services collect: [:aService | aUnitOfAService = aService unitOfServiceProduced] 
	andFold: [:a :b | a amountOfServiceProduced + b amountOfServiceProduced]! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:26:03' prior: 50889336!
serviceProduced: aUnitOfAService

	services ifEmpty:[^0].	
	^services collect: [:aService | aUnitOfAService = aService unitOfServiceProduced] 
	andFold: [:a :b | a amountOfServiceProduced + b amountOfServiceProduced]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:26:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:26:14'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:26:14'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:26:15'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:26:15'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:26:15'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:26:15'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:27:21' prior: 50889346!
serviceProduced: aUnitOfAService

	"services ifEmpty:[^0].	"
	^services collect: [:aService | aUnitOfAService = aService unitOfServiceProduced] 
	andFold: [:a :b | a amountOfServiceProduced + b amountOfServiceProduced]
	ifEmpty: 0! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:27:27'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:27:31'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:27:31'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:27:31'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:27:31'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:27:31'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:27:32'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:27:32'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:27:32'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:28:54' prior: 50889459!
serviceProduced: aUnitOfAService

	"services ifEmpty:[^0].	"
	^services sum: [:aService | aUnitOfAService = aService unitOfServiceProduced] ! !

ep = (SolarPlant  new) unitOfServiceProduced !
!Service methodsFor: 'nil' stamp: 'mf 9/23/2021 21:30:17'!
+ aService
	self amountOfServiceProduced + aService amountOfServiceProduced ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:30:27'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:30:32'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:31:02' prior: 50889576!
serviceProduced: aUnitOfAService

	"services ifEmpty:[^0].	"
	^services sum: [:aService | aUnitOfAService = aService unitOfServiceProduced] ifEmpty: [^0].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:31:10'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:31:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:31:11'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:31:11'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:33:07'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:33:21'!
ERROR!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 21:34:04' prior: 50889050 overrides: 50888847!
unitOfServiceProduced
	^(1 * ep) unit.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:34:08'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:34:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:34:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:34:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:34:08'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:34:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:34:09'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:34:09'!
ERROR!
!City methodsFor: 'servicies - info' stamp: 'FRT 9/22/2021 19:21:30' prior: 50889208!
energyProduced
	
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:37:36' prior: 50889823!
energyProduced
	
	services select: [:aService | aService unitOfServiceProduced = ep].! !

pepe _ OrderedCollection with: SolarPlant new with: WaterTower new.!

pepe select: [:aService | aService unitOfServiceProduced = ep].!
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:47:55' prior: 50889836!
energyProduced
	
	services select: [:aService | aService amountOfServiceProduced = ep].
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:49:28' prior: 50889846!
energyProduced
	
	|temp|
	
	temp _ services select: [:aService | aService amountOfServiceProduced = ep].
	
	temp map:[:aService | aService amountOfServiceProduced].
	^temp sum ifEmpty: 0
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:49:32'!
ERROR!
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:50:50' prior: 50889852!
energyProduced
	
	|temp|
	
	temp _ services select: [:aService | aService amountOfServiceProduced = ep].
	
	temp collect: [:aService | aService amountOfServiceProduced].
	^temp sum ifEmpty: 0
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:50:56'!
ERROR!
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 18:47:11' prior: 50889865!
energyProduced
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 18:47:11' prior: 50889878!
energyProduced
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:52:46' prior: 50889889!
energyProduced
	
	|temp|
	
	temp _ services select: [:aService | aService amountOfServiceProduced = ep].
	
	temp collect: [:aService | aService amountOfServiceProduced] 
	^temp sum ifEmpty: 0
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 18:47:11' prior: 50889900!
energyProduced
	
	| index total |
	

	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 21:52:59'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 21:53:00'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 21:53:00'!
PASSED!

----SNAPSHOT----(23 September 2021 21:53:41) CuisUniversity-4532.image priorSource: 17722409!

----STARTUP---- (23 September 2021 22:12:32) as D:\Cuis\CuisUniversity-4532.image!

!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:52:46' prior: 50889909!
energyProduced
	
	|temp|
	
	temp _ services select: [:aService | aService amountOfServiceProduced = ep].
	
	temp collect: [:aService | aService amountOfServiceProduced] 
	^temp sum ifEmpty: 0
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:15:05' prior: 50890029!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced]. 
	
	
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:15:44' prior: 50890038!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced].
	
	^temp sum: [:anAmount | anAmount unit = ep].
	
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:15:53'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 22:16:23'!
ERROR!
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:17:27' prior: 50890045!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced].
	
	^temp sum: [:anAmount | anAmount unit = ep] ifEmpty: [^0]
	
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:17:34'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:17:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 22:17:34'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 22:17:34'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 22:17:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 22:17:35'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 22:17:35'!
ERROR!

!classRemoval: #Residential stamp: 'mf 9/23/2021 22:44:31'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'mf 9/23/2021 22:44:32'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'mf 9/23/2021 22:44:32'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 9/23/2021 22:44:32'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'mf 9/23/2021 22:44:32'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'mf 9/23/2021 22:44:33'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 9/23/2021 22:44:33'!
Object subclass: #Service
	instanceVariableNames: 'type unitOfMeasurement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 9/23/2021 22:44:33'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 9/23/2021 22:44:34'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:46:09' overrides: 16896425!
initialize
	
	services _ OrderedCollection new.
	zones _ OrderedCollection new.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:49:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:49:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 22:49:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 22:49:43'!
PASSED!

Service subclass: #WaterPlant
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 22:51:05'!
Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRenamed: #WaterPlant as: #WaterTower stamp: 'mf 9/23/2021 22:51:20'!
Smalltalk renameClassNamed: #WaterPlant as: #WaterTower!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:51:20' prior: 50890694!
waterProduced
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:51:20' prior: 50890548!
waterTower

	^ Service withType: #WaterTower! !

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 22:51:52'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'no messages' stamp: 'mf 9/23/2021 22:53:16' overrides: 50890745!
type
	^ #SolarPlant! !
!WaterTower methodsFor: 'no messages' stamp: 'mf 9/23/2021 22:53:37' overrides: 50890745!
type
	^ #WaterTower! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:53:55' prior: 50890252!
solarPlant

	^ SolarPlant new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:53:58'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 22:53:59'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:54:08' prior: 50890948!
waterTower

	^ WaterTower new! !

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 22:54:12'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 22:54:18'!
PASSED!

!methodRemoval: Service #type stamp: 'mf 9/23/2021 22:54:33'!
type
	
	^type!

!methodRemoval: Service #initializeWithType: stamp: 'mf 9/23/2021 22:54:43'!
initializeWithType: aServiceType 

	type _ aServiceType.!
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 22:55:14'!
type
	self subclassResponsibility ! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 22:55:40'!
serviceProduced
	self subclassResponsibility! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:56:02' overrides: 50891202!
serviceProduced
	^ 500 * ep! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:56:19' overrides: 50891202!
serviceProduced
	^ 200 * wp! !

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 22:58:33'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Comertial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 22:58:38'!
Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 22:58:58'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

pepe _ OrderedCollection new!

pepe type!

pepe class!

# pepe class!

# (pepe class)!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:01:24' overrides: 16896425!
initialize
	
	numberOfCells _ 1.! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:02' prior: 50890777!
getNumberOfCells
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:11' prior: 50890787!
type
	
	self subclassResponsibility ! !
!Comertial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:52' overrides: 50891262!
type
	^ #Comertial! !
!Industrial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:03:03' overrides: 50891262!
type
	^ #Comertial! !
!Industrial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:03:22' prior: 50891270 overrides: 50891262!
type
	^ #Industrial! !

!classRenamed: #Comertial as: #Commertial stamp: 'mf 9/23/2021 23:03:36'!
Smalltalk renameClassNamed: #Comertial as: #Commertial!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50890626!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50890676!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50890591!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50891266 overrides: 50891262!
type
	^ #Commertial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50890240!
commertialZone

	^ Zone withType: #Commertial! !
!Residential methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:04:29' overrides: 50891262!
type
	^ #Residential! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:05:07' prior: 50891355!
commertialZone

	^ Commertial new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 23:05:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 23:05:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 23:05:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 23:05:11'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 23:05:12'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 23:05:12'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 23:05:32'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 23:05:32'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 23:05:56'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:06:48' prior: 50890244!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:06:55' prior: 50890248!
residentialZone

	^ Residential new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/23/2021 23:07:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/23/2021 23:07:01'!
PASSED!
!City methodsFor: 'adding' stamp: 'mf 9/23/2021 23:07:46' prior: 50890585!
addService: aService 

	services add: aService.! !
!City methodsFor: 'adding' stamp: 'mf 9/23/2021 23:07:53' prior: 50891320!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'servicies' stamp: 'mf 9/23/2021 23:08:10' prior: 50891282!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'accesing' stamp: 'mf 9/23/2021 23:08:22' prior: 50890706!
zones

	^ zones.
! !

Object subclass: #ServiceProducedCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:11:28'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #ServiceProducedCalculator
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:12:05'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ServiceProducedCalculator methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:13:09'!
initializeWith: aSetOfServicies
	services _ aSetOfServicies.! !
!ServiceProducedCalculator methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:14:17'!
with: aSetOfServicies
	^ServiceProducedCalculator initializeWith: aSetOfServicies.! !

!classRenamed: #ServiceProducedCalculator as: #ServiceManager stamp: 'mf 9/23/2021 23:17:06'!
Smalltalk renameClassNamed: #ServiceProducedCalculator as: #ServiceManager!
!ServiceManager methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:17:06' prior: 50891681!
with: aSetOfServicies
	^ServiceManager initializeWith: aSetOfServicies.! !

!classRenamed: #ServiceManager as: #YYY stamp: 'mf 9/23/2021 23:19:44'!
Smalltalk renameClassNamed: #ServiceManager as: #YYY!
!YYY methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:19:44' prior: 50891693!
with: aSetOfServicies
	^YYY initializeWith: aSetOfServicies.! !

Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #YYY category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:19:53'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:22:02'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ServiceCalculator stamp: 'mf 9/23/2021 23:22:47'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRenamed: #YYY as: #ServiceCalculator stamp: 'mf 9/23/2021 23:22:56'!
Smalltalk renameClassNamed: #YYY as: #ServiceCalculator!
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:22:56' prior: 50891703!
with: aSetOfServicies
	^ServiceCalculator initializeWith: aSetOfServicies.! !

ServiceCalculator subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #EnergyServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:23:17'!
ServiceCalculator subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

ServiceCalculator subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/23/2021 23:23:45'!
ServiceCalculator subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!methodRemoval: ServiceCalculator #with: stamp: 'mf 9/23/2021 23:24:14'!
with: aSetOfServicies
	^ServiceCalculator initializeWith: aSetOfServicies.!

!methodRemoval: ServiceCalculator #initializeWith: stamp: 'mf 9/23/2021 23:24:23'!
initializeWith: aSetOfServicies
	services _ aSetOfServicies.!
!ServiceCalculator methodsFor: 'nil' stamp: 'mf 9/23/2021 23:27:16'!
amountOf: aUnit producedBy: aListOfServicies
	
	! !
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:28:39' prior: 50891785!
amountOf: aUnit producedBy: aListOfServicies
	
	| temp | 
	
	temp _ aListOfServicies collect: [:aService | aService serviceProduced].! !
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:29:56' prior: 50891790!
amountOf: aUnit producedBy: aListOfServicies
	
	| temp | 
	
	temp _ aListOfServicies collect: [:aService | aService serviceProduced].
	^ temp sum: [:aServiceProduced | aServiceProduced unit = aUnit] ifEmpty: [^0]! !

riqui _ OrderedCollection with: SolarPlant new with: WaterTower new.!

pipe _ ServiceCalculator new.!

pipe amountOf: ep  producedBy:  riqui.!

pipe amountOf: ep  producedBy:  riqui.!

coqui _ (15 * ep)!

pipo _ (12 * ep)!

coqui + pipo!

coqui unit = ep!

coqui unit = wp!

coqui unit = pipo unit!

quique _ OrderedCollection new.!

quique _ OrderedCollection with: coqui with: pipe.!

quique _ OrderedCollection with: coqui with: pipo!

quique sum!

quique sum: [:anAmount | anAmount unit = ep]!

riqui sum!

riqui sum: [:aService | aService serviceProduced]!
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:40:36' prior: 50891798!
amountOf: aUnit producedBy: aListOfServicies
	
	 
	
	^ (aListOfServicies collect: [:aService | aService serviceProduced unit = aUnit]) sum ifEmpty:[^0]
! !
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:40:48' prior: 50891826!
amountOf: aUnit producedBy: aListOfServicies
	
	^ (aListOfServicies collect: [:aService | aService serviceProduced unit = aUnit]) sum ifEmpty:[^0]! !

pipe amountOf: ep  producedBy:  riqui.!

pipe _ ServiceCalculator new.!

pipe2 _ ServiceCalculator new.!

pipe2 amountOf: ep producedBy: riqui!

pipe2 amountOf: ep producedBy: riqui!

pipe2 amountOf: ep producedBy: riqui!

pipe2 amountOf: ep producedBy: riqui!

 (aListOfServicies collect: [:aService | aService serviceProduced unit = aUnit])!

aListOfServicies collect: [:aService | aService serviceProduced unit = aUnit]!

pipe!

popi _ OrderedCollection with: SolarPlant new with: WaterTower new!

popi collect: [:a | a serviceProduced unit = ep]!

popi select: [:a | a serviceProduced unit = ep]!
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:46:57' prior: 50891835!
amountOf: aUnit producedBy: aListOfServicies
	
	^ (aListOfServicies select: [:aService | aService serviceProduced unit = aUnit]) sum ifEmpty:[^0]! !
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:47:21' prior: 50891862!
amountOf: aUnit producedBy: aListOfServicies
	
	^ (aListOfServicies select: [:aService | aService serviceProduced unit = aUnit]) sum ifEmpty:[^0]! !

pipi _ OrderedCollection with: SolarPlant new with: WaterTower new.!

popi _ ServiceCalculator new.!

popi amountOf: ep producedBy: pipi!

popi amountOf: ep producedBy: pipi!
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:49:44' prior: 50891870!
amountOf: aUnit producedBy: aListOfServicies
	
	^ (aListOfServicies select: [:aService | aService serviceProduced unit = aUnit]) 
	sum: [:aService | aService serviceProduced ] 
	ifEmpty:[^0]! !

popi amountOf: ep producedBy: pipi!

pipi _ OrderedCollection with: WaterTower new.!

pipi _ OrderedCollection with: WaterTower new.!

popi _ ServiceCalculator new.!

popi amountOf: ep producedBy: pipi!
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:50:39' prior: 50891884!
amountOf: aUnit producedBy: aListOfServicies
	
	^ (aListOfServicies select: [:aService | aService serviceProduced unit = aUnit]) 
	sum: [:aService | aService serviceProduced ] 
	ifEmpty:[^0 * aUnit]! !
!EnergyServiceCalculator methodsFor: 'no messages' stamp: 'mf 9/23/2021 23:51:43'!
amountOfEnergyProducedBy: aListOfServicies
	self amountOf: ep producedBy: aListOfServicies ! !
!EnergyServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:51:52' prior: 50891909!
amountOfEnergyProducedBy: aListOfServicies
	^self amountOf: ep producedBy: aListOfServicies ! !
!WaterServiceCalculator methodsFor: 'no messages' stamp: 'mf 9/23/2021 23:52:20'!
amountOfEnergyProducedBy: aListOfServicies
	^self amountOf: wp producedBy: aListOfServicies! !
!ServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:53:55'!
amountOfEnergyProducedBy: aListOfServicies
	^self amountOf: ep producedBy: aListOfServicies! !

!classRemoval: #EnergyServiceCalculator stamp: 'mf 9/23/2021 23:54:08'!
ServiceCalculator subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterServiceCalculator stamp: 'mf 9/23/2021 23:54:14'!
ServiceCalculator subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ServiceCalculator methodsFor: 'calculators' stamp: 'mf 9/23/2021 23:55:01' prior: 50891928!
amountOfEnergyProducedBy: aListOfServicies
	
	^self amountOf: ep producedBy: aListOfServicies! !
!ServiceCalculator methodsFor: 'calculators' stamp: 'mf 9/23/2021 23:55:14'!
amountOfWaterProducedBy: aListOfServicies
	
	^self amountOf: wp producedBy: aListOfServicies! !
!ServiceCalculator methodsFor: 'private' stamp: 'mf 9/24/2021 00:02:28'!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForBlock: anAmount! !
!ServiceCalculator methodsFor: 'private' stamp: 'mf 9/24/2021 00:05:35'!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForCell: anAmount! !

!methodRemoval: ServiceCalculator #amountOf:consumedBy:byConsumingForBlock: stamp: 'mf 9/24/2021 00:05:35'!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForBlock: anAmount!
!ServiceCalculator methodsFor: 'private' stamp: 'mf 9/24/2021 00:06:49' prior: 50891966!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForCell: anAmount
	^(anAmount * aUnit ) * aNumberOfCells! !
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:47'!
waterConsumption
	self subclassResponsibility.! !
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:52' prior: 50891983!
waterConsumption
	
	self subclassResponsibility.! !
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:58'!
energyConsumption
	
	self subclassResponsibility.! !

!methodRemoval: Zone #energyConsumption stamp: 'mf 9/24/2021 00:09:19'!
energyConsumption
	
	self subclassResponsibility.!

!methodRemoval: Zone #waterConsumption stamp: 'mf 9/24/2021 00:09:19'!
waterConsumption
	
	self subclassResponsibility.!

Object subclass: #ZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 00:10:21'!
Object subclass: #ZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:11:25'!
energyConsumedIn: aZone
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:11:45'!
waterConsumedIn: aZone
	
	self subclassResponsibility ! !

ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CommertialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 00:12:12'!
ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 00:12:21'!
ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 00:12:25'!
ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CommertialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:13:18' overrides: 50892016!
energyConsumedIn: aZone
	
	! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:14:18' prior: 50892066 overrides: 50892016!
energyConsumedIn: aZone
	! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:17:13' prior: 50892071 overrides: 50892016!
energyConsumedIn: aZone
	! !

Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 00:17:30'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:18:17' overrides: 16896425!
initialize
	serviceCalculator _ ServiceCalculator new.! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:19:40' prior: 50892076 overrides: 50892016!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:20:05' prior: 50892099 overrides: 50892016!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 8! !

!methodRemoval: CommertialZoneManager #energyConsumedIn: stamp: 'mf 9/24/2021 00:21:02'!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 8!
!ServiceCalculator methodsFor: 'private' stamp: 'mf 9/24/2021 00:23:54' prior: 50891977!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForCell: anAmount
	^(anAmount * aUnit ) * aNumberOfCells! !

!methodRemoval: ServiceCalculator #amountOf:consumedBy:byConsumingForCell: stamp: 'mf 9/24/2021 00:24:27'!
amountOf: aUnit consumedBy: aNumberOfCells byConsumingForCell: anAmount
	^(anAmount * aUnit ) * aNumberOfCells!
!ServiceCalculator methodsFor: 'private' stamp: 'mf 9/24/2021 00:30:47'!
amountOf: aUnit consumedIn: aZone byConsumingForCell: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells.! !

carlos _ ServiceCalculator new.!

carlos amountOf: ep  consumedIn: Commertial new byConsumingForCell: 2 !
!ServiceCalculator methodsFor: 'calculators' stamp: 'mf 9/24/2021 00:33:41' prior: 50891955!
amountOfWaterProducedBy: aListOfServicies
	
	^self amountOf: wp producedBy: aListOfServicies! !
!ServiceCalculator methodsFor: 'calculators' stamp: 'mf 9/24/2021 00:35:53'!
amountOfEnergyConsumedBy: aZone byConsumingForCell: anAmount
	
	^self amountOf: ep consumedIn: aZone byConsumingForCell: anAmount! !
!ServiceCalculator methodsFor: 'calculators' stamp: 'mf 9/24/2021 00:36:10'!
amountOfWaterConsumedBy: aZone byConsumingForCell: anAmount
	
	^self amountOf: wp consumedIn: aZone byConsumingForCell: anAmount! !
!CommertialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:39:04' overrides: 50892016!
energyConsumedIn: aZone

	serviceCalculator amountOfEnergyConsumedBy: aZone byConsumingForCell: 2! !

!methodRemoval: ServiceCalculator #amountOfWaterConsumedBy:byConsumingForCell: stamp: 'mf 9/24/2021 00:44:15'!
amountOfWaterConsumedBy: aZone byConsumingForCell: anAmount
	
	^self amountOf: wp consumedIn: aZone byConsumingForCell: anAmount!

!methodRemoval: ServiceCalculator #amountOfEnergyConsumedBy:byConsumingForCell: stamp: 'mf 9/24/2021 00:44:22'!
amountOfEnergyConsumedBy: aZone byConsumingForCell: anAmount
	
	^self amountOf: ep consumedIn: aZone byConsumingForCell: anAmount!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:46:08'!
canHandle: aZone
	^aZone type = #Commertial ! !
!IndustrialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:46:30'!
canHandle: aZone
	^aZone type = #Industrial! !
!ResidentialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:46:44'!
canHandle: aZone
	^aZone type = #Residential! !

!methodRemoval: ZoneManager #initialize stamp: 'mf 9/24/2021 00:47:00'!
initialize
	serviceCalculator _ ServiceCalculator new.!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:48:45'!
for: aZone
	
	! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:50:00' prior: 50892205!
for: aZone

	! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:51:50' prior: 50892209!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ).! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:52:13' prior: 50892213!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.! !

ZoneManager for: Residential new.!

!methodRemoval: ZoneManager #for: stamp: 'mf 9/24/2021 00:54:21'!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.!
!ZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:54:31'!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.! !

ZoneManager for: Residential new.!

!methodRemoval: CommertialZoneManager #canHandle: stamp: 'mf 9/24/2021 00:55:44'!
canHandle: aZone
	^aZone type = #Commertial !

!methodRemoval: IndustrialZoneManager #canHandle: stamp: 'mf 9/24/2021 00:55:50'!
canHandle: aZone
	^aZone type = #Industrial!

!methodRemoval: ResidentialZoneManager #canHandle: stamp: 'mf 9/24/2021 00:55:55'!
canHandle: aZone
	^aZone type = #Residential!
!CommertialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:08'!
canHandle: aZone
	^aZone type = #Commertial ! !
!IndustrialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:20'!
canHandle: aZone
	^aZone type = #Industrial! !
!ResidentialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:39'!
canHandle: aZone
	^aZone type = #Residential! !

ZoneManager for: Residential new.!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:57:58' prior: 50892165 overrides: 50892016!
energyConsumedIn: aZone! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:07:33'!
amountOf: aUnit consumedIn: aZone byConsumingFor: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:08:03' prior: 50892267 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn:  aZone byConsumingFor: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:08:36' prior: 50892278 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn:  aZone byConsumingFor: 8! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:09:04' prior: 50892285 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 8! !
!IndustrialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 01:09:21' overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 01:09:35' overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:31' overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 9! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:45' overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:57' overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 10! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:13:03'!
assertCan: aZone beAddedTo: aCity
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:14:38'!
assertCan: aCity
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:15:05'!
assertCanAZonebeAddedTo: aCity
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #assertCan: stamp: 'mf 9/24/2021 01:15:11'!
assertCan: aCity
	
	self subclassResponsibility !

!methodRemoval: ZoneManager #assertCan:beAddedTo: stamp: 'mf 9/24/2021 01:15:26'!
assertCan: aZone beAddedTo: aCity
	
	self subclassResponsibility !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:17:17' prior: 50892339!
assertCanAZonebeAddedTo: aCity
	
	self YYY: aCity.! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:18:56' prior: 50892353!
assertCanAZonebeAddedTo: aCity
	
	^(self assertCanBeAddedToSubclass: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:19:17'!
assertCanBeAddedToSubclass: aCity
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #assertCanBeAddedToSubclass: stamp: 'mf 9/24/2021 01:20:17'!
assertCanBeAddedToSubclass: aCity
	
	self subclassResponsibility !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:20:44' prior: 50892358!
assertCanAZonebeAddedTo: aCity
	
	^(self assertTheresEnouhgWaterAndEnergyIn: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:22:17' prior: 50892375!
assertCanAZonebeAddedTo: aCity
	
	^(self assertTheresEnougWaterAndEnergyIn: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:22:52'!
assertTheresEnougWaterAndEnergyIn: aCity

	self subclassResponsibility ! !
!ZoneManager methodsFor: 'nil' stamp: 'mf 9/24/2021 01:24:07'!
isThereEnoghWater: anAmountOfWater andEnergy: anAmounyOfEnergy In: aCity
	! !
!ZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:25:45' prior: 50892395!
isThereEnoghWater: anAmountOfWater andEnergy: anAmounyOfEnergy In: aCity

	aCity energyAvailable < (anAmounyOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	aCity waterAvailable < (anAmountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:26:12' prior: 50892383!
assertCanAZonebeAddedTo: aCity
	
	^self assertTheresEnougWaterAndEnergyIn: aCity.! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:27:17' overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	self isThereEnoghWater: 5 andEnergy: 4 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:27:20' prior: 50892420 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 5 andEnergy: 4 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:28:14' prior: 50892427 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:29:36' overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 9 andEnergy: 5 In: aCity! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:30:16' overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 10 andEnergy: 10 In: aCity! !

!methodRemoval: ServiceCalculator #amountOf:consumedIn:byConsumingForCell: stamp: 'mf 9/24/2021 01:30:46'!
amountOf: aUnit consumedIn: aZone byConsumingForCell: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells.!
!City methodsFor: 'initialization' stamp: 'mf 9/24/2021 01:31:25' prior: 50890806 overrides: 16896425!
initialize
	
	services _ OrderedCollection new.
	zones _ OrderedCollection new.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:32:07'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:32:08'!
PASSED!
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:33:58' prior: 50891599!
addZone: aZone

	"aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]."
	ZoneManager for: aZone .

	zones add: aZone.
! !
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:34:48' prior: 50892570!
addZone: aZone

	"aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]."
	(ZoneManager for: aZone) assertCanAZonebeAddedTo: self.

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:34:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:34:57'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:34:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:34:57'!
FAILURE!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:35:09'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:35:14'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:35:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:35:14'!
FAILURE!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:35:31'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:35:33'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:35:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:35:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:35:39'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:35:41'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:35:47'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:35:48'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:35:48'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:35:48'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:36:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:36:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:36:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:36:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:36:48'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:36:48'!
FAILURE!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:38:32' prior: 50892434 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:38:53' prior: 50893002 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [City cannotAddZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:39:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:39:01'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:39:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:39:01'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:39:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:39:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:39:30'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:39:30'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:40:00'!
FAILURE!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:40:56' prior: 50893011 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [City cannotAddCommertialZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:41:02'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:41:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:41:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:41:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:41:03'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:12'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:41:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:41:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:41:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:41:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:41:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:41:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:41:26'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:41:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:41:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:41:32'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:41:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:41:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:41:38'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:41:39'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:41:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:41:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:41:47'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:41:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:53'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:41:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:41:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:42:00'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:42:00'!
FAILURE!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:42:43' prior: 50893154 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [self error: City cannotAddCommertialZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:42:52'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:42:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:42:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:42:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:42:52'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:42:53'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:43:27'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:43:27'!
FAILURE!
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:43:57' prior: 50893374 overrides: 50892390!
assertTheresEnougWaterAndEnergyIn: aCity

	self isThereEnoghWater: 8 andEnergy: 2 In: aCity.
	^(aCity hasResidentialZones not) ifTrue: [self error: City cannotAddCommertialZoneErrorDescription].
	 ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:44:03'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:44:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:44:04'!
PASSED!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 01:46:16' prior: 50891628!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumption].
	
	 ! !
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:46:51' prior: 50892600!
addZone: aZone

	(ZoneManager for: aZone) assertCanAZonebeAddedTo: self.

	zones add: aZone.
! !
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:48:41' prior: 50892231!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.! !

!classDefinition: 'ZoneManager class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 01:49:25'!
ZoneManager class
	instanceVariableNames: 'zone'!
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:49:23'!
initializeWith: aZone

	zone _ aZone.! !

!methodRemoval: ZoneManager class #initializeWith: stamp: 'mf 9/24/2021 01:49:47'!
initializeWith: aZone

	zone _ aZone.!
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:50:34'!
initializeWith: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.! !

!methodRemoval: ZoneManager class #initializeWith: stamp: 'mf 9/24/2021 01:51:06'!
initializeWith: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 9/24/2021 01:51:39'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator zone'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 01:51:37'!
initializeWith: aZone
	zone _ aZone.! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:52:13'!
amountOf: aUnit byConsumingFor: anAmount
	
	^(anAmount * aUnit) * zone getNumberOfCells ! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:52:28' prior: 50893669!
amountOf: aUnit byConsumingFor: anAmount
	
	^(anAmount * aUnit) * zone getNumberOfCells ! !

!methodRemoval: ZoneManager #amountOf:consumedIn:byConsumingFor: stamp: 'mf 9/24/2021 01:52:51'!
amountOf: aUnit consumedIn: aZone byConsumingFor: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:00' prior: 50892292 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 8! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:05' prior: 50892318 overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:10' prior: 50892298 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:16' prior: 50892325 overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:22' prior: 50892304 overrides: 50892016!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:30' prior: 50892311 overrides: 50892021!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 9! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:53:45'!
energyConsumedIn
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #energyConsumedIn: stamp: 'mf 9/24/2021 01:53:51'!
energyConsumedIn: aZone
	
	self subclassResponsibility !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:09' overrides: 50893728!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 8! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:26' overrides: 50893728!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:33' overrides: 50893728!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:38'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 9! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:07'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:22' prior: 50893760!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:30'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 10! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:35' prior: 50893771!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:48' prior: 50893755!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 9! !

!methodRemoval: ResidentialZoneManager #waterConsumedIn: stamp: 'mf 9/24/2021 01:56:13'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 9!

!methodRemoval: ResidentialZoneManager #energyConsumedIn: stamp: 'mf 9/24/2021 01:56:19'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 5!

!methodRemoval: IndustrialZoneManager #waterConsumedIn: stamp: 'mf 9/24/2021 01:56:27'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10!

!methodRemoval: IndustrialZoneManager #energyConsumedIn: stamp: 'mf 9/24/2021 01:56:30'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10!

!methodRemoval: CommertialZoneManager #energyConsumedIn: stamp: 'mf 9/24/2021 01:56:36'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 8!

!methodRemoval: CommertialZoneManager #waterConsumedIn: stamp: 'mf 9/24/2021 01:56:40'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 2!

!methodRemoval: ZoneManager #waterConsumedIn: stamp: 'mf 9/24/2021 01:57:06'!
waterConsumedIn: aZone
	
	self subclassResponsibility !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 01:58:48' prior: 50890657!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:59:12'!
waterConsumedIn
	
	self subclassResponsibility ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:59:45'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 01:59:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 01:59:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 01:59:45'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 01:59:45'!
ERROR!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:00:19' prior: 50893612!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumedIn].
	
	 ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:00:23'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:00:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:00:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:00:23'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:00:23'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:00:23'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:00:24'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:00:24'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:00:24'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:00:34'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:01:01'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:01:17'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:01:41'!
ERROR!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:02:39' prior: 50893938!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumedIn] ifEmpty: [^0].
	
	 ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:02:55'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:02:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:02:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:02:55'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:02:55'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:02:55'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:02:55'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:02:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:02:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:02:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:02:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:02:56'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:02:56'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:03:02'!
ERROR!
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 02:05:01' prior: 50893625!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new initializeWith: aZone.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:05:14'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:05:15'!
PASSED!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:07:00' prior: 50890644!
energyProduced
	
	^(ServiceCalculator new) ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:07:55' prior: 50894285!
energyProduced
	
	^(ServiceCalculator new) amountOfEnergyProducedBy: services.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:07:59'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:08:00'!
PASSED!
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:08:49' prior: 50893821!
hasResidentialZones

	^zones detect: [:aZone | aZone type = #Residential].
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:08:57'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:08:57'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:08:57'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:08:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:08:57'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:08:58'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:58'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:08:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:09:22'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:09:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:09:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:09:29'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:29'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:09:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:09:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:09:33'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:09:33'!
ERROR!
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:12:50' prior: 50894397!
hasResidentialZones

	zones detect: [:aZone | aZone type = #Residential] ifNone:[^false].
! !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:12:55' prior: 50894724!
hasResidentialZones

	zones detect: [:aZone | aZone type = #Residential] ifNone:[^false].
	^true
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:13:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:13:01'!
PASSED!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:14:40' prior: 50891301!
waterConsumption
	
	! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:15:55' prior: 50894839!
waterConsumption
	
	^zones sum: [:aZone | ] ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:16:19' prior: 50894843!
waterConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) waterConsumedIn] ifEmpty: [^0]. ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:16:25'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:16:25'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:16:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:16:25'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:16:26'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:16:36'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:16:53'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:17:18'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:17:23'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:18:49'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:20:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:20:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:20:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:20:21'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:20:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:21:41'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:21:41'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:22:01'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:23:25'!
ERROR!
!City methodsFor: 'servicies' stamp: 'mf 9/23/2021 23:03:36' prior: 50894847!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:25:07'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:25:07'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:25:07'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:25:08'!
PASSED!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:16:19' prior: 50895094!
waterConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) waterConsumedIn] ifEmpty: [^0]. ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 02:25:55' prior: 50893766 overrides: 50893831!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 2! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:26:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:26:20'!
PASSED!
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:27:22' prior: 50890935!
waterProduced
	^(ServiceCalculator new) amountOfWaterProducedBy: services.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:27:27'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'mf 9/24/2021 02:27:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'mf 9/24/2021 02:27:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'mf 9/24/2021 02:27:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'mf 9/24/2021 02:27:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'mf 9/24/2021 02:27:28'!
PASSED!

!classRemoval: #ResidentialZoneManager stamp: 'mf 9/24/2021 02:27:49'!
ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZoneManager stamp: 'mf 9/24/2021 02:27:50'!
ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZoneManager stamp: 'mf 9/24/2021 02:27:50'!
ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ZoneManager stamp: 'mf 9/24/2021 02:27:50'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator zone'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Residential stamp: 'mf 9/24/2021 02:27:51'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'mf 9/24/2021 02:27:51'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'mf 9/24/2021 02:27:51'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 9/24/2021 02:27:52'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ServiceCalculator stamp: 'mf 9/24/2021 02:27:52'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'mf 9/24/2021 02:27:52'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'mf 9/24/2021 02:27:52'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 9/24/2021 02:27:53'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 9/24/2021 02:27:53'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 9/24/2021 02:27:53'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\ISW1-2021-2C-1erParcial.st----!

----STARTUP---- (27 September 2021 20:55:46) as D:\Cuis\CuisUniversity-4532.image!

!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/27/2021 20:56:13' prior: 50885484 overrides: 50885479!
type
	^ #SanchezSeLaXCome! !

ricardo _ Commertial new.!

ricardo type!
!Commertial methodsFor: 'as yet unclassified' stamp: 'mf 9/27/2021 20:56:52' prior: 50896113 overrides: 50885479!
type
	^ #SanchezSeLaCome! !

----STARTUP---- (31 March 2022 22:13:15) as D:\Cuis\CuisUniversity-4532.image!


ObjectBuilder create: #NumerosNaturales
	collaboratorNames: ''
	in: 'EjNaturales'
	!

!classDefinition: #NumerosNaturales category: 'EjNaturales' stamp: 'mf 3/31/2022 22:14:20'!
DenotativeObject subclass: #NumerosNaturales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjNaturales'!

!classDefinition: 'NumerosNaturales class' category: 'EjNaturales' stamp: 'mf 3/31/2022 22:14:21'!
NumerosNaturales class
	instanceVariableNames: ''!

!classRemoval: #NumerosNaturales stamp: 'mf 3/31/2022 22:15:01'!
DenotativeObject subclass: #NumerosNaturales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjNaturales'!

----End fileIn of D:\Cuis\Numeros-Naturales.st----!

II - I.!

I - I.!

II - III.!

II + III.!

----STARTUP---- (1 April 2022 01:14:36) as D:\Cuis\CuisUniversity-4532.image!

!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 21:52:46' prior: 50889909!
energyProduced
	
	|temp|
	
	temp _ services select: [:aService | aService amountOfServiceProduced = ep].
	
	temp collect: [:aService | aService amountOfServiceProduced] 
	^temp sum ifEmpty: 0
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:15:05' prior: 50896334!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced]. 
	
	
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:15:44' prior: 50896343!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced].
	
	^temp sum: [:anAmount | anAmount unit = ep].
	
	
	! !
!City methodsFor: 'servicies - info' stamp: 'mf 9/23/2021 22:17:27' prior: 50896350!
energyProduced
	
	|temp|
	
	temp _ services collect: [:aService | aService amountOfServiceProduced].
	
	^temp sum: [:anAmount | anAmount unit = ep] ifEmpty: [^0]
	
	
	! !

!classRemoval: #Residential stamp: 'mf 4/1/2022 01:14:44'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'mf 4/1/2022 01:14:45'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commertial stamp: 'mf 4/1/2022 01:14:45'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 4/1/2022 01:14:45'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'mf 4/1/2022 01:14:45'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'mf 4/1/2022 01:14:46'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 4/1/2022 01:14:46'!
Object subclass: #Service
	instanceVariableNames: 'type unitOfMeasurement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 4/1/2022 01:14:46'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 4/1/2022 01:14:47'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:47'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:47'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:04'!
commertialZone

	^ Zone withType: #Commertial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:14'!
industrialZone

	^ Zone withType: #Industrial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:55'!
residentialZone

	^ Zone withType: #Residential! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:33'!
solarPlant

	^ Service withType: #SolarPlant! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:15:27'!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:24'!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:36'!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:47'!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:58'!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:16'!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:18:47'!
test07CityWithoutWaterServicesHaveZeroWaterProduced

	| city |

	city _ City new.
	self assert: 0 * wp equals: city waterProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:26'!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city _ City new.
	city addService: self waterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:39'!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:52'!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:03'!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:21'!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:29'!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self solarPlant.
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:38'!
test14CityWith2WaterTowerHaveTwiceWaterAvailable

	| city |

	city _ City new.
	city addService: self waterTower.
	city addService: self waterTower.
	
	self assert: (200 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:07'!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self residentialZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:28'!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:48'!
test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self industrialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:19:49'!
test18CityWithoutZonesHaveZeroEnergyConsumption

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyConsumption.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:13'!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city _ City new.
	
	city addService: self solarPlant.
	city addService: self waterTower.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:27'!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:41'!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:50'!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:59'!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:14:10'!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:14:20'!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:45'!
waterTower

	^ Service withType: #WaterTower! !

!classDefinition: 'CityTest class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:48'!
CityTest class
	instanceVariableNames: ''!

!classDefinition: 'CityTest class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:48'!
CityTest class
	instanceVariableNames: ''!
!CityTest class methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:22:41' overrides: 16883149!
initialize

	"Este método está para crear unidades"
	"No lo deben tocar ni darle importancia durante el parcial"
	
	| ep wp |
	ep := BaseUnit named: 'energypoint' sign: 'ep'.
	wp := BaseUnit named: 'waterpoint' sign: 'wp'.
	
	Smalltalk at: #ep put: ep.
	Smalltalk at: #wp put: wp.! !

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:48'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:48'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 20:57:01'!
addService: aService 

	services ifNil: [ services _ OrderedCollection new].
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:17:50'!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:06:00'!
energyAvailable
	
	^ self energyProduced - self energyConsumption

! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:14:23'!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:21:30'!
energyProduced
	
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 22:14:26'!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 11:04:39'!
setName: aName

	name _ aName.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:23:24'!
waterAvailable
	
	^ self waterProduced - self waterConsumption.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:15:10'!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:22:04'!
waterProduced
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:43:27'!
zones

	zones ifNil: [ zones _ OrderedCollection new].

	^ zones.
! !

!classDefinition: 'City class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
City class
	instanceVariableNames: ''!

!classDefinition: 'City class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
City class
	instanceVariableNames: ''!
!City class methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 22:10:50'!
cannotAddCommertialZoneErrorDescription

	^ 'Cannot add commertial zone without Residential zones'.! !
!City class methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:41:32'!
cannotAddZoneErrorDescription

	^ 'Cannot add zone'.! !

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service methodsFor: 'initialization' stamp: 'HAW 9/23/2021 11:04:53'!
initializeWithType: aServiceType 

	type _ aServiceType.! !
!Service methodsFor: 'accessing' stamp: 'FRT 9/16/2021 20:59:49'!
type
	
	^type! !

!classDefinition: 'Service class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Service class
	instanceVariableNames: ''!

!classDefinition: 'Service class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Service class
	instanceVariableNames: ''!
!Service class methodsFor: 'instance creation' stamp: 'FRT 9/16/2021 20:55:41'!
withType: aServiceType

	^self new initializeWithType: aServiceType ! !

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'FRT 9/16/2021 20:27:04'!
initializeWithType: aZoneType 

	type := aZoneType.! !
!Zone methodsFor: 'accessing' stamp: 'FRT 9/20/2021 17:00:06'!
getNumberOfCells

	numberOfCells ifNil: [ ^ 1].	
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'HAW 9/23/2021 11:05:04'!
setNumberOfCells: aNumberOfCells
	
	numberOfCells _ aNumberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'FRT 9/16/2021 20:27:43'!
type
	
	^ type! !

!classDefinition: 'Zone class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Zone class
	instanceVariableNames: ''!

!classDefinition: 'Zone class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:49'!
Zone class
	instanceVariableNames: ''!
!Zone class methodsFor: 'instance creation' stamp: 'FRT 9/16/2021 20:26:23'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. ! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:46:09' overrides: 16896425!
initialize
	
	services _ OrderedCollection new.
	zones _ OrderedCollection new.
	! !

!classDefinition: #WaterPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Service subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:51:20' prior: 50896896!
waterProduced
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:51:20' prior: 50896746!
waterTower

	^ Service withType: #WaterTower! !

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'no messages' stamp: 'mf 9/23/2021 22:53:16' overrides: 50896951!
type
	^ #SolarPlant! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:53:55' prior: 50896450!
solarPlant

	^ SolarPlant new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:54:08' prior: 50897050!
waterTower

	^ WaterTower new! !

!methodRemoval: Service #type stamp: 'mf 4/1/2022 01:14:50'!
type
	
	^type!

!methodRemoval: Service #initializeWithType: stamp: 'mf 4/1/2022 01:14:50'!
initializeWithType: aServiceType 

	type _ aServiceType.!
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 22:55:14'!
type
	self subclassResponsibility ! !
!Service methodsFor: 'accessing' stamp: 'mf 9/23/2021 22:55:40'!
serviceProduced
	self subclassResponsibility! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 22:56:02' overrides: 50897092!
serviceProduced
	^ 500 * ep! !

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Comertial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Comertial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:50'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:01:24' overrides: 16896425!
initialize
	
	numberOfCells _ 1.! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:02' prior: 50896988!
getNumberOfCells
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:11' prior: 50896998!
type
	
	self subclassResponsibility ! !
!Comertial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:02:52' overrides: 50897153!
type
	^ #Comertial! !
!Industrial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:03:03' overrides: 50897153!
type
	^ #Comertial! !
!Industrial methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:03:22' prior: 50897161 overrides: 50897153!
type
	^ #Industrial! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50896828!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50896878!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50896793!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:03:36' prior: 50896438!
commertialZone

	^ Zone withType: #Commertial! !
!Residential methodsFor: 'accessing' stamp: 'mf 9/23/2021 23:04:29' overrides: 50897153!
type
	^ #Residential! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:05:07' prior: 50897238!
commertialZone

	^ Commertial new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:06:48' prior: 50896442!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:06:55' prior: 50896446!
residentialZone

	^ Residential new! !
!City methodsFor: 'adding' stamp: 'mf 9/23/2021 23:07:46' prior: 50896787!
addService: aService 

	services add: aService.! !
!City methodsFor: 'adding' stamp: 'mf 9/23/2021 23:07:53' prior: 50897207!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'servicies' stamp: 'mf 9/23/2021 23:08:10' prior: 50897169!
energyConsumption
	
	| index total |
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'accesing' stamp: 'mf 9/23/2021 23:08:22' prior: 50896908!
zones

	^ zones.
! !

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceProducedCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ServiceProducedCalculator methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:13:09'!
initializeWith: aSetOfServicies
	services _ aSetOfServicies.! !
!ServiceProducedCalculator methodsFor: 'initialization' stamp: 'mf 9/23/2021 23:14:17'!
with: aSetOfServicies
	^ServiceProducedCalculator initializeWith: aSetOfServicies.! !

!classDefinition: #YYY category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #YYY category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ServiceCalculator stamp: 'mf 4/1/2022 01:14:51'!
Object subclass: #ServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #EnergyServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
ProtoObject subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #EnergyServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:51'!
ProtoObject subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:52'!
ProtoObject subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterServiceCalculator category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:52'!
ProtoObject subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!EnergyServiceCalculator methodsFor: 'no messages' stamp: 'mf 9/23/2021 23:51:43'!
amountOfEnergyProducedBy: aListOfServicies
	self amountOf: ep producedBy: aListOfServicies ! !
!EnergyServiceCalculator methodsFor: 'as yet unclassified' stamp: 'mf 9/23/2021 23:51:52' prior: 50897430!
amountOfEnergyProducedBy: aListOfServicies
	^self amountOf: ep producedBy: aListOfServicies ! !
!WaterServiceCalculator methodsFor: 'no messages' stamp: 'mf 9/23/2021 23:52:20'!
amountOfEnergyProducedBy: aListOfServicies
	^self amountOf: wp producedBy: aListOfServicies! !

!classRemoval: #EnergyServiceCalculator stamp: 'mf 4/1/2022 01:14:52'!
ProtoObject subclass: #EnergyServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterServiceCalculator stamp: 'mf 4/1/2022 01:14:52'!
ProtoObject subclass: #WaterServiceCalculator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:47'!
waterConsumption
	self subclassResponsibility.! !
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:52' prior: 50897463!
waterConsumption
	
	self subclassResponsibility.! !
!Zone methodsFor: 'consumption' stamp: 'mf 9/24/2021 00:07:58'!
energyConsumption
	
	self subclassResponsibility.! !

!methodRemoval: Zone #energyConsumption stamp: 'mf 4/1/2022 01:14:52'!
energyConsumption
	
	self subclassResponsibility.!

!methodRemoval: Zone #waterConsumption stamp: 'mf 4/1/2022 01:14:52'!
waterConsumption
	
	self subclassResponsibility.!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:52'!
Object subclass: #ZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:52'!
Object subclass: #ZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:11:25'!
energyConsumedIn: aZone
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:11:45'!
waterConsumedIn: aZone
	
	self subclassResponsibility ! !

!classDefinition: #CommertialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CommertialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #IndustrialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ResidentialZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CommertialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:13:18' overrides: 50897499!
energyConsumedIn: aZone
	
	! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:14:18' prior: 50897559 overrides: 50897499!
energyConsumedIn: aZone
	! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:17:13' prior: 50897564 overrides: 50897499!
energyConsumedIn: aZone
	! !

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:53'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:18:17' overrides: 16896425!
initialize
	serviceCalculator _ ServiceCalculator new.! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:19:40' prior: 50897569 overrides: 50897499!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:20:05' prior: 50897595 overrides: 50897499!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 8! !

!methodRemoval: CommertialZoneManager #energyConsumedIn: stamp: 'mf 4/1/2022 01:14:53'!
energyConsumedIn: aZone

	^ serviceCalculator amountOf: ep consumedBy:  aZone getNumberOfCells byConsumingForCell: 8!
!CommertialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:39:04' overrides: 50897499!
energyConsumedIn: aZone

	serviceCalculator amountOfEnergyConsumedBy: aZone byConsumingForCell: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:46:08'!
canHandle: aZone
	^aZone type = #Commertial ! !
!IndustrialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:46:30'!
canHandle: aZone
	^aZone type = #Industrial! !
!ResidentialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:46:44'!
canHandle: aZone
	^aZone type = #Residential! !

!methodRemoval: ZoneManager #initialize stamp: 'mf 4/1/2022 01:14:53'!
initialize
	serviceCalculator _ ServiceCalculator new.!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:48:45'!
for: aZone
	
	! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:50:00' prior: 50897641!
for: aZone

	! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:51:50' prior: 50897645!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ).! !
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 00:52:13' prior: 50897649!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.! !

!methodRemoval: ZoneManager #for: stamp: 'mf 4/1/2022 01:14:53'!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.!
!ZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:54:31'!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new.! !

!methodRemoval: CommertialZoneManager #canHandle: stamp: 'mf 4/1/2022 01:14:54'!
canHandle: aZone
	^aZone type = #Commertial !

!methodRemoval: IndustrialZoneManager #canHandle: stamp: 'mf 4/1/2022 01:14:54'!
canHandle: aZone
	^aZone type = #Industrial!

!methodRemoval: ResidentialZoneManager #canHandle: stamp: 'mf 4/1/2022 01:14:54'!
canHandle: aZone
	^aZone type = #Residential!
!CommertialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:08'!
canHandle: aZone
	^aZone type = #Commertial ! !
!IndustrialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:20'!
canHandle: aZone
	^aZone type = #Industrial! !
!ResidentialZoneManager class methodsFor: 'no messages' stamp: 'mf 9/24/2021 00:56:39'!
canHandle: aZone
	^aZone type = #Residential! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 00:57:58' prior: 50897617 overrides: 50897499!
energyConsumedIn: aZone! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:07:33'!
amountOf: aUnit consumedIn: aZone byConsumingFor: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:08:03' prior: 50897700 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn:  aZone byConsumingFor: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:08:36' prior: 50897711 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn:  aZone byConsumingFor: 8! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:09:04' prior: 50897718 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 8! !
!IndustrialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 01:09:21' overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'no messages' stamp: 'mf 9/24/2021 01:09:35' overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:31' overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 9! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:45' overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:10:57' overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep consumedIn: aZone byConsumingFor: 10! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:13:03'!
assertCan: aZone beAddedTo: aCity
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:14:38'!
assertCan: aCity
	
	self subclassResponsibility ! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:15:05'!
assertCanAZonebeAddedTo: aCity
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #assertCan: stamp: 'mf 4/1/2022 01:14:54'!
assertCan: aCity
	
	self subclassResponsibility !

!methodRemoval: ZoneManager #assertCan:beAddedTo: stamp: 'mf 4/1/2022 01:14:54'!
assertCan: aZone beAddedTo: aCity
	
	self subclassResponsibility !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:17:17' prior: 50897772!
assertCanAZonebeAddedTo: aCity
	
	self YYY: aCity.! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:18:56' prior: 50897786!
assertCanAZonebeAddedTo: aCity
	
	^(self assertCanBeAddedToSubclass: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:19:17'!
assertCanBeAddedToSubclass: aCity
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #assertCanBeAddedToSubclass: stamp: 'mf 4/1/2022 01:14:54'!
assertCanBeAddedToSubclass: aCity
	
	self subclassResponsibility !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:20:44' prior: 50897791!
assertCanAZonebeAddedTo: aCity
	
	^(self assertTheresEnouhgWaterAndEnergyIn: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:22:17' prior: 50897808!
assertCanAZonebeAddedTo: aCity
	
	^(self assertTheresEnougWaterAndEnergyIn: aCity not) ifTrue: [self error: City cannotAddZoneErrorDescription].! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:22:52'!
assertTheresEnougWaterAndEnergyIn: aCity

	self subclassResponsibility ! !
!ZoneManager methodsFor: 'nil' stamp: 'mf 9/24/2021 01:24:07'!
isThereEnoghWater: anAmountOfWater andEnergy: anAmounyOfEnergy In: aCity
	! !
!ZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:25:45' prior: 50897828!
isThereEnoghWater: anAmountOfWater andEnergy: anAmounyOfEnergy In: aCity

	aCity energyAvailable < (anAmounyOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	aCity waterAvailable < (anAmountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:26:12' prior: 50897816!
assertCanAZonebeAddedTo: aCity
	
	^self assertTheresEnougWaterAndEnergyIn: aCity.! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:27:17' overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	self isThereEnoghWater: 5 andEnergy: 4 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:27:20' prior: 50897853 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 5 andEnergy: 4 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:28:14' prior: 50897860 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:29:36' overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 9 andEnergy: 5 In: aCity! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:30:16' overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	^self isThereEnoghWater: 10 andEnergy: 10 In: aCity! !
!City methodsFor: 'initialization' stamp: 'mf 9/24/2021 01:31:25' prior: 50897016 overrides: 16896425!
initialize
	
	services _ OrderedCollection new.
	zones _ OrderedCollection new.
	! !
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:33:58' prior: 50897265!
addZone: aZone

	"aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]."
	ZoneManager for: aZone .

	zones add: aZone.
! !
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:34:48' prior: 50897893!
addZone: aZone

	"aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	]."
	(ZoneManager for: aZone) assertCanAZonebeAddedTo: self.

	zones add: aZone.
! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:38:32' prior: 50897867 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:38:53' prior: 50897955 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [City cannotAddZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:40:56' prior: 50897964 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [City cannotAddCommertialZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:42:43' prior: 50897974 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	(aCity hasResidentialZones not) ifTrue: [self error: City cannotAddCommertialZoneErrorDescription].
	^self isThereEnoghWater: 8 andEnergy: 2 In: aCity ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:43:57' prior: 50897984 overrides: 50897823!
assertTheresEnougWaterAndEnergyIn: aCity

	self isThereEnoghWater: 8 andEnergy: 2 In: aCity.
	^(aCity hasResidentialZones not) ifTrue: [self error: City cannotAddCommertialZoneErrorDescription].
	 ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 01:46:16' prior: 50897294!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumption].
	
	 ! !
!City methodsFor: 'adding' stamp: 'mf 9/24/2021 01:46:51' prior: 50897923!
addZone: aZone

	(ZoneManager for: aZone) assertCanAZonebeAddedTo: self.

	zones add: aZone.
! !
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:48:41' prior: 50897666!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.! !

!classDefinition: 'ZoneManager class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:55'!
ZoneManager class
	instanceVariableNames: 'zone'!
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:49:23'!
initializeWith: aZone

	zone _ aZone.! !

!methodRemoval: ZoneManager class #initializeWith: stamp: 'mf 4/1/2022 01:14:55'!
initializeWith: aZone

	zone _ aZone.!
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:50:34'!
initializeWith: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.! !

!methodRemoval: ZoneManager class #initializeWith: stamp: 'mf 4/1/2022 01:14:55'!
initializeWith: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) with: aZone.!

!classDefinition: #ZoneManager category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:14:56'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator zone'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!ZoneManager methodsFor: 'initialization' stamp: 'mf 9/24/2021 01:51:37'!
initializeWith: aZone
	zone _ aZone.! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:52:13'!
amountOf: aUnit byConsumingFor: anAmount
	
	^(anAmount * aUnit) * zone getNumberOfCells ! !
!ZoneManager methodsFor: 'private' stamp: 'mf 9/24/2021 01:52:28' prior: 50898061!
amountOf: aUnit byConsumingFor: anAmount
	
	^(anAmount * aUnit) * zone getNumberOfCells ! !

!methodRemoval: ZoneManager #amountOf:consumedIn:byConsumingFor: stamp: 'mf 4/1/2022 01:14:56'!
amountOf: aUnit consumedIn: aZone byConsumingFor: anAmount
	
	^(anAmount * aUnit) * aZone getNumberOfCells !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:00' prior: 50897725 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 8! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:05' prior: 50897751 overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:10' prior: 50897731 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:16' prior: 50897758 overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:22' prior: 50897737 overrides: 50897499!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:53:30' prior: 50897744 overrides: 50897504!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 9! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:53:45'!
energyConsumedIn
	
	self subclassResponsibility ! !

!methodRemoval: ZoneManager #energyConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
energyConsumedIn: aZone
	
	self subclassResponsibility !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:09' overrides: 50898120!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 8! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:26' overrides: 50898120!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:33' overrides: 50898120!
energyConsumedIn

	 ^ self amountOf: ep byConsumingFor: 5! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:54:38'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 9! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:07'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 2! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:22' prior: 50898152!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 2! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:30'!
waterConsumedIn

	 ^ self amountOf: ep byConsumingFor: 10! !
!IndustrialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:35' prior: 50898163!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 10! !
!ResidentialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 01:55:48' prior: 50898147!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 9! !

!methodRemoval: ResidentialZoneManager #waterConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 9!

!methodRemoval: ResidentialZoneManager #energyConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 5!

!methodRemoval: IndustrialZoneManager #waterConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10!

!methodRemoval: IndustrialZoneManager #energyConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 10!

!methodRemoval: CommertialZoneManager #energyConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
energyConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 8!

!methodRemoval: CommertialZoneManager #waterConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
waterConsumedIn: aZone

	 ^ self amountOf: ep byConsumingFor: 2!

!methodRemoval: ZoneManager #waterConsumedIn: stamp: 'mf 4/1/2022 01:14:56'!
waterConsumedIn: aZone
	
	self subclassResponsibility !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 01:58:48' prior: 50896859!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!ZoneManager methodsFor: 'operations' stamp: 'mf 9/24/2021 01:59:12'!
waterConsumedIn
	
	self subclassResponsibility ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:00:19' prior: 50898004!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumedIn].
	
	 ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:02:39' prior: 50898228!
energyConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) energyConsumedIn] ifEmpty: [^0].
	
	 ! !
!ZoneManager class methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 02:05:01' prior: 50898017!
for: aZone

	^(self subclasses detect: [:aZoneManager | aZoneManager canHandle: aZone] ) new initializeWith: aZone.! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:07:00' prior: 50896846!
energyProduced
	
	^(ServiceCalculator new) ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:07:55' prior: 50898248!
energyProduced
	
	^(ServiceCalculator new) amountOfEnergyProducedBy: services.! !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:08:49' prior: 50898213!
hasResidentialZones

	^zones detect: [:aZone | aZone type = #Residential].
! !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:12:50' prior: 50898258!
hasResidentialZones

	zones detect: [:aZone | aZone type = #Residential] ifNone:[^false].
! !
!City methodsFor: 'assertions' stamp: 'mf 9/24/2021 02:12:55' prior: 50898263!
hasResidentialZones

	zones detect: [:aZone | aZone type = #Residential] ifNone:[^false].
	^true
! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:14:40' prior: 50897188!
waterConsumption
	
	! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:15:55' prior: 50898275!
waterConsumption
	
	^zones sum: [:aZone | ] ! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:16:19' prior: 50898279!
waterConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) waterConsumedIn] ifEmpty: [^0]. ! !
!City methodsFor: 'servicies' stamp: 'mf 9/23/2021 23:03:36' prior: 50898283!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:16:19' prior: 50898289!
waterConsumption
	
	^zones sum: [:aZone | (ZoneManager for: aZone) waterConsumedIn] ifEmpty: [^0]. ! !
!CommertialZoneManager methodsFor: 'as yet unclassified' stamp: 'mf 9/24/2021 02:25:55' prior: 50898158 overrides: 50898223!
waterConsumedIn

	 ^ self amountOf: wp byConsumingFor: 2! !
!City methodsFor: 'servicies' stamp: 'mf 9/24/2021 02:27:22' prior: 50897037!
waterProduced
	^(ServiceCalculator new) amountOfWaterProducedBy: services.! !

!classRemoval: #ResidentialZoneManager stamp: 'mf 4/1/2022 01:14:57'!
ZoneManager subclass: #ResidentialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZoneManager stamp: 'mf 4/1/2022 01:14:58'!
ZoneManager subclass: #IndustrialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZoneManager stamp: 'mf 4/1/2022 01:14:58'!
ZoneManager subclass: #CommertialZoneManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ZoneManager stamp: 'mf 4/1/2022 01:14:58'!
Object subclass: #ZoneManager
	instanceVariableNames: 'serviceCalculator zone'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Residential stamp: 'mf 4/1/2022 01:14:59'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'mf 4/1/2022 01:14:59'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 4/1/2022 01:14:59'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'mf 4/1/2022 01:15:00'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 4/1/2022 01:15:00'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 4/1/2022 01:15:00'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 4/1/2022 01:15:01'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:01'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:01'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:04'!
commertialZone

	^ Zone withType: #Commertial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:14'!
industrialZone

	^ Zone withType: #Industrial! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:55'!
residentialZone

	^ Zone withType: #Residential! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:33'!
solarPlant

	^ Service withType: #SolarPlant! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:15:27'!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:24'!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:36'!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:47'!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:09:58'!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:16'!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:18:47'!
test07CityWithoutWaterServicesHaveZeroWaterProduced

	| city |

	city _ City new.
	self assert: 0 * wp equals: city waterProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:26'!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city _ City new.
	city addService: self waterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:39'!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:10:52'!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:03'!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:21'!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:29'!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self solarPlant.
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:11:38'!
test14CityWith2WaterTowerHaveTwiceWaterAvailable

	| city |

	city _ City new.
	city addService: self waterTower.
	city addService: self waterTower.
	
	self assert: (200 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:07'!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self residentialZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:28'!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:12:48'!
test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ City new.
	
	self 
		should: [ city addZone: self industrialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:19:49'!
test18CityWithoutZonesHaveZeroEnergyConsumption

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyConsumption.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:13'!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city _ City new.
	
	city addService: self solarPlant.
	city addService: self waterTower.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:27'!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:41'!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:50'!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:13:59'!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:14:10'!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:14:20'!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city zone |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 10:08:45'!
waterTower

	^ Service withType: #WaterTower! !

!classDefinition: 'CityTest class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:02'!
CityTest class
	instanceVariableNames: ''!

!classDefinition: 'CityTest class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:02'!
CityTest class
	instanceVariableNames: ''!
!CityTest class methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:22:41' overrides: 16883149!
initialize

	"Este método está para crear unidades"
	"No lo deben tocar ni darle importancia durante el parcial"
	
	| ep wp |
	ep := BaseUnit named: 'energypoint' sign: 'ep'.
	wp := BaseUnit named: 'waterpoint' sign: 'wp'.
	
	Smalltalk at: #ep put: ep.
	Smalltalk at: #wp put: wp.! !

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:02'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:02'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 20:57:01'!
addService: aService 

	services ifNil: [ services _ OrderedCollection new].
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:17:50'!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:06:00'!
energyAvailable
	
	^ self energyProduced - self energyConsumption

! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:14:23'!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:21:30'!
energyProduced
	
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #SolarPlant ifTrue: [ total _ total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 22:14:26'!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'HAW 9/23/2021 11:04:39'!
setName: aName

	name _ aName.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:23:24'!
waterAvailable
	
	^ self waterProduced - self waterConsumption.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:15:10'!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/22/2021 19:22:04'!
waterProduced
	| index total |
	
	services ifNil: [services _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= services size] whileTrue: [ | service |
		service _ services at: index.
		service type = #WaterTower ifTrue: [ total _ total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:43:27'!
zones

	zones ifNil: [ zones _ OrderedCollection new].

	^ zones.
! !

!classDefinition: 'City class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
City class
	instanceVariableNames: ''!

!classDefinition: 'City class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
City class
	instanceVariableNames: ''!
!City class methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 22:10:50'!
cannotAddCommertialZoneErrorDescription

	^ 'Cannot add commertial zone without Residential zones'.! !
!City class methodsFor: 'as yet unclassified' stamp: 'FRT 9/16/2021 21:41:32'!
cannotAddZoneErrorDescription

	^ 'Cannot add zone'.! !

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service methodsFor: 'initialization' stamp: 'HAW 9/23/2021 11:04:53'!
initializeWithType: aServiceType 

	type _ aServiceType.! !
!Service methodsFor: 'accessing' stamp: 'FRT 9/16/2021 20:59:49'!
type
	
	^type! !

!classDefinition: 'Service class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Service class
	instanceVariableNames: ''!

!classDefinition: 'Service class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Service class
	instanceVariableNames: ''!
!Service class methodsFor: 'instance creation' stamp: 'FRT 9/16/2021 20:55:41'!
withType: aServiceType

	^self new initializeWithType: aServiceType ! !

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'initialization' stamp: 'FRT 9/16/2021 20:27:04'!
initializeWithType: aZoneType 

	type := aZoneType.! !
!Zone methodsFor: 'accessing' stamp: 'FRT 9/20/2021 17:00:06'!
getNumberOfCells

	numberOfCells ifNil: [ ^ 1].	
	
	^ numberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'HAW 9/23/2021 11:05:04'!
setNumberOfCells: aNumberOfCells
	
	numberOfCells _ aNumberOfCells! !
!Zone methodsFor: 'accessing' stamp: 'FRT 9/16/2021 20:27:43'!
type
	
	^ type! !

!classDefinition: 'Zone class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Zone class
	instanceVariableNames: ''!

!classDefinition: 'Zone class' category: 'ISW1-2021-2C-1erParcial' stamp: 'mf 4/1/2022 01:15:03'!
Zone class
	instanceVariableNames: ''!
!Zone class methodsFor: 'instance creation' stamp: 'FRT 9/16/2021 20:26:23'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. ! !

!classDefinition: #NumerosNaturales category: 'EjNaturales' stamp: 'mf 4/1/2022 01:15:03'!
DenotativeObject subclass: #NumerosNaturales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjNaturales'!

!classDefinition: 'NumerosNaturales class' category: 'EjNaturales' stamp: 'mf 4/1/2022 01:15:04'!
NumerosNaturales class
	instanceVariableNames: ''!

!classDefinition: #NumerosNaturales category: 'EjNaturales' stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #NumerosNaturales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjNaturales'!

!classDefinition: 'NumerosNaturales class' category: 'EjNaturales' stamp: 'mf 4/1/2022 01:15:04'!
NumerosNaturales class
	instanceVariableNames: ''!

!classRemoval: #NumerosNaturales stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #NumerosNaturales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjNaturales'!

!classDefinition: #I category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: #I category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'I class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
I class
	instanceVariableNames: ''!

!classDefinition: 'I class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
I class
	instanceVariableNames: ''!
!I class methodsFor: 'next' stamp: 'ARM 3/31/2022 21:18:47'!
next

	^II! !
!I class methodsFor: 'operations' stamp: 'ARM 3/31/2022 21:19:14'!
+ aNatural

	^aNatural next! !

!classDefinition: #II category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: #II category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'II class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
II class
	instanceVariableNames: 'next previous'!

!classDefinition: 'II class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
II class
	instanceVariableNames: 'next previous'!
!II class methodsFor: 'operaciones' stamp: 'ARM 3/31/2022 21:27:43'!
+ unNatural

	^previous + unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'ARM 3/31/2022 21:51:58'!
- unNatural

	unNatural = I ifTrue:[^previous].
	^previous - unNatural previous! !
!II class methodsFor: 'next & previous' stamp: 'ARM 3/31/2022 21:20:26'!
next
	next ifNotNil:[^next].
	next _ II createChildNamed: (self name , 'I').
	next previous: self.
	^next! !
!II class methodsFor: 'next & previous' stamp: 'ARM 3/31/2022 21:26:45'!
previous

	^previous! !
!II class methodsFor: 'next & previous' stamp: 'ARM 3/31/2022 21:20:55'!
previous: unNatural 
	
	previous _ unNatural! !
!II class methodsFor: 'as yet unclassified' stamp: 'ARM 3/31/2022 21:59:00' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !

!classDefinition: #III category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: #III category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'III class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:04'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'ARM 3/31/2022 21:59:00' overrides: 50899095!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !

!classDefinition: #IIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: #IIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
IIII class
	instanceVariableNames: ''!

!classDefinition: 'IIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
IIII class
	instanceVariableNames: ''!
!IIII class methodsFor: 'as yet unclassified' stamp: 'ARM 3/31/2022 21:59:00' overrides: 50899095!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !

!classDefinition: #IIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: #IIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: 'IIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:15:05'!
IIIII class
	instanceVariableNames: ''!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'ARM 3/31/2022 21:59:00' overrides: 50899095!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'mf 4/1/2022 01:15:05'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'mf 4/1/2022 01:15:05'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'mf 4/1/2022 01:15:05'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'mf 4/1/2022 01:15:05'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIII.!
!I class methodsFor: 'operations' stamp: 'mf 4/1/2022 01:15:56'!
* aNatural

	^aNatural! !
!I class methodsFor: 'operations' stamp: 'mf 4/1/2022 01:15:59' prior: 50899217!
* aNatural

	^aNatural.! !

I * IIII!

I * IIII.!

I * IIII.!

I * II.!
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:19:17'!
* unNatural
	
	| actual |
	actual _ self.
	^previous * unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:19:45' prior: 50899226!
* unNatural
	
	| actual  total|
	actual _ self.
	total _ unNatural.
	
	^previous * unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:20:00' prior: 50899231!
* unNatural
	
	| actual  total|
	actual _ self.
	total _ unNatural.
	
	^previous * unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:23:06' prior: 50899237!
* unNatural
	
	| actual  total|
	actual _ self.
	total _ unNatural.
	[actual ~= I] whileTrue: [actual]
	^previous * unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:23:46' prior: 50899243!
* unNatural
	
	| actual  total|
	actual _ self.
	total _ unNatural.
	[actual ~= I] whileTrue: [actual _ actual previous. total _ total + unNatural].
	^previous * unNatural next! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/1/2022 01:24:06' prior: 50899250!
* unNatural
	
	| actual  total|
	actual _ self.
	total _ unNatural.
	[actual ~= I] whileTrue: [actual _ actual previous. total _ total + unNatural].
	^total! !
!I class methodsFor: 'operations' stamp: 'mf 4/1/2022 01:24:12' prior: 50899221!
* aNatural

	^aNatural! !

II * I.!

II * II!

IIII * II.!

!classDefinition: #IIIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
IIIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIIIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:44'!
IIIIIIII class
	instanceVariableNames: ''!

III * III.!

!classDefinition: #IIIIIIIII category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:59'!
II subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIIIIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/1/2022 01:24:59'!
IIIIIIIII class
	instanceVariableNames: ''!

----QUIT----(1 April 2022 01:25:12) CuisUniversity-4532.image priorSource: 17867904!

----STARTUP---- (11 April 2022 02:54:47) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\Numeros-Naturales.st----!

----End fileIn of D:\Descargas\Roman Numbers Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 03:00:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 03:01:09'!
ERROR!

!classRemoval: #IIIIII stamp: 'mf 4/11/2022 03:03:01'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIIII stamp: 'mf 4/11/2022 03:03:35'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIII stamp: 'mf 4/11/2022 03:03:41'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIIIIII stamp: 'mf 4/11/2022 03:03:47'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIIIIIII stamp: 'mf 4/11/2022 03:03:51'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIIIIIIII stamp: 'mf 4/11/2022 03:03:57'!
II subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!
!NaturalNumbersTester class methodsFor: 'testing' stamp: 'mf 4/11/2022 03:04:36' prior: 50899518!
test12CanNotDivideByABiggerNumber

	"Assert should: [ III /  IV ]
		signal: Error
		withDescription: II canNotDivideByBiggerNumberErrorDescription.
	
	Assert should: [ I /  II]
		signal: Error
		withDescription: II canNotDivideByBiggerNumberErrorDescription"
! !

!classRemoval: #III stamp: 'mf 4/11/2022 03:04:41'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 03:04:44'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 03:04:44'!
ERROR!

I + II!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:06:44' prior: 50899398!
nombrarNext

	! !

I + II!

II name.!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:09:52' prior: 50899595!
nombrarNext

	^self name.! !

I + II !

	^self name, 'I'.!

I + II.!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:11:22' prior: 50899599!
nombrarNext

	^self name , 'I'.! !

I + II.!

!classDefinition: #III category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:11:25'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'III class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:11:25'!
III class
	instanceVariableNames: ''!

self name!

 'nil' !

 'nil'!

String!

II name endsWith: 'V'!

II name endsWith: 'I'!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:18:57' prior: 50899604!
nombrarNext

	^self name endsWith: 'III'.! !

(II name endsWith: 'III') ifTrue: [^'Jorge']!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:23:01' prior: 50899622!
nombrarNext

	^(self name endsWith: 'III') ifTrue: [^self name withoutSuffix: 'III' , 'IV'].! !

I+III!

	^(self name endsWith: 'III') ifTrue: [^self name withoutSuffix: 'II' , 'V'].!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:23:33' prior: 50899628!
nombrarNext

	^(self name endsWith: 'III') ifTrue: [^self name withoutSuffix: 'II' , 'V'].! !

I+III!

self!

(III name endsWith: 'III') ifTrue: [^III name withoutSuffix: 'II' , 'V'].!

(III name endsWith: 'III') !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:25:46' prior: 50899637!
nombrarNext

	(self name endsWith: 'III') ifTrue: [^self name withoutSuffix: 'II' , 'V'].! !

I+III!

self name withoutSuffix: 'II' , 'V'!

III name withoutSuffix: 'II' , 'V'!

(III name withoutSuffix: 'II') , 'V'!

(III name withoutSuffix: 'III') , 'IV'!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:27:44' prior: 50899647!
nombrarNext

	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:28:10' prior: 50899658!
nombrarNext

	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].! !

I+III!

!classDefinition: #IV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:29:14'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:29:14'!
IV class
	instanceVariableNames: ''!

II+III!

!classDefinition: #V category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:29:31'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'V class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:29:31'!
V class
	instanceVariableNames: ''!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:31:09' prior: 50899664!
nombrarNext

	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:33:39' prior: 50899694!
nombrarNext

	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:34:41' prior: 50899703!
nombrarNext

	
	(self name endsWith: 'IV') ifTrue: [(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:36:21'!
siElNombreTerminaCon: elFinalDeUnNumeroRomano loCambioPor: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: 'IV') ifTrue: [(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:36:41' prior: 50899720!
siElNombreTerminaCon: elFinalDeUnNumeroRomano loCambioPor: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:36:48' prior: 50899731!
siElNombreTerminaCon: elFinalDeUnNumeroRomano loCambioPor: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [^(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:36:57' prior: 50899744!
siElNombreTerminaCon: elFinalDeUnNumeroRomano loCambioPor: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [^(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:38:12' prior: 50899712!
nombrarNext

	self siElNombreTerminaCon: 'IV' loCambioPor: 'V'.
	self siElNombreTerminaCon: 'IV' loCambioPor: 'V'.
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:38:51'!
siElNombreTerminaCon: elFinalDeUnNumeroRomano elNombreDelSiguienteTerminaCon: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [^(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 03:38:51' prior: 50899768!
nombrarNext

	self siElNombreTerminaCon: 'IV' elNombreDelSiguienteTerminaCon: 'V'.
	self siElNombreTerminaCon: 'IV' elNombreDelSiguienteTerminaCon: 'V'.
	! !

!methodRemoval: II class #siElNombreTerminaCon:loCambioPor: stamp: 'mf 4/11/2022 03:38:51'!
siElNombreTerminaCon: elFinalDeUnNumeroRomano loCambioPor: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [^(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:39:14' prior: 50899785!
nombrarNext

	self siElNombreTerminaCon: 'IV' elNombreDelSiguienteTerminaCon: 'V'.
	self siElNombreTerminaCon: 'III' elNombreDelSiguienteTerminaCon: 'IV'.
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:39:44' prior: 50899803!
nombrarNext

	
	self siElNombreTerminaCon: 'IV' elNombreDelSiguienteTerminaCon: 'V'.
	self siElNombreTerminaCon: 'III' elNombreDelSiguienteTerminaCon: 'IV'.
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:40:34' prior: 50899811!
nombrarNext

	
	self siElNombreTerminaCon: 'IV' elNombreDelSiguienteTerminaCon: 'V'.
	self siElNombreTerminaCon: 'III' elNombreDelSiguienteTerminaCon: 'IV'.
	^self name , 'I'
	! !

!classRemoval: #NaturalNumbersTester stamp: 'mf 4/11/2022 03:41:04'!
DenotativeObject subclass: #NaturalNumbersTester
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman Numbers Tests'!

!classRemoval: #V stamp: 'mf 4/11/2022 03:41:10'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IV stamp: 'mf 4/11/2022 03:41:15'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #III stamp: 'mf 4/11/2022 03:41:19'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

I +I!

I +II!

I + II!

!classDefinition: #III category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:41:54'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'III class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:41:54'!
III class
	instanceVariableNames: ''!

I + III!

!classDefinition: #IIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:41:58'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:41:58'!
IIII class
	instanceVariableNames: ''!

I + IIII!

!classDefinition: #IIIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:42:04'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:42:04'!
IIIII class
	instanceVariableNames: ''!

!classRemoval: #IIIII stamp: 'mf 4/11/2022 03:42:12'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IIII stamp: 'mf 4/11/2022 03:42:21'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #III stamp: 'mf 4/11/2022 03:42:25'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

II nombrarNext!

I+II!

!classDefinition: #III category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:43:43'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'III class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:43:43'!
III class
	instanceVariableNames: ''!

III nombrarNext!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:47:40' prior: 50899819!
nombrarNext

	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	self siElNombreTerminaCon: 'III' elNombreDelSiguienteTerminaCon: 'IV'.
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:48:38' prior: 50899914!
nombrarNext

	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	^self name , 'I'
	! !

III nombrarNext!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:50:25' prior: 50899923!
nombrarNext

	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	^self name , 'I'
	! !

!classDefinition: 'AnObsoleteIIII class' category: nil stamp: 'mf 4/11/2022 03:50:36'!
AnObsoleteIIII class
	instanceVariableNames: 'md'!

III+I!

!classDefinition: #IV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:36'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:36'!
IV class
	instanceVariableNames: ''!

III+II!

!classDefinition: #V category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:43'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'V class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:43'!
V class
	instanceVariableNames: ''!

III+III!

!classDefinition: #VI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:47'!
II subclass: #VI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'VI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:47'!
VI class
	instanceVariableNames: ''!

III+IV!

!classDefinition: #VII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:54'!
II subclass: #VII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'VII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:52:54'!
VII class
	instanceVariableNames: ''!

V*VII!

!classDefinition: #VIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
II subclass: #VIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'VIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
VIII class
	instanceVariableNames: ''!

!classDefinition: #IX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
II subclass: #IX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'IX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
IX class
	instanceVariableNames: ''!

!classDefinition: #X category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
II subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'X class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
X class
	instanceVariableNames: ''!

!classDefinition: #XI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:30'!
II subclass: #XI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XI class
	instanceVariableNames: ''!

!classDefinition: #XII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XII class
	instanceVariableNames: ''!

!classDefinition: #XIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XIII class
	instanceVariableNames: ''!

!classDefinition: #XIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XIV class
	instanceVariableNames: ''!

!classDefinition: #XV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XV class
	instanceVariableNames: ''!

!classDefinition: #XVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XVI class
	instanceVariableNames: ''!

!classDefinition: #XVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XVII class
	instanceVariableNames: ''!

!classDefinition: #XVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XVIII class
	instanceVariableNames: ''!

!classDefinition: #XIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XIX class
	instanceVariableNames: ''!

!classDefinition: #XX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XX class
	instanceVariableNames: ''!

!classDefinition: #XXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XXI class
	instanceVariableNames: ''!

!classDefinition: #XXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XXII class
	instanceVariableNames: ''!

!classDefinition: #XXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XXIII class
	instanceVariableNames: ''!

!classDefinition: #XXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XXIV class
	instanceVariableNames: ''!

!classDefinition: #XXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
XXV class
	instanceVariableNames: ''!

!classDefinition: #XXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:31'!
II subclass: #XXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXVI class
	instanceVariableNames: ''!

!classDefinition: #XXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXVII class
	instanceVariableNames: ''!

!classDefinition: #XXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXVIII class
	instanceVariableNames: ''!

!classDefinition: #XXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXIX class
	instanceVariableNames: ''!

!classDefinition: #XXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXX class
	instanceVariableNames: ''!

!classDefinition: #XXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXXI class
	instanceVariableNames: ''!

!classDefinition: #XXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXXII class
	instanceVariableNames: ''!

!classDefinition: #XXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXXIII class
	instanceVariableNames: ''!

!classDefinition: #XXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXXIV class
	instanceVariableNames: ''!

!classDefinition: #XXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
II subclass: #XXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 03:53:32'!
XXXV class
	instanceVariableNames: ''!

XV previous!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:57:54' prior: 50899933!
nombrarNext
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 03:59:17' prior: 50900295!
nombrarNext
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:00:13' prior: 50900315!
nombrarNext
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	^self name , 'I'
	! !

XXV*IV!

!classDefinition: #XXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XXXVI class
	instanceVariableNames: ''!

!classDefinition: #XXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XXXVII class
	instanceVariableNames: ''!

!classDefinition: #XXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XXXVIII class
	instanceVariableNames: ''!

!classDefinition: #XXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XXXIX class
	instanceVariableNames: ''!

!classDefinition: #XL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XL class
	instanceVariableNames: ''!

!classDefinition: #XLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XLI class
	instanceVariableNames: ''!

!classDefinition: #XLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XLII class
	instanceVariableNames: ''!

!classDefinition: #XLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XLIII class
	instanceVariableNames: ''!

!classDefinition: #XLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XLIV class
	instanceVariableNames: ''!

!classDefinition: #XLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
XLV class
	instanceVariableNames: ''!

!classDefinition: #XLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:05'!
II subclass: #XLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
XLVI class
	instanceVariableNames: ''!

!classDefinition: #XLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #XLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
XLVII class
	instanceVariableNames: ''!

!classDefinition: #XLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #XLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
XLVIII class
	instanceVariableNames: ''!

!classDefinition: #XLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #XLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
XLIX class
	instanceVariableNames: ''!

!classDefinition: #L category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #L
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'L class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
L class
	instanceVariableNames: ''!

!classDefinition: #LI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LI class
	instanceVariableNames: ''!

!classDefinition: #LII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LII class
	instanceVariableNames: ''!

!classDefinition: #LIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LIII class
	instanceVariableNames: ''!

!classDefinition: #LIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LIV class
	instanceVariableNames: ''!

!classDefinition: #LV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LV class
	instanceVariableNames: ''!

!classDefinition: #LVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LVI class
	instanceVariableNames: ''!

!classDefinition: #LVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LVII class
	instanceVariableNames: ''!

!classDefinition: #LVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LVIII class
	instanceVariableNames: ''!

!classDefinition: #LIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LIX class
	instanceVariableNames: ''!

!classDefinition: #LX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LX class
	instanceVariableNames: ''!

!classDefinition: #LXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
LXI class
	instanceVariableNames: ''!

!classDefinition: #LXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:06'!
II subclass: #LXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXII class
	instanceVariableNames: ''!

!classDefinition: #LXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXIII class
	instanceVariableNames: ''!

!classDefinition: #LXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXIV class
	instanceVariableNames: ''!

!classDefinition: #LXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXV class
	instanceVariableNames: ''!

!classDefinition: #LXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXVI class
	instanceVariableNames: ''!

!classDefinition: #LXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXVII class
	instanceVariableNames: ''!

!classDefinition: #LXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXVIII class
	instanceVariableNames: ''!

!classDefinition: #LXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXIX class
	instanceVariableNames: ''!

!classDefinition: #LXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXX class
	instanceVariableNames: ''!

!classDefinition: #LXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXI class
	instanceVariableNames: ''!

!classDefinition: #LXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXII class
	instanceVariableNames: ''!

!classDefinition: #LXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXIII class
	instanceVariableNames: ''!

!classDefinition: #LXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXIV class
	instanceVariableNames: ''!

!classDefinition: #LXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXV class
	instanceVariableNames: ''!

!classDefinition: #LXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXVI class
	instanceVariableNames: ''!

!classDefinition: #LXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXVII class
	instanceVariableNames: ''!

!classDefinition: #LXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
LXXVIII class
	instanceVariableNames: ''!

!classDefinition: #LXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:07'!
II subclass: #LXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXIX class
	instanceVariableNames: ''!

!classDefinition: #LXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXX class
	instanceVariableNames: ''!

!classDefinition: #LXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXI class
	instanceVariableNames: ''!

!classDefinition: #LXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXII class
	instanceVariableNames: ''!

!classDefinition: #LXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXIII class
	instanceVariableNames: ''!

!classDefinition: #LXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXIV class
	instanceVariableNames: ''!

!classDefinition: #LXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXV class
	instanceVariableNames: ''!

!classDefinition: #LXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXVI class
	instanceVariableNames: ''!

!classDefinition: #LXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXVII class
	instanceVariableNames: ''!

!classDefinition: #LXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #LXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #LXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'LXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
LXXXIX class
	instanceVariableNames: ''!

!classDefinition: #XC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #XC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
XC class
	instanceVariableNames: ''!

!classDefinition: #XCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #XCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
XCI class
	instanceVariableNames: ''!

!classDefinition: #XCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
II subclass: #XCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:08'!
XCII class
	instanceVariableNames: ''!

!classDefinition: #XCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCIII class
	instanceVariableNames: ''!

!classDefinition: #XCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCIV class
	instanceVariableNames: ''!

!classDefinition: #XCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCV class
	instanceVariableNames: ''!

!classDefinition: #XCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCVI class
	instanceVariableNames: ''!

!classDefinition: #XCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCVII class
	instanceVariableNames: ''!

!classDefinition: #XCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCVIII class
	instanceVariableNames: ''!

!classDefinition: #XCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #XCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'XCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
XCIX class
	instanceVariableNames: ''!

!classDefinition: #C category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
II subclass: #C
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'C class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:01:09'!
C class
	instanceVariableNames: ''!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:01:57' prior: 50900337!
nombrarNext
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:04:28' prior: 50901064!
nombrarNext

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:04:51' prior: 50901089!
nombrarNext

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:05:50' prior: 50901117!
nombrarNext

	(self name endsWith: 'CDXCIX') ifTrue: [^(self name withoutSuffix: 'CDIXCIX') , 'CD'].

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:05:53' prior: 50901145!
nombrarNext

	(self name endsWith: 'CDXCIX') ifTrue: [^(self name withoutSuffix: 'CDIXCIX') , 'D'].

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !

C*V!

!classDefinition: #CI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
II subclass: #CI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
CI class
	instanceVariableNames: ''!

!classDefinition: #CII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
II subclass: #CII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
CII class
	instanceVariableNames: ''!

!classDefinition: #CIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
II subclass: #CIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
CIII class
	instanceVariableNames: ''!

!classDefinition: #CIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
II subclass: #CIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:40'!
CIV class
	instanceVariableNames: ''!

!classDefinition: #CV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CV class
	instanceVariableNames: ''!

!classDefinition: #CVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CVI class
	instanceVariableNames: ''!

!classDefinition: #CVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CVII class
	instanceVariableNames: ''!

!classDefinition: #CVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CVIII class
	instanceVariableNames: ''!

!classDefinition: #CIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CIX class
	instanceVariableNames: ''!

!classDefinition: #CX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CX class
	instanceVariableNames: ''!

!classDefinition: #CXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXI class
	instanceVariableNames: ''!

!classDefinition: #CXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXII class
	instanceVariableNames: ''!

!classDefinition: #CXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXIII class
	instanceVariableNames: ''!

!classDefinition: #CXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXIV class
	instanceVariableNames: ''!

!classDefinition: #CXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXV class
	instanceVariableNames: ''!

!classDefinition: #CXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXVI class
	instanceVariableNames: ''!

!classDefinition: #CXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXVII class
	instanceVariableNames: ''!

!classDefinition: #CXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXVIII class
	instanceVariableNames: ''!

!classDefinition: #CXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXIX class
	instanceVariableNames: ''!

!classDefinition: #CXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
II subclass: #CXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:41'!
CXX class
	instanceVariableNames: ''!

!classDefinition: #CXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXI class
	instanceVariableNames: ''!

!classDefinition: #CXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXII class
	instanceVariableNames: ''!

!classDefinition: #CXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXIII class
	instanceVariableNames: ''!

!classDefinition: #CXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXIV class
	instanceVariableNames: ''!

!classDefinition: #CXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXV class
	instanceVariableNames: ''!

!classDefinition: #CXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXVI class
	instanceVariableNames: ''!

!classDefinition: #CXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXVII class
	instanceVariableNames: ''!

!classDefinition: #CXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXIX class
	instanceVariableNames: ''!

!classDefinition: #CXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXX class
	instanceVariableNames: ''!

!classDefinition: #CXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXXI class
	instanceVariableNames: ''!

!classDefinition: #CXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXXII class
	instanceVariableNames: ''!

!classDefinition: #CXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
II subclass: #CXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:42'!
CXXXV class
	instanceVariableNames: ''!

!classDefinition: #CXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXL class
	instanceVariableNames: ''!

!classDefinition: #CXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLI class
	instanceVariableNames: ''!

!classDefinition: #CXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLII class
	instanceVariableNames: ''!

!classDefinition: #CXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLIII class
	instanceVariableNames: ''!

!classDefinition: #CXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLIV class
	instanceVariableNames: ''!

!classDefinition: #CXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLV class
	instanceVariableNames: ''!

!classDefinition: #CXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLVI class
	instanceVariableNames: ''!

!classDefinition: #CXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLVII class
	instanceVariableNames: ''!

!classDefinition: #CXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLVIII class
	instanceVariableNames: ''!

!classDefinition: #CXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
CXLIX class
	instanceVariableNames: ''!

!classDefinition: #CL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:43'!
II subclass: #CL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CL class
	instanceVariableNames: ''!

!classDefinition: #CLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLI class
	instanceVariableNames: ''!

!classDefinition: #CLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLII class
	instanceVariableNames: ''!

!classDefinition: #CLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLIII class
	instanceVariableNames: ''!

!classDefinition: #CLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLIV class
	instanceVariableNames: ''!

!classDefinition: #CLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLV class
	instanceVariableNames: ''!

!classDefinition: #CLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLVI class
	instanceVariableNames: ''!

!classDefinition: #CLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLVII class
	instanceVariableNames: ''!

!classDefinition: #CLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLVIII class
	instanceVariableNames: ''!

!classDefinition: #CLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLIX class
	instanceVariableNames: ''!

!classDefinition: #CLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLX class
	instanceVariableNames: ''!

!classDefinition: #CLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLXI class
	instanceVariableNames: ''!

!classDefinition: #CLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLXII class
	instanceVariableNames: ''!

!classDefinition: #CLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
II subclass: #CLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:44'!
CLXIII class
	instanceVariableNames: ''!

!classDefinition: #CLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXIV class
	instanceVariableNames: ''!

!classDefinition: #CLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXV class
	instanceVariableNames: ''!

!classDefinition: #CLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXVI class
	instanceVariableNames: ''!

!classDefinition: #CLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXVII class
	instanceVariableNames: ''!

!classDefinition: #CLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXVIII class
	instanceVariableNames: ''!

!classDefinition: #CLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXIX class
	instanceVariableNames: ''!

!classDefinition: #CLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXX class
	instanceVariableNames: ''!

!classDefinition: #CLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXXI class
	instanceVariableNames: ''!

!classDefinition: #CLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXXII class
	instanceVariableNames: ''!

!classDefinition: #CLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXXIII class
	instanceVariableNames: ''!

!classDefinition: #CLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
CLXXIV class
	instanceVariableNames: ''!

!classDefinition: #CLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:45'!
II subclass: #CLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXV class
	instanceVariableNames: ''!

!classDefinition: #CLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXVI class
	instanceVariableNames: ''!

!classDefinition: #CLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXVII class
	instanceVariableNames: ''!

!classDefinition: #CLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXIX class
	instanceVariableNames: ''!

!classDefinition: #CLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXX class
	instanceVariableNames: ''!

!classDefinition: #CLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXI class
	instanceVariableNames: ''!

!classDefinition: #CLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXII class
	instanceVariableNames: ''!

!classDefinition: #CLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXV class
	instanceVariableNames: ''!

!classDefinition: #CLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
II subclass: #CLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:46'!
CLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXC class
	instanceVariableNames: ''!

!classDefinition: #CXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCI class
	instanceVariableNames: ''!

!classDefinition: #CXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCII class
	instanceVariableNames: ''!

!classDefinition: #CXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCIII class
	instanceVariableNames: ''!

!classDefinition: #CXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCIV class
	instanceVariableNames: ''!

!classDefinition: #CXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCV class
	instanceVariableNames: ''!

!classDefinition: #CXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCVI class
	instanceVariableNames: ''!

!classDefinition: #CXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCVII class
	instanceVariableNames: ''!

!classDefinition: #CXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCVIII class
	instanceVariableNames: ''!

!classDefinition: #CXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CXCIX class
	instanceVariableNames: ''!

!classDefinition: #CC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CC class
	instanceVariableNames: ''!

!classDefinition: #CCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
II subclass: #CCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:47'!
CCI class
	instanceVariableNames: ''!

!classDefinition: #CCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCII class
	instanceVariableNames: ''!

!classDefinition: #CCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCIII class
	instanceVariableNames: ''!

!classDefinition: #CCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCIV class
	instanceVariableNames: ''!

!classDefinition: #CCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCV class
	instanceVariableNames: ''!

!classDefinition: #CCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCVI class
	instanceVariableNames: ''!

!classDefinition: #CCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCVII class
	instanceVariableNames: ''!

!classDefinition: #CCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCVIII class
	instanceVariableNames: ''!

!classDefinition: #CCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCIX class
	instanceVariableNames: ''!

!classDefinition: #CCX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCX class
	instanceVariableNames: ''!

!classDefinition: #CCXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCXI class
	instanceVariableNames: ''!

!classDefinition: #CCXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCXII class
	instanceVariableNames: ''!

!classDefinition: #CCXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
II subclass: #CCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:48'!
CCXIII class
	instanceVariableNames: ''!

!classDefinition: #CCXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXIV class
	instanceVariableNames: ''!

!classDefinition: #CCXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXV class
	instanceVariableNames: ''!

!classDefinition: #CCXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXVI class
	instanceVariableNames: ''!

!classDefinition: #CCXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXVII class
	instanceVariableNames: ''!

!classDefinition: #CCXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXIX class
	instanceVariableNames: ''!

!classDefinition: #CCXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXX class
	instanceVariableNames: ''!

!classDefinition: #CCXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXXI class
	instanceVariableNames: ''!

!classDefinition: #CCXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXXII class
	instanceVariableNames: ''!

!classDefinition: #CCXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
II subclass: #CCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:49'!
CCXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXV class
	instanceVariableNames: ''!

!classDefinition: #CCXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXX class
	instanceVariableNames: ''!

!classDefinition: #CCXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXXI class
	instanceVariableNames: ''!

!classDefinition: #CCXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXXII class
	instanceVariableNames: ''!

!classDefinition: #CCXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
II subclass: #CCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:50'!
CCXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXXXV class
	instanceVariableNames: ''!

!classDefinition: #CCXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXL class
	instanceVariableNames: ''!

!classDefinition: #CCXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXLI class
	instanceVariableNames: ''!

!classDefinition: #CCXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXLII class
	instanceVariableNames: ''!

!classDefinition: #CCXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXLIII class
	instanceVariableNames: ''!

!classDefinition: #CCXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
CCXLIV class
	instanceVariableNames: ''!

!classDefinition: #CCXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:51'!
II subclass: #CCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCXLV class
	instanceVariableNames: ''!

!classDefinition: #CCXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCXLVI class
	instanceVariableNames: ''!

!classDefinition: #CCXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCXLVII class
	instanceVariableNames: ''!

!classDefinition: #CCXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCXLVIII class
	instanceVariableNames: ''!

!classDefinition: #CCXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCXLIX class
	instanceVariableNames: ''!

!classDefinition: #CCL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCL class
	instanceVariableNames: ''!

!classDefinition: #CCLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCLI class
	instanceVariableNames: ''!

!classDefinition: #CCLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCLII class
	instanceVariableNames: ''!

!classDefinition: #CCLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCLIII class
	instanceVariableNames: ''!

!classDefinition: #CCLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCLIV class
	instanceVariableNames: ''!

!classDefinition: #CCLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
II subclass: #CCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:52'!
CCLV class
	instanceVariableNames: ''!

!classDefinition: #CCLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLVI class
	instanceVariableNames: ''!

!classDefinition: #CCLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLVII class
	instanceVariableNames: ''!

!classDefinition: #CCLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLVIII class
	instanceVariableNames: ''!

!classDefinition: #CCLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLIX class
	instanceVariableNames: ''!

!classDefinition: #CCLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLX class
	instanceVariableNames: ''!

!classDefinition: #CCLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLXI class
	instanceVariableNames: ''!

!classDefinition: #CCLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLXII class
	instanceVariableNames: ''!

!classDefinition: #CCLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLXIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLXIV class
	instanceVariableNames: ''!

!classDefinition: #CCLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
II subclass: #CCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:53'!
CCLXV class
	instanceVariableNames: ''!

!classDefinition: #CCLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXVI class
	instanceVariableNames: ''!

!classDefinition: #CCLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXVII class
	instanceVariableNames: ''!

!classDefinition: #CCLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXIX class
	instanceVariableNames: ''!

!classDefinition: #CCLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXX class
	instanceVariableNames: ''!

!classDefinition: #CCLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXXI class
	instanceVariableNames: ''!

!classDefinition: #CCLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXXII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
II subclass: #CCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:54'!
CCLXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXV class
	instanceVariableNames: ''!

!classDefinition: #CCLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXX class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXXI class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXXII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
II subclass: #CCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:55'!
CCLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCLXXXV class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCXC class
	instanceVariableNames: ''!

!classDefinition: #CCXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCXCI class
	instanceVariableNames: ''!

!classDefinition: #CCXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCXCII class
	instanceVariableNames: ''!

!classDefinition: #CCXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
II subclass: #CCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:56'!
CCXCIII class
	instanceVariableNames: ''!

!classDefinition: #CCXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCIV class
	instanceVariableNames: ''!

!classDefinition: #CCXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCV class
	instanceVariableNames: ''!

!classDefinition: #CCXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCVI class
	instanceVariableNames: ''!

!classDefinition: #CCXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCVII class
	instanceVariableNames: ''!

!classDefinition: #CCXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCVIII class
	instanceVariableNames: ''!

!classDefinition: #CCXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCXCIX class
	instanceVariableNames: ''!

!classDefinition: #CCC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCC class
	instanceVariableNames: ''!

!classDefinition: #CCCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
II subclass: #CCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:57'!
CCCI class
	instanceVariableNames: ''!

!classDefinition: #CCCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCII class
	instanceVariableNames: ''!

!classDefinition: #CCCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCIII class
	instanceVariableNames: ''!

!classDefinition: #CCCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCIV class
	instanceVariableNames: ''!

!classDefinition: #CCCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCV class
	instanceVariableNames: ''!

!classDefinition: #CCCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCVI class
	instanceVariableNames: ''!

!classDefinition: #CCCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCVII class
	instanceVariableNames: ''!

!classDefinition: #CCCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
II subclass: #CCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:58'!
CCCIX class
	instanceVariableNames: ''!

!classDefinition: #CCCX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCX class
	instanceVariableNames: ''!

!classDefinition: #CCCXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXI class
	instanceVariableNames: ''!

!classDefinition: #CCCXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXII class
	instanceVariableNames: ''!

!classDefinition: #CCCXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXV class
	instanceVariableNames: ''!

!classDefinition: #CCCXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
II subclass: #CCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:06:59'!
CCCXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXX class
	instanceVariableNames: ''!

!classDefinition: #CCCXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXI class
	instanceVariableNames: ''!

!classDefinition: #CCCXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXV class
	instanceVariableNames: ''!

!classDefinition: #CCCXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
II subclass: #CCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:00'!
CCCXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXX class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXXI class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXXII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
II subclass: #CCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:01'!
CCCXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXV class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
II subclass: #CCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:02'!
CCCXL class
	instanceVariableNames: ''!

!classDefinition: #CCCXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLI class
	instanceVariableNames: ''!

!classDefinition: #CCCXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLII class
	instanceVariableNames: ''!

!classDefinition: #CCCXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLIV class
	instanceVariableNames: ''!

!classDefinition: #CCCXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLV class
	instanceVariableNames: ''!

!classDefinition: #CCCXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
II subclass: #CCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:03'!
CCCXLVI class
	instanceVariableNames: ''!

!classDefinition: #CCCXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCXLVII class
	instanceVariableNames: ''!

!classDefinition: #CCCXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCXLVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCXLIX class
	instanceVariableNames: ''!

!classDefinition: #CCCL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCL class
	instanceVariableNames: ''!

!classDefinition: #CCCLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCLI class
	instanceVariableNames: ''!

!classDefinition: #CCCLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
CCCLII class
	instanceVariableNames: ''!

!classDefinition: #CCCLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:04'!
II subclass: #CCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLIV class
	instanceVariableNames: ''!

!classDefinition: #CCCLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLV class
	instanceVariableNames: ''!

!classDefinition: #CCCLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLVI class
	instanceVariableNames: ''!

!classDefinition: #CCCLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLVII class
	instanceVariableNames: ''!

!classDefinition: #CCCLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
CCCLVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:05'!
II subclass: #CCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLIX class
	instanceVariableNames: ''!

!classDefinition: #CCCLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLX class
	instanceVariableNames: ''!

!classDefinition: #CCCLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLXI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLXII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
II subclass: #CCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:06'!
CCCLXV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXX class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
II subclass: #CCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:07'!
CCCLXXI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
II subclass: #CCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:08'!
CCCLXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXX class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXXI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXXII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
II subclass: #CCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:09'!
CCCLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
II subclass: #CCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
CCCLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
II subclass: #CCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
CCCLXXXV class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
II subclass: #CCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
CCCLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
II subclass: #CCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
CCCLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
II subclass: #CCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:10'!
CCCLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CCCXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCXC class
	instanceVariableNames: ''!

!classDefinition: #CCCXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCXCI class
	instanceVariableNames: ''!

!classDefinition: #CCCXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCXCII class
	instanceVariableNames: ''!

!classDefinition: #CCCXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCXCIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
II subclass: #CCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:11'!
CCCXCIV class
	instanceVariableNames: ''!

!classDefinition: #CCCXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CCCXCV class
	instanceVariableNames: ''!

!classDefinition: #CCCXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CCCXCVI class
	instanceVariableNames: ''!

!classDefinition: #CCCXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CCCXCVII class
	instanceVariableNames: ''!

!classDefinition: #CCCXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CCCXCVIII class
	instanceVariableNames: ''!

!classDefinition: #CCCXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CCCXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CCCXCIX class
	instanceVariableNames: ''!

!classDefinition: #CD category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
II subclass: #CD
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CD class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:12'!
CD class
	instanceVariableNames: ''!

!classDefinition: #CDI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
II subclass: #CDI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
CDI class
	instanceVariableNames: ''!

!classDefinition: #CDII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
II subclass: #CDII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
CDII class
	instanceVariableNames: ''!

!classDefinition: #CDIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
II subclass: #CDIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
CDIII class
	instanceVariableNames: ''!

!classDefinition: #CDIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
II subclass: #CDIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
CDIV class
	instanceVariableNames: ''!

!classDefinition: #CDV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
II subclass: #CDV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:13'!
CDV class
	instanceVariableNames: ''!

!classDefinition: #CDVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
CDVI class
	instanceVariableNames: ''!

!classDefinition: #CDVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
CDVII class
	instanceVariableNames: ''!

!classDefinition: #CDVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
CDVIII class
	instanceVariableNames: ''!

!classDefinition: #CDIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
CDIX class
	instanceVariableNames: ''!

!classDefinition: #CDX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
CDX class
	instanceVariableNames: ''!

!classDefinition: #CDXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:14'!
II subclass: #CDXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXI class
	instanceVariableNames: ''!

!classDefinition: #CDXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
II subclass: #CDXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXII class
	instanceVariableNames: ''!

!classDefinition: #CDXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
II subclass: #CDXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXIII class
	instanceVariableNames: ''!

!classDefinition: #CDXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
II subclass: #CDXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXIV class
	instanceVariableNames: ''!

!classDefinition: #CDXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
II subclass: #CDXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXV class
	instanceVariableNames: ''!

!classDefinition: #CDXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
II subclass: #CDXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:15'!
CDXVI class
	instanceVariableNames: ''!

!classDefinition: #CDXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
II subclass: #CDXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
CDXVII class
	instanceVariableNames: ''!

!classDefinition: #CDXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
II subclass: #CDXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
CDXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
II subclass: #CDXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
CDXIX class
	instanceVariableNames: ''!

!classDefinition: #CDXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
II subclass: #CDXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
CDXX class
	instanceVariableNames: ''!

!classDefinition: #CDXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
II subclass: #CDXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:16'!
CDXXI class
	instanceVariableNames: ''!

!classDefinition: #CDXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
II subclass: #CDXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
CDXXII class
	instanceVariableNames: ''!

!classDefinition: #CDXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
II subclass: #CDXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
CDXXIII class
	instanceVariableNames: ''!

!classDefinition: #CDXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
II subclass: #CDXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
CDXXIV class
	instanceVariableNames: ''!

!classDefinition: #CDXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
II subclass: #CDXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
CDXXV class
	instanceVariableNames: ''!

!classDefinition: #CDXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
II subclass: #CDXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:17'!
CDXXVI class
	instanceVariableNames: ''!

!classDefinition: #CDXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
CDXXVII class
	instanceVariableNames: ''!

!classDefinition: #CDXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
CDXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
CDXXIX class
	instanceVariableNames: ''!

!classDefinition: #CDXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
CDXXX class
	instanceVariableNames: ''!

!classDefinition: #CDXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
CDXXXI class
	instanceVariableNames: ''!

!classDefinition: #CDXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:18'!
II subclass: #CDXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
CDXXXII class
	instanceVariableNames: ''!

!classDefinition: #CDXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
II subclass: #CDXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
CDXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CDXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
II subclass: #CDXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
CDXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CDXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
II subclass: #CDXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
CDXXXV class
	instanceVariableNames: ''!

!classDefinition: #CDXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
II subclass: #CDXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
CDXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CDXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:19'!
II subclass: #CDXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CDXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
II subclass: #CDXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
II subclass: #CDXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CDXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
II subclass: #CDXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXL class
	instanceVariableNames: ''!

!classDefinition: #CDXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
II subclass: #CDXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXLI class
	instanceVariableNames: ''!

!classDefinition: #CDXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
II subclass: #CDXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:20'!
CDXLII class
	instanceVariableNames: ''!

!classDefinition: #CDXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
II subclass: #CDXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
CDXLIII class
	instanceVariableNames: ''!

!classDefinition: #CDXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
II subclass: #CDXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
CDXLIV class
	instanceVariableNames: ''!

!classDefinition: #CDXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
II subclass: #CDXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
CDXLV class
	instanceVariableNames: ''!

!classDefinition: #CDXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
II subclass: #CDXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:21'!
CDXLVI class
	instanceVariableNames: ''!

!classDefinition: #CDXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
II subclass: #CDXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
CDXLVII class
	instanceVariableNames: ''!

!classDefinition: #CDXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
II subclass: #CDXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
CDXLVIII class
	instanceVariableNames: ''!

!classDefinition: #CDXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
II subclass: #CDXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
CDXLIX class
	instanceVariableNames: ''!

!classDefinition: #CDL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
II subclass: #CDL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
CDL class
	instanceVariableNames: ''!

!classDefinition: #CDLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
II subclass: #CDLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:22'!
CDLI class
	instanceVariableNames: ''!

!classDefinition: #CDLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
II subclass: #CDLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
CDLII class
	instanceVariableNames: ''!

!classDefinition: #CDLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
II subclass: #CDLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
CDLIII class
	instanceVariableNames: ''!

!classDefinition: #CDLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
II subclass: #CDLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
CDLIV class
	instanceVariableNames: ''!

!classDefinition: #CDLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
II subclass: #CDLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
CDLV class
	instanceVariableNames: ''!

!classDefinition: #CDLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
II subclass: #CDLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:23'!
CDLVI class
	instanceVariableNames: ''!

!classDefinition: #CDLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
II subclass: #CDLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
CDLVII class
	instanceVariableNames: ''!

!classDefinition: #CDLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
II subclass: #CDLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
CDLVIII class
	instanceVariableNames: ''!

!classDefinition: #CDLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
II subclass: #CDLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
CDLIX class
	instanceVariableNames: ''!

!classDefinition: #CDLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
II subclass: #CDLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
CDLX class
	instanceVariableNames: ''!

!classDefinition: #CDLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
II subclass: #CDLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:24'!
CDLXI class
	instanceVariableNames: ''!

!classDefinition: #CDLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
II subclass: #CDLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
CDLXII class
	instanceVariableNames: ''!

!classDefinition: #CDLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
II subclass: #CDLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
CDLXIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
II subclass: #CDLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
CDLXIV class
	instanceVariableNames: ''!

!classDefinition: #CDLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
II subclass: #CDLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
CDLXV class
	instanceVariableNames: ''!

!classDefinition: #CDLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:25'!
II subclass: #CDLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
CDLXVI class
	instanceVariableNames: ''!

!classDefinition: #CDLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
II subclass: #CDLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
CDLXVII class
	instanceVariableNames: ''!

!classDefinition: #CDLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
II subclass: #CDLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
CDLXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
II subclass: #CDLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
CDLXIX class
	instanceVariableNames: ''!

!classDefinition: #CDLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
II subclass: #CDLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:26'!
CDLXX class
	instanceVariableNames: ''!

!classDefinition: #CDLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
II subclass: #CDLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
CDLXXI class
	instanceVariableNames: ''!

!classDefinition: #CDLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
II subclass: #CDLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
CDLXXII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
II subclass: #CDLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
CDLXXIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
II subclass: #CDLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
CDLXXIV class
	instanceVariableNames: ''!

!classDefinition: #CDLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
II subclass: #CDLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:27'!
CDLXXV class
	instanceVariableNames: ''!

!classDefinition: #CDLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
II subclass: #CDLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
CDLXXVI class
	instanceVariableNames: ''!

!classDefinition: #CDLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
II subclass: #CDLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
CDLXXVII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
II subclass: #CDLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
CDLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
II subclass: #CDLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
CDLXXIX class
	instanceVariableNames: ''!

!classDefinition: #CDLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
II subclass: #CDLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:28'!
CDLXXX class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
II subclass: #CDLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
CDLXXXI class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
II subclass: #CDLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
CDLXXXII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
II subclass: #CDLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
CDLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
II subclass: #CDLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:29'!
CDLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
II subclass: #CDLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
CDLXXXV class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
II subclass: #CDLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
CDLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
II subclass: #CDLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
CDLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
II subclass: #CDLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
CDLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CDLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
II subclass: #CDLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:30'!
CDLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CDXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
II subclass: #CDXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
CDXC class
	instanceVariableNames: ''!

!classDefinition: #CDXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
II subclass: #CDXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
CDXCI class
	instanceVariableNames: ''!

!classDefinition: #CDXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
II subclass: #CDXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
CDXCII class
	instanceVariableNames: ''!

!classDefinition: #CDXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
II subclass: #CDXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:31'!
CDXCIII class
	instanceVariableNames: ''!

!classDefinition: #CDXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
II subclass: #CDXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
CDXCIV class
	instanceVariableNames: ''!

!classDefinition: #CDXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
II subclass: #CDXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
CDXCV class
	instanceVariableNames: ''!

!classDefinition: #CDXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
II subclass: #CDXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
CDXCVI class
	instanceVariableNames: ''!

!classDefinition: #CDXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
II subclass: #CDXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
CDXCVII class
	instanceVariableNames: ''!

!classDefinition: #CDXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
II subclass: #CDXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:32'!
CDXCVIII class
	instanceVariableNames: ''!

!classDefinition: #CDXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:33'!
II subclass: #CDXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CDXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:07:33'!
CDXCIX class
	instanceVariableNames: ''!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:08:01' prior: 50901176!
nombrarNext

	(self name endsWith: 'CDXCIX') ifTrue: [^(self name withoutSuffix: 'CDXCIX') , 'D'].

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !

C*V!

!classDefinition: #D category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:08:07'!
II subclass: #D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'D class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:08:07'!
D class
	instanceVariableNames: ''!
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:09:40' prior: 50905597!
nombrarNext

	(self name endsWith: 'DCCCXCIX') ifTrue: [^(self name withoutSuffix: 'DCCCXCIX') , 'CM'].

	(self name endsWith: 'CDXCIX') ifTrue: [^(self name withoutSuffix: 'CDXCIX') , 'D'].

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !
!II class methodsFor: 'next & previous' stamp: 'mf 4/11/2022 04:10:53' prior: 50905638!
nombrarNext

	(self name endsWith: 'CMXCIX') ifTrue: [^(self name withoutSuffix: 'CMXCIX') , 'M'].

	(self name endsWith: 'DCCCXCIX') ifTrue: [^(self name withoutSuffix: 'DCCCXCIX') , 'CM'].

	(self name endsWith: 'CDXCIX') ifTrue: [^(self name withoutSuffix: 'CDXCIX') , 'D'].

	(self name endsWith: 'CCCXCIX') ifTrue: [^(self name withoutSuffix: 'CCCXCIX') , 'CD'].
	
	(self name endsWith: 'XCIX') ifTrue: [^(self name withoutSuffix: 'XCIX') , 'C'].
	
	(self name endsWith: 'LXXXIX') ifTrue: [^(self name withoutSuffix: 'LXXXIX') , 'XC'].
	
	(self name endsWith: 'XLIX') ifTrue: [^(self name withoutSuffix: 'XLIX') , 'L'].
	
	(self name endsWith: 'XXXIX') ifTrue: [^(self name withoutSuffix: 'XXXIX') , 'XL'].
	
	(self name endsWith: 'IX') ifTrue: [^(self name withoutSuffix: 'IX') , 'X'].
	
	(self name endsWith: 'VIII') ifTrue: [^(self name withoutSuffix: 'VIII') , 'IX'].
	
	(self name endsWith: 'IV') ifTrue: [^(self name withoutSuffix: 'IV') , 'V'].
	
	(self name endsWith: 'III') ifTrue: [^(self name withoutSuffix: 'III') , 'IV'].
	
	^self name , 'I'
	! !

D*II!

!classDefinition: #DI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
II subclass: #DI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
DI class
	instanceVariableNames: ''!

!classDefinition: #DII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
II subclass: #DII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
DII class
	instanceVariableNames: ''!

!classDefinition: #DIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
II subclass: #DIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
DIII class
	instanceVariableNames: ''!

!classDefinition: #DIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
II subclass: #DIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:15'!
DIV class
	instanceVariableNames: ''!

!classDefinition: #DV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
II subclass: #DV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
DV class
	instanceVariableNames: ''!

!classDefinition: #DVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
II subclass: #DVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
DVI class
	instanceVariableNames: ''!

!classDefinition: #DVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
II subclass: #DVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
DVII class
	instanceVariableNames: ''!

!classDefinition: #DVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
II subclass: #DVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
DVIII class
	instanceVariableNames: ''!

!classDefinition: #DIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
II subclass: #DIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:16'!
DIX class
	instanceVariableNames: ''!

!classDefinition: #DX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
II subclass: #DX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
DX class
	instanceVariableNames: ''!

!classDefinition: #DXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
II subclass: #DXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
DXI class
	instanceVariableNames: ''!

!classDefinition: #DXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
II subclass: #DXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
DXII class
	instanceVariableNames: ''!

!classDefinition: #DXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
II subclass: #DXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:17'!
DXIII class
	instanceVariableNames: ''!

!classDefinition: #DXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
II subclass: #DXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
DXIV class
	instanceVariableNames: ''!

!classDefinition: #DXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
II subclass: #DXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
DXV class
	instanceVariableNames: ''!

!classDefinition: #DXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
II subclass: #DXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
DXVI class
	instanceVariableNames: ''!

!classDefinition: #DXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
II subclass: #DXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:18'!
DXVII class
	instanceVariableNames: ''!

!classDefinition: #DXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
II subclass: #DXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
DXVIII class
	instanceVariableNames: ''!

!classDefinition: #DXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
II subclass: #DXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
DXIX class
	instanceVariableNames: ''!

!classDefinition: #DXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
II subclass: #DXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
DXX class
	instanceVariableNames: ''!

!classDefinition: #DXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
II subclass: #DXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
DXXI class
	instanceVariableNames: ''!

!classDefinition: #DXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
II subclass: #DXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:19'!
DXXII class
	instanceVariableNames: ''!

!classDefinition: #DXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
II subclass: #DXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
DXXIII class
	instanceVariableNames: ''!

!classDefinition: #DXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
II subclass: #DXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
DXXIV class
	instanceVariableNames: ''!

!classDefinition: #DXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
II subclass: #DXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
DXXV class
	instanceVariableNames: ''!

!classDefinition: #DXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
II subclass: #DXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:20'!
DXXVI class
	instanceVariableNames: ''!

!classDefinition: #DXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
II subclass: #DXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
DXXVII class
	instanceVariableNames: ''!

!classDefinition: #DXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
II subclass: #DXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
DXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
II subclass: #DXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
DXXIX class
	instanceVariableNames: ''!

!classDefinition: #DXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
II subclass: #DXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:21'!
DXXX class
	instanceVariableNames: ''!

!classDefinition: #DXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
II subclass: #DXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
DXXXI class
	instanceVariableNames: ''!

!classDefinition: #DXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
II subclass: #DXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
DXXXII class
	instanceVariableNames: ''!

!classDefinition: #DXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
II subclass: #DXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
DXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
II subclass: #DXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:22'!
DXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
II subclass: #DXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
DXXXV class
	instanceVariableNames: ''!

!classDefinition: #DXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
II subclass: #DXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
DXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
II subclass: #DXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
DXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
II subclass: #DXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:23'!
DXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
II subclass: #DXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
DXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
II subclass: #DXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
DXL class
	instanceVariableNames: ''!

!classDefinition: #DXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
II subclass: #DXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
DXLI class
	instanceVariableNames: ''!

!classDefinition: #DXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
II subclass: #DXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:24'!
DXLII class
	instanceVariableNames: ''!

!classDefinition: #DXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
II subclass: #DXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
DXLIII class
	instanceVariableNames: ''!

!classDefinition: #DXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
II subclass: #DXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
DXLIV class
	instanceVariableNames: ''!

!classDefinition: #DXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
II subclass: #DXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
DXLV class
	instanceVariableNames: ''!

!classDefinition: #DXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
II subclass: #DXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:25'!
DXLVI class
	instanceVariableNames: ''!

!classDefinition: #DXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
II subclass: #DXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
DXLVII class
	instanceVariableNames: ''!

!classDefinition: #DXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
II subclass: #DXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
DXLVIII class
	instanceVariableNames: ''!

!classDefinition: #DXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
II subclass: #DXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
DXLIX class
	instanceVariableNames: ''!

!classDefinition: #DL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
II subclass: #DL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:26'!
DL class
	instanceVariableNames: ''!

!classDefinition: #DLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
II subclass: #DLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
DLI class
	instanceVariableNames: ''!

!classDefinition: #DLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
II subclass: #DLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
DLII class
	instanceVariableNames: ''!

!classDefinition: #DLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
II subclass: #DLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
DLIII class
	instanceVariableNames: ''!

!classDefinition: #DLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:27'!
II subclass: #DLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
DLIV class
	instanceVariableNames: ''!

!classDefinition: #DLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
II subclass: #DLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
DLV class
	instanceVariableNames: ''!

!classDefinition: #DLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
II subclass: #DLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
DLVI class
	instanceVariableNames: ''!

!classDefinition: #DLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
II subclass: #DLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:28'!
DLVII class
	instanceVariableNames: ''!

!classDefinition: #DLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
II subclass: #DLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
DLVIII class
	instanceVariableNames: ''!

!classDefinition: #DLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
II subclass: #DLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
DLIX class
	instanceVariableNames: ''!

!classDefinition: #DLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
II subclass: #DLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
DLX class
	instanceVariableNames: ''!

!classDefinition: #DLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
II subclass: #DLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:29'!
DLXI class
	instanceVariableNames: ''!

!classDefinition: #DLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
II subclass: #DLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
DLXII class
	instanceVariableNames: ''!

!classDefinition: #DLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
II subclass: #DLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
DLXIII class
	instanceVariableNames: ''!

!classDefinition: #DLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
II subclass: #DLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:30'!
DLXIV class
	instanceVariableNames: ''!

!classDefinition: #DLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
II subclass: #DLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
DLXV class
	instanceVariableNames: ''!

!classDefinition: #DLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
II subclass: #DLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
DLXVI class
	instanceVariableNames: ''!

!classDefinition: #DLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
II subclass: #DLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:31'!
DLXVII class
	instanceVariableNames: ''!

!classDefinition: #DLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
II subclass: #DLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
DLXVIII class
	instanceVariableNames: ''!

!classDefinition: #DLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
II subclass: #DLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
DLXIX class
	instanceVariableNames: ''!

!classDefinition: #DLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
II subclass: #DLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:32'!
DLXX class
	instanceVariableNames: ''!

!classDefinition: #DLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
II subclass: #DLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
DLXXI class
	instanceVariableNames: ''!

!classDefinition: #DLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
II subclass: #DLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
DLXXII class
	instanceVariableNames: ''!

!classDefinition: #DLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
II subclass: #DLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
DLXXIII class
	instanceVariableNames: ''!

!classDefinition: #DLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:33'!
II subclass: #DLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
DLXXIV class
	instanceVariableNames: ''!

!classDefinition: #DLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
II subclass: #DLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
DLXXV class
	instanceVariableNames: ''!

!classDefinition: #DLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
II subclass: #DLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
DLXXVI class
	instanceVariableNames: ''!

!classDefinition: #DLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
II subclass: #DLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:34'!
DLXXVII class
	instanceVariableNames: ''!

!classDefinition: #DLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
II subclass: #DLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
DLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
II subclass: #DLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
DLXXIX class
	instanceVariableNames: ''!

!classDefinition: #DLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
II subclass: #DLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:35'!
DLXXX class
	instanceVariableNames: ''!

!classDefinition: #DLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
II subclass: #DLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
DLXXXI class
	instanceVariableNames: ''!

!classDefinition: #DLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
II subclass: #DLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
DLXXXII class
	instanceVariableNames: ''!

!classDefinition: #DLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
II subclass: #DLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:36'!
DLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
II subclass: #DLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
DLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
II subclass: #DLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
DLXXXV class
	instanceVariableNames: ''!

!classDefinition: #DLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
II subclass: #DLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
DLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
II subclass: #DLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:37'!
DLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
II subclass: #DLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
DLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
II subclass: #DLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
DLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
II subclass: #DXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:38'!
DXC class
	instanceVariableNames: ''!

!classDefinition: #DXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
II subclass: #DXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
DXCI class
	instanceVariableNames: ''!

!classDefinition: #DXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
II subclass: #DXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
DXCII class
	instanceVariableNames: ''!

!classDefinition: #DXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
II subclass: #DXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
DXCIII class
	instanceVariableNames: ''!

!classDefinition: #DXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
II subclass: #DXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:39'!
DXCIV class
	instanceVariableNames: ''!

!classDefinition: #DXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
II subclass: #DXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
DXCV class
	instanceVariableNames: ''!

!classDefinition: #DXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
II subclass: #DXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
DXCVI class
	instanceVariableNames: ''!

!classDefinition: #DXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
II subclass: #DXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
DXCVII class
	instanceVariableNames: ''!

!classDefinition: #DXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:40'!
II subclass: #DXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
DXCVIII class
	instanceVariableNames: ''!

!classDefinition: #DXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
II subclass: #DXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
DXCIX class
	instanceVariableNames: ''!

!classDefinition: #DC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
II subclass: #DC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
DC class
	instanceVariableNames: ''!

!classDefinition: #DCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
II subclass: #DCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:41'!
DCI class
	instanceVariableNames: ''!

!classDefinition: #DCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
II subclass: #DCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
DCII class
	instanceVariableNames: ''!

!classDefinition: #DCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
II subclass: #DCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
DCIII class
	instanceVariableNames: ''!

!classDefinition: #DCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
II subclass: #DCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
DCIV class
	instanceVariableNames: ''!

!classDefinition: #DCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
II subclass: #DCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:42'!
DCV class
	instanceVariableNames: ''!

!classDefinition: #DCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
II subclass: #DCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
DCVI class
	instanceVariableNames: ''!

!classDefinition: #DCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
II subclass: #DCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
DCVII class
	instanceVariableNames: ''!

!classDefinition: #DCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
II subclass: #DCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:43'!
DCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
II subclass: #DCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
DCIX class
	instanceVariableNames: ''!

!classDefinition: #DCX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
II subclass: #DCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
DCX class
	instanceVariableNames: ''!

!classDefinition: #DCXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
II subclass: #DCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:44'!
DCXI class
	instanceVariableNames: ''!

!classDefinition: #DCXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
II subclass: #DCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
DCXII class
	instanceVariableNames: ''!

!classDefinition: #DCXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
II subclass: #DCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
DCXIII class
	instanceVariableNames: ''!

!classDefinition: #DCXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
II subclass: #DCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
DCXIV class
	instanceVariableNames: ''!

!classDefinition: #DCXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:45'!
II subclass: #DCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
DCXV class
	instanceVariableNames: ''!

!classDefinition: #DCXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
II subclass: #DCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
DCXVI class
	instanceVariableNames: ''!

!classDefinition: #DCXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
II subclass: #DCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
DCXVII class
	instanceVariableNames: ''!

!classDefinition: #DCXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
II subclass: #DCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:46'!
DCXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
II subclass: #DCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
DCXIX class
	instanceVariableNames: ''!

!classDefinition: #DCXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
II subclass: #DCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
DCXX class
	instanceVariableNames: ''!

!classDefinition: #DCXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
II subclass: #DCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:47'!
DCXXI class
	instanceVariableNames: ''!

!classDefinition: #DCXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
II subclass: #DCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
DCXXII class
	instanceVariableNames: ''!

!classDefinition: #DCXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
II subclass: #DCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
DCXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
II subclass: #DCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
DCXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
II subclass: #DCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:48'!
DCXXV class
	instanceVariableNames: ''!

!classDefinition: #DCXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
II subclass: #DCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
DCXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
II subclass: #DCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
DCXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
II subclass: #DCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:49'!
DCXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
II subclass: #DCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
DCXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
II subclass: #DCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
DCXXX class
	instanceVariableNames: ''!

!classDefinition: #DCXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
II subclass: #DCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:50'!
DCXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
II subclass: #DCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
DCXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
II subclass: #DCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
DCXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
II subclass: #DCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:51'!
DCXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
II subclass: #DCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
DCXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
II subclass: #DCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
DCXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
II subclass: #DCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
DCXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
II subclass: #DCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:52'!
DCXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
II subclass: #DCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
DCXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
II subclass: #DCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
DCXL class
	instanceVariableNames: ''!

!classDefinition: #DCXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
II subclass: #DCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:53'!
DCXLI class
	instanceVariableNames: ''!

!classDefinition: #DCXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
II subclass: #DCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
DCXLII class
	instanceVariableNames: ''!

!classDefinition: #DCXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
II subclass: #DCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
DCXLIII class
	instanceVariableNames: ''!

!classDefinition: #DCXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
II subclass: #DCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:54'!
DCXLIV class
	instanceVariableNames: ''!

!classDefinition: #DCXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
II subclass: #DCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
DCXLV class
	instanceVariableNames: ''!

!classDefinition: #DCXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
II subclass: #DCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
DCXLVI class
	instanceVariableNames: ''!

!classDefinition: #DCXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
II subclass: #DCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:55'!
DCXLVII class
	instanceVariableNames: ''!

!classDefinition: #DCXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
II subclass: #DCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
DCXLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
II subclass: #DCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
DCXLIX class
	instanceVariableNames: ''!

!classDefinition: #DCL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
II subclass: #DCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
DCL class
	instanceVariableNames: ''!

!classDefinition: #DCLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:56'!
II subclass: #DCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
DCLI class
	instanceVariableNames: ''!

!classDefinition: #DCLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
II subclass: #DCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
DCLII class
	instanceVariableNames: ''!

!classDefinition: #DCLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
II subclass: #DCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
DCLIII class
	instanceVariableNames: ''!

!classDefinition: #DCLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:57'!
II subclass: #DCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
DCLIV class
	instanceVariableNames: ''!

!classDefinition: #DCLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
II subclass: #DCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
DCLV class
	instanceVariableNames: ''!

!classDefinition: #DCLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
II subclass: #DCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
DCLVI class
	instanceVariableNames: ''!

!classDefinition: #DCLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
II subclass: #DCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:58'!
DCLVII class
	instanceVariableNames: ''!

!classDefinition: #DCLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
II subclass: #DCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
DCLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
II subclass: #DCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
DCLIX class
	instanceVariableNames: ''!

!classDefinition: #DCLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
II subclass: #DCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:11:59'!
DCLX class
	instanceVariableNames: ''!

!classDefinition: #DCLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
II subclass: #DCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
DCLXI class
	instanceVariableNames: ''!

!classDefinition: #DCLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
II subclass: #DCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
DCLXII class
	instanceVariableNames: ''!

!classDefinition: #DCLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
II subclass: #DCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:00'!
DCLXIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
II subclass: #DCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
DCLXIV class
	instanceVariableNames: ''!

!classDefinition: #DCLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
II subclass: #DCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
DCLXV class
	instanceVariableNames: ''!

!classDefinition: #DCLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
II subclass: #DCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:01'!
DCLXVI class
	instanceVariableNames: ''!

!classDefinition: #DCLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
II subclass: #DCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
DCLXVII class
	instanceVariableNames: ''!

!classDefinition: #DCLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
II subclass: #DCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
DCLXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
II subclass: #DCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:02'!
DCLXIX class
	instanceVariableNames: ''!

!classDefinition: #DCLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
II subclass: #DCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
DCLXX class
	instanceVariableNames: ''!

!classDefinition: #DCLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
II subclass: #DCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
DCLXXI class
	instanceVariableNames: ''!

!classDefinition: #DCLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
II subclass: #DCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:03'!
DCLXXII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
II subclass: #DCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
DCLXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
II subclass: #DCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
DCLXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
II subclass: #DCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:04'!
DCLXXV class
	instanceVariableNames: ''!

!classDefinition: #DCLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:05'!
II subclass: #DCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:05'!
DCLXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:05'!
II subclass: #DCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:05'!
DCLXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:05'!
II subclass: #DCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:06'!
DCLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:06'!
II subclass: #DCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:06'!
DCLXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:06'!
II subclass: #DCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:06'!
DCLXXX class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
II subclass: #DCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
DCLXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
II subclass: #DCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
DCLXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
II subclass: #DCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
DCLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:07'!
II subclass: #DCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:08'!
DCLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:08'!
II subclass: #DCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:08'!
DCLXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:08'!
II subclass: #DCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:08'!
DCLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
II subclass: #DCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
DCLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
II subclass: #DCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
DCLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
II subclass: #DCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:09'!
DCLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
II subclass: #DCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
DCXC class
	instanceVariableNames: ''!

!classDefinition: #DCXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
II subclass: #DCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
DCXCI class
	instanceVariableNames: ''!

!classDefinition: #DCXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
II subclass: #DCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:10'!
DCXCII class
	instanceVariableNames: ''!

!classDefinition: #DCXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
II subclass: #DCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
DCXCIII class
	instanceVariableNames: ''!

!classDefinition: #DCXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
II subclass: #DCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
DCXCIV class
	instanceVariableNames: ''!

!classDefinition: #DCXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
II subclass: #DCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:11'!
DCXCV class
	instanceVariableNames: ''!

!classDefinition: #DCXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
II subclass: #DCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
DCXCVI class
	instanceVariableNames: ''!

!classDefinition: #DCXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
II subclass: #DCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
DCXCVII class
	instanceVariableNames: ''!

!classDefinition: #DCXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
II subclass: #DCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:12'!
DCXCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
II subclass: #DCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
DCXCIX class
	instanceVariableNames: ''!

!classDefinition: #DCC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
II subclass: #DCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
DCC class
	instanceVariableNames: ''!

!classDefinition: #DCCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
II subclass: #DCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:13'!
DCCI class
	instanceVariableNames: ''!

!classDefinition: #DCCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:14'!
II subclass: #DCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:14'!
DCCII class
	instanceVariableNames: ''!

!classDefinition: #DCCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:14'!
II subclass: #DCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:14'!
DCCIII class
	instanceVariableNames: ''!

!classDefinition: #DCCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
II subclass: #DCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
DCCIV class
	instanceVariableNames: ''!

!classDefinition: #DCCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
II subclass: #DCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
DCCV class
	instanceVariableNames: ''!

!classDefinition: #DCCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
II subclass: #DCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:15'!
DCCVI class
	instanceVariableNames: ''!

!classDefinition: #DCCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
II subclass: #DCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
DCCVII class
	instanceVariableNames: ''!

!classDefinition: #DCCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
II subclass: #DCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
DCCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
II subclass: #DCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:16'!
DCCIX class
	instanceVariableNames: ''!

!classDefinition: #DCCX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
II subclass: #DCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
DCCX class
	instanceVariableNames: ''!

!classDefinition: #DCCXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
II subclass: #DCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
DCCXI class
	instanceVariableNames: ''!

!classDefinition: #DCCXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
II subclass: #DCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:17'!
DCCXII class
	instanceVariableNames: ''!

!classDefinition: #DCCXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:18'!
II subclass: #DCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:18'!
DCCXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:18'!
II subclass: #DCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:18'!
DCCXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:18'!
II subclass: #DCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:19'!
DCCXV class
	instanceVariableNames: ''!

!classDefinition: #DCCXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:19'!
II subclass: #DCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:19'!
DCCXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:19'!
II subclass: #DCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:19'!
DCCXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
II subclass: #DCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
DCCXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
II subclass: #DCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
DCCXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
II subclass: #DCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:20'!
DCCXX class
	instanceVariableNames: ''!

!classDefinition: #DCCXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
II subclass: #DCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
DCCXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
II subclass: #DCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
DCCXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
II subclass: #DCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:21'!
DCCXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:22'!
II subclass: #DCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:22'!
DCCXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:22'!
II subclass: #DCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:22'!
DCCXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
II subclass: #DCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
DCCXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
II subclass: #DCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
DCCXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
II subclass: #DCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:23'!
DCCXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:24'!
II subclass: #DCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:24'!
DCCXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:24'!
II subclass: #DCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:24'!
DCCXXX class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:24'!
II subclass: #DCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:25'!
DCCXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:25'!
II subclass: #DCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:25'!
DCCXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:25'!
II subclass: #DCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:25'!
DCCXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
II subclass: #DCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
DCCXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
II subclass: #DCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
DCCXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
II subclass: #DCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:26'!
DCCXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:27'!
II subclass: #DCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:27'!
DCCXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:27'!
II subclass: #DCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:27'!
DCCXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
II subclass: #DCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
DCCXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
II subclass: #DCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
DCCXL class
	instanceVariableNames: ''!

!classDefinition: #DCCXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
II subclass: #DCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:28'!
DCCXLI class
	instanceVariableNames: ''!

!classDefinition: #DCCXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:29'!
II subclass: #DCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:29'!
DCCXLII class
	instanceVariableNames: ''!

!classDefinition: #DCCXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:29'!
II subclass: #DCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:29'!
DCCXLIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:29'!
II subclass: #DCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:30'!
DCCXLIV class
	instanceVariableNames: ''!

!classDefinition: #DCCXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:30'!
II subclass: #DCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:30'!
DCCXLV class
	instanceVariableNames: ''!

!classDefinition: #DCCXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:30'!
II subclass: #DCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:30'!
DCCXLVI class
	instanceVariableNames: ''!

!classDefinition: #DCCXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
II subclass: #DCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
DCCXLVII class
	instanceVariableNames: ''!

!classDefinition: #DCCXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
II subclass: #DCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
DCCXLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
II subclass: #DCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:31'!
DCCXLIX class
	instanceVariableNames: ''!

!classDefinition: #DCCL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:32'!
II subclass: #DCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:32'!
DCCL class
	instanceVariableNames: ''!

!classDefinition: #DCCLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:32'!
II subclass: #DCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:32'!
DCCLI class
	instanceVariableNames: ''!

!classDefinition: #DCCLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
II subclass: #DCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
DCCLII class
	instanceVariableNames: ''!

!classDefinition: #DCCLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
II subclass: #DCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
DCCLIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
II subclass: #DCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:33'!
DCCLIV class
	instanceVariableNames: ''!

!classDefinition: #DCCLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:34'!
II subclass: #DCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:34'!
DCCLV class
	instanceVariableNames: ''!

!classDefinition: #DCCLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:34'!
II subclass: #DCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:34'!
DCCLVI class
	instanceVariableNames: ''!

!classDefinition: #DCCLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
II subclass: #DCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
DCCLVII class
	instanceVariableNames: ''!

!classDefinition: #DCCLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
II subclass: #DCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
DCCLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
II subclass: #DCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:35'!
DCCLIX class
	instanceVariableNames: ''!

!classDefinition: #DCCLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:36'!
II subclass: #DCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:36'!
DCCLX class
	instanceVariableNames: ''!

!classDefinition: #DCCLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:36'!
II subclass: #DCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:36'!
DCCLXI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
II subclass: #DCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
DCCLXII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
II subclass: #DCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
DCCLXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
II subclass: #DCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:37'!
DCCLXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:38'!
II subclass: #DCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:38'!
DCCLXV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:38'!
II subclass: #DCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:38'!
DCCLXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:39'!
II subclass: #DCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:39'!
DCCLXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:39'!
II subclass: #DCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:39'!
DCCLXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
II subclass: #DCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
DCCLXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
II subclass: #DCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
DCCLXX class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
II subclass: #DCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:40'!
DCCLXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:41'!
II subclass: #DCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:41'!
DCCLXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:41'!
II subclass: #DCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:41'!
DCCLXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:42'!
II subclass: #DCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:42'!
DCCLXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:42'!
II subclass: #DCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:42'!
DCCLXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
II subclass: #DCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
DCCLXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
II subclass: #DCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
DCCLXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
II subclass: #DCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:43'!
DCCLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:44'!
II subclass: #DCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:44'!
DCCLXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:44'!
II subclass: #DCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:44'!
DCCLXXX class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:45'!
II subclass: #DCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:45'!
DCCLXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:45'!
II subclass: #DCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:45'!
DCCLXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
II subclass: #DCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
DCCLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
II subclass: #DCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
DCCLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
II subclass: #DCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:46'!
DCCLXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:47'!
II subclass: #DCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:47'!
DCCLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:47'!
II subclass: #DCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:47'!
DCCLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:48'!
II subclass: #DCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:48'!
DCCLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:48'!
II subclass: #DCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:48'!
DCCLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:49'!
II subclass: #DCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:49'!
DCCXC class
	instanceVariableNames: ''!

!classDefinition: #DCCXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:49'!
II subclass: #DCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:49'!
DCCXCI class
	instanceVariableNames: ''!

!classDefinition: #DCCXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:49'!
II subclass: #DCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:50'!
DCCXCII class
	instanceVariableNames: ''!

!classDefinition: #DCCXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:50'!
II subclass: #DCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:50'!
DCCXCIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:50'!
II subclass: #DCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:50'!
DCCXCIV class
	instanceVariableNames: ''!

!classDefinition: #DCCXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:51'!
II subclass: #DCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:51'!
DCCXCV class
	instanceVariableNames: ''!

!classDefinition: #DCCXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:51'!
II subclass: #DCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:51'!
DCCXCVI class
	instanceVariableNames: ''!

!classDefinition: #DCCXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:52'!
II subclass: #DCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:52'!
DCCXCVII class
	instanceVariableNames: ''!

!classDefinition: #DCCXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:52'!
II subclass: #DCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:52'!
DCCXCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:53'!
II subclass: #DCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:53'!
DCCXCIX class
	instanceVariableNames: ''!

!classDefinition: #DCCC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:53'!
II subclass: #DCCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:53'!
DCCC class
	instanceVariableNames: ''!

!classDefinition: #DCCCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:54'!
II subclass: #DCCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:54'!
DCCCI class
	instanceVariableNames: ''!

!classDefinition: #DCCCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:54'!
II subclass: #DCCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:54'!
DCCCII class
	instanceVariableNames: ''!

!classDefinition: #DCCCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
II subclass: #DCCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
DCCCIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
II subclass: #DCCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
DCCCIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
II subclass: #DCCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:55'!
DCCCV class
	instanceVariableNames: ''!

!classDefinition: #DCCCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:56'!
II subclass: #DCCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:56'!
DCCCVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:56'!
II subclass: #DCCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:56'!
DCCCVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:57'!
II subclass: #DCCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:57'!
DCCCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:57'!
II subclass: #DCCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:57'!
DCCCIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:58'!
II subclass: #DCCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:58'!
DCCCX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:58'!
II subclass: #DCCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:58'!
DCCCXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
II subclass: #DCCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
DCCCXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
II subclass: #DCCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
DCCCXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
II subclass: #DCCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:12:59'!
DCCCXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:00'!
II subclass: #DCCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:00'!
DCCCXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:00'!
II subclass: #DCCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:00'!
DCCCXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:01'!
II subclass: #DCCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:01'!
DCCCXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:01'!
II subclass: #DCCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:01'!
DCCCXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:02'!
II subclass: #DCCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:02'!
DCCCXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:02'!
II subclass: #DCCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:02'!
DCCCXX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:03'!
II subclass: #DCCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:03'!
DCCCXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:03'!
II subclass: #DCCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:03'!
DCCCXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
II subclass: #DCCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
DCCCXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
II subclass: #DCCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
DCCCXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
II subclass: #DCCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:04'!
DCCCXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:05'!
II subclass: #DCCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:05'!
DCCCXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:05'!
II subclass: #DCCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:05'!
DCCCXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:06'!
II subclass: #DCCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:06'!
DCCCXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:06'!
II subclass: #DCCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:06'!
DCCCXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:07'!
II subclass: #DCCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:07'!
DCCCXXX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:07'!
II subclass: #DCCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:07'!
DCCCXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:08'!
II subclass: #DCCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:08'!
DCCCXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:08'!
II subclass: #DCCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:08'!
DCCCXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
II subclass: #DCCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
DCCCXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
II subclass: #DCCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
DCCCXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
II subclass: #DCCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:09'!
DCCCXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:10'!
II subclass: #DCCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:10'!
DCCCXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:10'!
II subclass: #DCCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:10'!
DCCCXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:11'!
II subclass: #DCCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:11'!
DCCCXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:11'!
II subclass: #DCCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:11'!
DCCCXL class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:12'!
II subclass: #DCCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:12'!
DCCCXLI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:12'!
II subclass: #DCCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:12'!
DCCCXLII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:13'!
II subclass: #DCCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:13'!
DCCCXLIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:13'!
II subclass: #DCCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:13'!
DCCCXLIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:14'!
II subclass: #DCCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:14'!
DCCCXLV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:14'!
II subclass: #DCCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:14'!
DCCCXLVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:15'!
II subclass: #DCCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:15'!
DCCCXLVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:15'!
II subclass: #DCCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:15'!
DCCCXLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
II subclass: #DCCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
DCCCXLIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
II subclass: #DCCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
DCCCL class
	instanceVariableNames: ''!

!classDefinition: #DCCCLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
II subclass: #DCCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:16'!
DCCCLI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:17'!
II subclass: #DCCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:17'!
DCCCLII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:17'!
II subclass: #DCCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:17'!
DCCCLIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:18'!
II subclass: #DCCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:18'!
DCCCLIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:18'!
II subclass: #DCCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:18'!
DCCCLV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:19'!
II subclass: #DCCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:19'!
DCCCLVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:19'!
II subclass: #DCCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:19'!
DCCCLVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:20'!
II subclass: #DCCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:20'!
DCCCLVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:20'!
II subclass: #DCCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:20'!
DCCCLIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:21'!
II subclass: #DCCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:21'!
DCCCLX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:21'!
II subclass: #DCCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:21'!
DCCCLXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:22'!
II subclass: #DCCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:22'!
DCCCLXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:22'!
II subclass: #DCCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:22'!
DCCCLXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:23'!
II subclass: #DCCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:23'!
DCCCLXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:23'!
II subclass: #DCCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:23'!
DCCCLXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:24'!
II subclass: #DCCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:24'!
DCCCLXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:25'!
II subclass: #DCCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:25'!
DCCCLXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:25'!
II subclass: #DCCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:25'!
DCCCLXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:26'!
II subclass: #DCCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:26'!
DCCCLXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:26'!
II subclass: #DCCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:26'!
DCCCLXX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:27'!
II subclass: #DCCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:27'!
DCCCLXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:27'!
II subclass: #DCCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:27'!
DCCCLXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:28'!
II subclass: #DCCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:28'!
DCCCLXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:28'!
II subclass: #DCCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:28'!
DCCCLXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:29'!
II subclass: #DCCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:29'!
DCCCLXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:29'!
II subclass: #DCCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:29'!
DCCCLXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:30'!
II subclass: #DCCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:30'!
DCCCLXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:31'!
II subclass: #DCCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:31'!
DCCCLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:31'!
II subclass: #DCCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:31'!
DCCCLXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:32'!
II subclass: #DCCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:32'!
DCCCLXXX class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:32'!
II subclass: #DCCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:32'!
DCCCLXXXI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:33'!
II subclass: #DCCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:33'!
DCCCLXXXII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:33'!
II subclass: #DCCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:33'!
DCCCLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:34'!
II subclass: #DCCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:34'!
DCCCLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:34'!
II subclass: #DCCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:34'!
DCCCLXXXV class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:35'!
II subclass: #DCCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:35'!
DCCCLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:35'!
II subclass: #DCCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:35'!
DCCCLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:36'!
II subclass: #DCCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:36'!
DCCCLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:37'!
II subclass: #DCCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:37'!
DCCCLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #DCCCXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:37'!
II subclass: #DCCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:37'!
DCCCXC class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:38'!
II subclass: #DCCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:38'!
DCCCXCI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:38'!
II subclass: #DCCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:38'!
DCCCXCII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:39'!
II subclass: #DCCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:39'!
DCCCXCIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:39'!
II subclass: #DCCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:39'!
DCCCXCIV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:40'!
II subclass: #DCCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:40'!
DCCCXCV class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:41'!
II subclass: #DCCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:41'!
DCCCXCVI class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:41'!
II subclass: #DCCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:41'!
DCCCXCVII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:42'!
II subclass: #DCCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:42'!
DCCCXCVIII class
	instanceVariableNames: ''!

!classDefinition: #DCCCXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:42'!
II subclass: #DCCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'DCCCXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:42'!
DCCCXCIX class
	instanceVariableNames: ''!

!classDefinition: #CM category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:43'!
II subclass: #CM
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CM class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:43'!
CM class
	instanceVariableNames: ''!

!classDefinition: #CMI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:43'!
II subclass: #CMI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:43'!
CMI class
	instanceVariableNames: ''!

!classDefinition: #CMII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:44'!
II subclass: #CMII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:44'!
CMII class
	instanceVariableNames: ''!

!classDefinition: #CMIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:44'!
II subclass: #CMIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:44'!
CMIII class
	instanceVariableNames: ''!

!classDefinition: #CMIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:45'!
II subclass: #CMIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:45'!
CMIV class
	instanceVariableNames: ''!

!classDefinition: #CMV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:45'!
II subclass: #CMV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:45'!
CMV class
	instanceVariableNames: ''!

!classDefinition: #CMVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:46'!
II subclass: #CMVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:46'!
CMVI class
	instanceVariableNames: ''!

!classDefinition: #CMVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:47'!
II subclass: #CMVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:47'!
CMVII class
	instanceVariableNames: ''!

!classDefinition: #CMVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:47'!
II subclass: #CMVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:47'!
CMVIII class
	instanceVariableNames: ''!

!classDefinition: #CMIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:48'!
II subclass: #CMIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:48'!
CMIX class
	instanceVariableNames: ''!

!classDefinition: #CMX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:48'!
II subclass: #CMX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:48'!
CMX class
	instanceVariableNames: ''!

!classDefinition: #CMXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:49'!
II subclass: #CMXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:49'!
CMXI class
	instanceVariableNames: ''!

!classDefinition: #CMXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:49'!
II subclass: #CMXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:49'!
CMXII class
	instanceVariableNames: ''!

!classDefinition: #CMXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:50'!
II subclass: #CMXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:50'!
CMXIII class
	instanceVariableNames: ''!

!classDefinition: #CMXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:51'!
II subclass: #CMXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:51'!
CMXIV class
	instanceVariableNames: ''!

!classDefinition: #CMXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:51'!
II subclass: #CMXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:51'!
CMXV class
	instanceVariableNames: ''!

!classDefinition: #CMXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:52'!
II subclass: #CMXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:52'!
CMXVI class
	instanceVariableNames: ''!

!classDefinition: #CMXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:52'!
II subclass: #CMXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:52'!
CMXVII class
	instanceVariableNames: ''!

!classDefinition: #CMXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:53'!
II subclass: #CMXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:53'!
CMXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:53'!
II subclass: #CMXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:53'!
CMXIX class
	instanceVariableNames: ''!

!classDefinition: #CMXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:54'!
II subclass: #CMXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:54'!
CMXX class
	instanceVariableNames: ''!

!classDefinition: #CMXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:55'!
II subclass: #CMXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:55'!
CMXXI class
	instanceVariableNames: ''!

!classDefinition: #CMXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:55'!
II subclass: #CMXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:55'!
CMXXII class
	instanceVariableNames: ''!

!classDefinition: #CMXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:56'!
II subclass: #CMXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:56'!
CMXXIII class
	instanceVariableNames: ''!

!classDefinition: #CMXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:56'!
II subclass: #CMXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:56'!
CMXXIV class
	instanceVariableNames: ''!

!classDefinition: #CMXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:57'!
II subclass: #CMXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:57'!
CMXXV class
	instanceVariableNames: ''!

!classDefinition: #CMXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:57'!
II subclass: #CMXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:57'!
CMXXVI class
	instanceVariableNames: ''!

!classDefinition: #CMXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:58'!
II subclass: #CMXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:58'!
CMXXVII class
	instanceVariableNames: ''!

!classDefinition: #CMXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:59'!
II subclass: #CMXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:59'!
CMXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:59'!
II subclass: #CMXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:13:59'!
CMXXIX class
	instanceVariableNames: ''!

!classDefinition: #CMXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:00'!
II subclass: #CMXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:00'!
CMXXX class
	instanceVariableNames: ''!

!classDefinition: #CMXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:00'!
II subclass: #CMXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:00'!
CMXXXI class
	instanceVariableNames: ''!

!classDefinition: #CMXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:01'!
II subclass: #CMXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:01'!
CMXXXII class
	instanceVariableNames: ''!

!classDefinition: #CMXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:01'!
II subclass: #CMXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:01'!
CMXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CMXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:02'!
II subclass: #CMXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:02'!
CMXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CMXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:02'!
II subclass: #CMXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:03'!
CMXXXV class
	instanceVariableNames: ''!

!classDefinition: #CMXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:03'!
II subclass: #CMXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:03'!
CMXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CMXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:04'!
II subclass: #CMXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:04'!
CMXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CMXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:04'!
II subclass: #CMXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:04'!
CMXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:05'!
II subclass: #CMXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:05'!
CMXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CMXL category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:05'!
II subclass: #CMXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXL class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:05'!
CMXL class
	instanceVariableNames: ''!

!classDefinition: #CMXLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:06'!
II subclass: #CMXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:06'!
CMXLI class
	instanceVariableNames: ''!

!classDefinition: #CMXLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:06'!
II subclass: #CMXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:06'!
CMXLII class
	instanceVariableNames: ''!

!classDefinition: #CMXLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:07'!
II subclass: #CMXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:07'!
CMXLIII class
	instanceVariableNames: ''!

!classDefinition: #CMXLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:08'!
II subclass: #CMXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:08'!
CMXLIV class
	instanceVariableNames: ''!

!classDefinition: #CMXLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:08'!
II subclass: #CMXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:08'!
CMXLV class
	instanceVariableNames: ''!

!classDefinition: #CMXLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:09'!
II subclass: #CMXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:09'!
CMXLVI class
	instanceVariableNames: ''!

!classDefinition: #CMXLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:09'!
II subclass: #CMXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:09'!
CMXLVII class
	instanceVariableNames: ''!

!classDefinition: #CMXLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:10'!
II subclass: #CMXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:10'!
CMXLVIII class
	instanceVariableNames: ''!

!classDefinition: #CMXLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:10'!
II subclass: #CMXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:10'!
CMXLIX class
	instanceVariableNames: ''!

!classDefinition: #CML category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:11'!
II subclass: #CML
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CML class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:11'!
CML class
	instanceVariableNames: ''!

!classDefinition: #CMLI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:12'!
II subclass: #CMLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:12'!
CMLI class
	instanceVariableNames: ''!

!classDefinition: #CMLII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:12'!
II subclass: #CMLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:12'!
CMLII class
	instanceVariableNames: ''!

!classDefinition: #CMLIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:13'!
II subclass: #CMLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:13'!
CMLIII class
	instanceVariableNames: ''!

!classDefinition: #CMLIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:13'!
II subclass: #CMLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:13'!
CMLIV class
	instanceVariableNames: ''!

!classDefinition: #CMLV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:14'!
II subclass: #CMLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:14'!
CMLV class
	instanceVariableNames: ''!

!classDefinition: #CMLVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:15'!
II subclass: #CMLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:15'!
CMLVI class
	instanceVariableNames: ''!

!classDefinition: #CMLVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:15'!
II subclass: #CMLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:15'!
CMLVII class
	instanceVariableNames: ''!

!classDefinition: #CMLVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:16'!
II subclass: #CMLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:16'!
CMLVIII class
	instanceVariableNames: ''!

!classDefinition: #CMLIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:16'!
II subclass: #CMLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:16'!
CMLIX class
	instanceVariableNames: ''!

!classDefinition: #CMLX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:17'!
II subclass: #CMLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:17'!
CMLX class
	instanceVariableNames: ''!

!classDefinition: #CMLXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:17'!
II subclass: #CMLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:18'!
CMLXI class
	instanceVariableNames: ''!

!classDefinition: #CMLXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:18'!
II subclass: #CMLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:18'!
CMLXII class
	instanceVariableNames: ''!

!classDefinition: #CMLXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:19'!
II subclass: #CMLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:19'!
CMLXIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:19'!
II subclass: #CMLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:19'!
CMLXIV class
	instanceVariableNames: ''!

!classDefinition: #CMLXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:20'!
II subclass: #CMLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:20'!
CMLXV class
	instanceVariableNames: ''!

!classDefinition: #CMLXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:20'!
II subclass: #CMLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:20'!
CMLXVI class
	instanceVariableNames: ''!

!classDefinition: #CMLXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:21'!
II subclass: #CMLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:21'!
CMLXVII class
	instanceVariableNames: ''!

!classDefinition: #CMLXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:22'!
II subclass: #CMLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:22'!
CMLXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:22'!
II subclass: #CMLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:22'!
CMLXIX class
	instanceVariableNames: ''!

!classDefinition: #CMLXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:23'!
II subclass: #CMLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:23'!
CMLXX class
	instanceVariableNames: ''!

!classDefinition: #CMLXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:23'!
II subclass: #CMLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:23'!
CMLXXI class
	instanceVariableNames: ''!

!classDefinition: #CMLXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:24'!
II subclass: #CMLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:24'!
CMLXXII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:25'!
II subclass: #CMLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:25'!
CMLXXIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:25'!
II subclass: #CMLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:25'!
CMLXXIV class
	instanceVariableNames: ''!

!classDefinition: #CMLXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:26'!
II subclass: #CMLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:26'!
CMLXXV class
	instanceVariableNames: ''!

!classDefinition: #CMLXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:27'!
II subclass: #CMLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:27'!
CMLXXVI class
	instanceVariableNames: ''!

!classDefinition: #CMLXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:27'!
II subclass: #CMLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:27'!
CMLXXVII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:28'!
II subclass: #CMLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:28'!
CMLXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:28'!
II subclass: #CMLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:28'!
CMLXXIX class
	instanceVariableNames: ''!

!classDefinition: #CMLXXX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:29'!
II subclass: #CMLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:29'!
CMLXXX class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:30'!
II subclass: #CMLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:30'!
CMLXXXI class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:30'!
II subclass: #CMLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:30'!
CMLXXXII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:31'!
II subclass: #CMLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:31'!
CMLXXXIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:32'!
II subclass: #CMLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:32'!
CMLXXXIV class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:32'!
II subclass: #CMLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:32'!
CMLXXXV class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:33'!
II subclass: #CMLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:33'!
CMLXXXVI class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:33'!
II subclass: #CMLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:33'!
CMLXXXVII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:34'!
II subclass: #CMLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:34'!
CMLXXXVIII class
	instanceVariableNames: ''!

!classDefinition: #CMLXXXIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:35'!
II subclass: #CMLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMLXXXIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:35'!
CMLXXXIX class
	instanceVariableNames: ''!

!classDefinition: #CMXC category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:35'!
II subclass: #CMXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXC class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:35'!
CMXC class
	instanceVariableNames: ''!

!classDefinition: #CMXCI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:36'!
II subclass: #CMXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:36'!
CMXCI class
	instanceVariableNames: ''!

!classDefinition: #CMXCII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:37'!
II subclass: #CMXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:37'!
CMXCII class
	instanceVariableNames: ''!

!classDefinition: #CMXCIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:37'!
II subclass: #CMXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:37'!
CMXCIII class
	instanceVariableNames: ''!

!classDefinition: #CMXCIV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:38'!
II subclass: #CMXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCIV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:38'!
CMXCIV class
	instanceVariableNames: ''!

!classDefinition: #CMXCV category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:39'!
II subclass: #CMXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCV class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:39'!
CMXCV class
	instanceVariableNames: ''!

!classDefinition: #CMXCVI category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:39'!
II subclass: #CMXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCVI class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:39'!
CMXCVI class
	instanceVariableNames: ''!

!classDefinition: #CMXCVII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:40'!
II subclass: #CMXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCVII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:40'!
CMXCVII class
	instanceVariableNames: ''!

!classDefinition: #CMXCVIII category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:41'!
II subclass: #CMXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCVIII class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:41'!
CMXCVIII class
	instanceVariableNames: ''!

!classDefinition: #CMXCIX category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:41'!
II subclass: #CMXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'CMXCIX class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:41'!
CMXCIX class
	instanceVariableNames: ''!

!classDefinition: #M category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:42'!
II subclass: #M
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classDefinition: 'M class' category: 'Numeros-Naturales' stamp: 'mf 4/11/2022 04:14:42'!
M class
	instanceVariableNames: ''!

----SNAPSHOT----(11 April 2022 04:14:51) CuisUniversity-4532.image priorSource: 18165303!

----SNAPSHOT----(11 April 2022 04:14:54) CuisUniversity-4532.image priorSource: 18546639!

----SNAPSHOT----(11 April 2022 04:14:58) CuisUniversity-4532.image priorSource: 18546730!

!methodRemoval: II class #siElNombreTerminaCon:elNombreDelSiguienteTerminaCon: stamp: 'mf 4/11/2022 04:15:14'!
siElNombreTerminaCon: elFinalDeUnNumeroRomano elNombreDelSiguienteTerminaCon: elFinalDelSiguienteNumeroRomano

	
	(self name endsWith: elFinalDeUnNumeroRomano) ifTrue: [^(self name withoutSuffix: elFinalDeUnNumeroRomano) , elFinalDeUnNumeroRomano].
	!

I
	collaboratorNames: ''
	in: 'Numeros-Romanos'!

!classDefinition: #I category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:19:21'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'I class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:19:21'!
I class
	instanceVariableNames: ''!

II
	collaboratorNames: 'next previous'
	in: 'Numeros-Romanos'!

!classDefinition: #II category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:19:35'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'II class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:19:35'!
II class
	instanceVariableNames: 'next previous'!

!classRemoval: #XXXVIII stamp: 'mf 4/11/2022 04:19:56'!
II subclass: #XXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXVII stamp: 'mf 4/11/2022 04:19:57'!
II subclass: #XXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXVI stamp: 'mf 4/11/2022 04:19:57'!
II subclass: #XXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXV stamp: 'mf 4/11/2022 04:19:58'!
II subclass: #XXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXIX stamp: 'mf 4/11/2022 04:19:59'!
II subclass: #XXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXIV stamp: 'mf 4/11/2022 04:19:59'!
II subclass: #XXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXIII stamp: 'mf 4/11/2022 04:20:00'!
II subclass: #XXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXII stamp: 'mf 4/11/2022 04:20:00'!
II subclass: #XXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXXI stamp: 'mf 4/11/2022 04:20:01'!
II subclass: #XXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXX stamp: 'mf 4/11/2022 04:20:02'!
II subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXVIII stamp: 'mf 4/11/2022 04:20:02'!
II subclass: #XXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXVII stamp: 'mf 4/11/2022 04:20:03'!
II subclass: #XXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXVI stamp: 'mf 4/11/2022 04:20:03'!
II subclass: #XXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXV stamp: 'mf 4/11/2022 04:20:04'!
II subclass: #XXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXIX stamp: 'mf 4/11/2022 04:20:05'!
II subclass: #XXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXIV stamp: 'mf 4/11/2022 04:20:05'!
II subclass: #XXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXIII stamp: 'mf 4/11/2022 04:20:06'!
II subclass: #XXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXII stamp: 'mf 4/11/2022 04:20:06'!
II subclass: #XXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XXI stamp: 'mf 4/11/2022 04:20:07'!
II subclass: #XXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XX stamp: 'mf 4/11/2022 04:20:07'!
II subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XVIII stamp: 'mf 4/11/2022 04:20:08'!
II subclass: #XVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XVII stamp: 'mf 4/11/2022 04:20:09'!
II subclass: #XVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XVI stamp: 'mf 4/11/2022 04:20:09'!
II subclass: #XVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XV stamp: 'mf 4/11/2022 04:20:10'!
II subclass: #XV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLVIII stamp: 'mf 4/11/2022 04:20:10'!
II subclass: #XLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLVII stamp: 'mf 4/11/2022 04:20:11'!
II subclass: #XLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLVI stamp: 'mf 4/11/2022 04:20:12'!
II subclass: #XLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLV stamp: 'mf 4/11/2022 04:20:12'!
II subclass: #XLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLIX stamp: 'mf 4/11/2022 04:20:13'!
II subclass: #XLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLIV stamp: 'mf 4/11/2022 04:20:14'!
II subclass: #XLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLIII stamp: 'mf 4/11/2022 04:20:14'!
II subclass: #XLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLII stamp: 'mf 4/11/2022 04:20:15'!
II subclass: #XLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XLI stamp: 'mf 4/11/2022 04:20:15'!
II subclass: #XLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XL stamp: 'mf 4/11/2022 04:20:16'!
II subclass: #XL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XIX stamp: 'mf 4/11/2022 04:20:17'!
II subclass: #XIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XIV stamp: 'mf 4/11/2022 04:20:17'!
II subclass: #XIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XIII stamp: 'mf 4/11/2022 04:20:18'!
II subclass: #XIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XII stamp: 'mf 4/11/2022 04:20:19'!
II subclass: #XII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XI stamp: 'mf 4/11/2022 04:20:19'!
II subclass: #XI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCVIII stamp: 'mf 4/11/2022 04:20:20'!
II subclass: #XCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCVII stamp: 'mf 4/11/2022 04:20:20'!
II subclass: #XCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCVI stamp: 'mf 4/11/2022 04:20:21'!
II subclass: #XCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCV stamp: 'mf 4/11/2022 04:20:22'!
II subclass: #XCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCIX stamp: 'mf 4/11/2022 04:20:22'!
II subclass: #XCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCIV stamp: 'mf 4/11/2022 04:20:23'!
II subclass: #XCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCIII stamp: 'mf 4/11/2022 04:20:24'!
II subclass: #XCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCII stamp: 'mf 4/11/2022 04:20:24'!
II subclass: #XCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XCI stamp: 'mf 4/11/2022 04:20:25'!
II subclass: #XCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #XC stamp: 'mf 4/11/2022 04:20:26'!
II subclass: #XC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #X stamp: 'mf 4/11/2022 04:20:26'!
II subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #VIII stamp: 'mf 4/11/2022 04:20:27'!
II subclass: #VIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #VII stamp: 'mf 4/11/2022 04:20:28'!
II subclass: #VII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #VI stamp: 'mf 4/11/2022 04:20:28'!
II subclass: #VI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #V stamp: 'mf 4/11/2022 04:20:29'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #M stamp: 'mf 4/11/2022 04:20:30'!
II subclass: #M
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXVIII stamp: 'mf 4/11/2022 04:20:30'!
II subclass: #LXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXVII stamp: 'mf 4/11/2022 04:20:31'!
II subclass: #LXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXVI stamp: 'mf 4/11/2022 04:20:32'!
II subclass: #LXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXV stamp: 'mf 4/11/2022 04:20:32'!
II subclass: #LXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXIX stamp: 'mf 4/11/2022 04:20:33'!
II subclass: #LXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXIV stamp: 'mf 4/11/2022 04:20:34'!
II subclass: #LXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXIII stamp: 'mf 4/11/2022 04:20:34'!
II subclass: #LXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXII stamp: 'mf 4/11/2022 04:20:35'!
II subclass: #LXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXXI stamp: 'mf 4/11/2022 04:20:35'!
II subclass: #LXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXX stamp: 'mf 4/11/2022 04:20:36'!
II subclass: #LXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXVIII stamp: 'mf 4/11/2022 04:20:37'!
II subclass: #LXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXVII stamp: 'mf 4/11/2022 04:20:37'!
II subclass: #LXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXVI stamp: 'mf 4/11/2022 04:20:38'!
II subclass: #LXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXV stamp: 'mf 4/11/2022 04:20:39'!
II subclass: #LXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXIX stamp: 'mf 4/11/2022 04:20:39'!
II subclass: #LXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXIV stamp: 'mf 4/11/2022 04:20:40'!
II subclass: #LXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXIII stamp: 'mf 4/11/2022 04:20:41'!
II subclass: #LXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXII stamp: 'mf 4/11/2022 04:20:41'!
II subclass: #LXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXXI stamp: 'mf 4/11/2022 04:20:42'!
II subclass: #LXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXX stamp: 'mf 4/11/2022 04:20:42'!
II subclass: #LXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXVIII stamp: 'mf 4/11/2022 04:20:43'!
II subclass: #LXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXVII stamp: 'mf 4/11/2022 04:20:44'!
II subclass: #LXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXVI stamp: 'mf 4/11/2022 04:20:44'!
II subclass: #LXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXV stamp: 'mf 4/11/2022 04:20:45'!
II subclass: #LXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXIX stamp: 'mf 4/11/2022 04:20:46'!
II subclass: #LXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXIV stamp: 'mf 4/11/2022 04:20:46'!
II subclass: #LXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXIII stamp: 'mf 4/11/2022 04:20:47'!
II subclass: #LXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXII stamp: 'mf 4/11/2022 04:20:48'!
II subclass: #LXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LXI stamp: 'mf 4/11/2022 04:20:48'!
II subclass: #LXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LX stamp: 'mf 4/11/2022 04:20:49'!
II subclass: #LX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LVIII stamp: 'mf 4/11/2022 04:20:49'!
II subclass: #LVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LVII stamp: 'mf 4/11/2022 04:20:50'!
II subclass: #LVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LVI stamp: 'mf 4/11/2022 04:20:51'!
II subclass: #LVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LV stamp: 'mf 4/11/2022 04:20:51'!
II subclass: #LV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LIX stamp: 'mf 4/11/2022 04:20:52'!
II subclass: #LIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LIV stamp: 'mf 4/11/2022 04:20:52'!
II subclass: #LIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LIII stamp: 'mf 4/11/2022 04:20:53'!
II subclass: #LIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LII stamp: 'mf 4/11/2022 04:20:53'!
II subclass: #LII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #LI stamp: 'mf 4/11/2022 04:20:54'!
II subclass: #LI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #L stamp: 'mf 4/11/2022 04:20:55'!
II subclass: #L
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IX stamp: 'mf 4/11/2022 04:20:55'!
II subclass: #IX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #IV stamp: 'mf 4/11/2022 04:20:56'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #III stamp: 'mf 4/11/2022 04:20:56'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXVIII stamp: 'mf 4/11/2022 04:20:57'!
II subclass: #DXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXVII stamp: 'mf 4/11/2022 04:20:58'!
II subclass: #DXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXVI stamp: 'mf 4/11/2022 04:20:58'!
II subclass: #DXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXV stamp: 'mf 4/11/2022 04:20:59'!
II subclass: #DXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXIX stamp: 'mf 4/11/2022 04:20:59'!
II subclass: #DXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXIV stamp: 'mf 4/11/2022 04:21:00'!
II subclass: #DXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXIII stamp: 'mf 4/11/2022 04:21:00'!
II subclass: #DXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXII stamp: 'mf 4/11/2022 04:21:01'!
II subclass: #DXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXXI stamp: 'mf 4/11/2022 04:21:02'!
II subclass: #DXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXX stamp: 'mf 4/11/2022 04:21:02'!
II subclass: #DXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXVIII stamp: 'mf 4/11/2022 04:21:03'!
II subclass: #DXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXVII stamp: 'mf 4/11/2022 04:21:03'!
II subclass: #DXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXVI stamp: 'mf 4/11/2022 04:21:04'!
II subclass: #DXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXV stamp: 'mf 4/11/2022 04:21:05'!
II subclass: #DXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXIX stamp: 'mf 4/11/2022 04:21:05'!
II subclass: #DXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXIV stamp: 'mf 4/11/2022 04:21:06'!
II subclass: #DXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXIII stamp: 'mf 4/11/2022 04:21:06'!
II subclass: #DXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXII stamp: 'mf 4/11/2022 04:21:07'!
II subclass: #DXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXXI stamp: 'mf 4/11/2022 04:21:08'!
II subclass: #DXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXX stamp: 'mf 4/11/2022 04:21:08'!
II subclass: #DXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXVIII stamp: 'mf 4/11/2022 04:21:09'!
II subclass: #DXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXVII stamp: 'mf 4/11/2022 04:21:09'!
II subclass: #DXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXVI stamp: 'mf 4/11/2022 04:21:10'!
II subclass: #DXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXV stamp: 'mf 4/11/2022 04:21:10'!
II subclass: #DXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLVIII stamp: 'mf 4/11/2022 04:21:11'!
II subclass: #DXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLVII stamp: 'mf 4/11/2022 04:21:12'!
II subclass: #DXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLVI stamp: 'mf 4/11/2022 04:21:12'!
II subclass: #DXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLV stamp: 'mf 4/11/2022 04:21:13'!
II subclass: #DXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLIX stamp: 'mf 4/11/2022 04:21:14'!
II subclass: #DXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLIV stamp: 'mf 4/11/2022 04:21:14'!
II subclass: #DXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLIII stamp: 'mf 4/11/2022 04:21:15'!
II subclass: #DXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLII stamp: 'mf 4/11/2022 04:21:15'!
II subclass: #DXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXLI stamp: 'mf 4/11/2022 04:21:16'!
II subclass: #DXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXL stamp: 'mf 4/11/2022 04:21:16'!
II subclass: #DXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXIX stamp: 'mf 4/11/2022 04:21:17'!
II subclass: #DXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXIV stamp: 'mf 4/11/2022 04:21:18'!
II subclass: #DXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXIII stamp: 'mf 4/11/2022 04:21:18'!
II subclass: #DXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXII stamp: 'mf 4/11/2022 04:21:19'!
II subclass: #DXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXI stamp: 'mf 4/11/2022 04:21:19'!
II subclass: #DXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCVIII stamp: 'mf 4/11/2022 04:21:20'!
II subclass: #DXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCVII stamp: 'mf 4/11/2022 04:21:20'!
II subclass: #DXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCVI stamp: 'mf 4/11/2022 04:21:21'!
II subclass: #DXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCV stamp: 'mf 4/11/2022 04:21:21'!
II subclass: #DXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCIX stamp: 'mf 4/11/2022 04:21:22'!
II subclass: #DXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCIV stamp: 'mf 4/11/2022 04:21:23'!
II subclass: #DXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCIII stamp: 'mf 4/11/2022 04:21:23'!
II subclass: #DXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCII stamp: 'mf 4/11/2022 04:21:24'!
II subclass: #DXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXCI stamp: 'mf 4/11/2022 04:21:24'!
II subclass: #DXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DXC stamp: 'mf 4/11/2022 04:21:25'!
II subclass: #DXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DX stamp: 'mf 4/11/2022 04:21:25'!
II subclass: #DX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DVIII stamp: 'mf 4/11/2022 04:21:26'!
II subclass: #DVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DVII stamp: 'mf 4/11/2022 04:21:26'!
II subclass: #DVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DVI stamp: 'mf 4/11/2022 04:21:27'!
II subclass: #DVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DV stamp: 'mf 4/11/2022 04:21:27'!
II subclass: #DV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXVIII stamp: 'mf 4/11/2022 04:21:28'!
II subclass: #DLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXVII stamp: 'mf 4/11/2022 04:21:28'!
II subclass: #DLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXVI stamp: 'mf 4/11/2022 04:21:29'!
II subclass: #DLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXV stamp: 'mf 4/11/2022 04:21:30'!
II subclass: #DLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXIX stamp: 'mf 4/11/2022 04:21:30'!
II subclass: #DLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXIV stamp: 'mf 4/11/2022 04:21:31'!
II subclass: #DLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXIII stamp: 'mf 4/11/2022 04:21:31'!
II subclass: #DLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXII stamp: 'mf 4/11/2022 04:21:32'!
II subclass: #DLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXXI stamp: 'mf 4/11/2022 04:21:32'!
II subclass: #DLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXX stamp: 'mf 4/11/2022 04:21:33'!
II subclass: #DLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXVIII stamp: 'mf 4/11/2022 04:21:34'!
II subclass: #DLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXVII stamp: 'mf 4/11/2022 04:21:34'!
II subclass: #DLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXVI stamp: 'mf 4/11/2022 04:21:35'!
II subclass: #DLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXV stamp: 'mf 4/11/2022 04:21:35'!
II subclass: #DLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXIX stamp: 'mf 4/11/2022 04:21:36'!
II subclass: #DLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXIV stamp: 'mf 4/11/2022 04:21:36'!
II subclass: #DLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXIII stamp: 'mf 4/11/2022 04:21:37'!
II subclass: #DLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXII stamp: 'mf 4/11/2022 04:21:37'!
II subclass: #DLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXXI stamp: 'mf 4/11/2022 04:21:38'!
II subclass: #DLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXX stamp: 'mf 4/11/2022 04:21:38'!
II subclass: #DLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXVIII stamp: 'mf 4/11/2022 04:21:39'!
II subclass: #DLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXVII stamp: 'mf 4/11/2022 04:21:39'!
II subclass: #DLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXVI stamp: 'mf 4/11/2022 04:21:40'!
II subclass: #DLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXV stamp: 'mf 4/11/2022 04:21:40'!
II subclass: #DLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXIX stamp: 'mf 4/11/2022 04:21:41'!
II subclass: #DLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXIV stamp: 'mf 4/11/2022 04:21:41'!
II subclass: #DLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXIII stamp: 'mf 4/11/2022 04:21:42'!
II subclass: #DLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXII stamp: 'mf 4/11/2022 04:21:42'!
II subclass: #DLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLXI stamp: 'mf 4/11/2022 04:21:42'!
II subclass: #DLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLX stamp: 'mf 4/11/2022 04:21:43'!
II subclass: #DLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLVIII stamp: 'mf 4/11/2022 04:21:43'!
II subclass: #DLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLVII stamp: 'mf 4/11/2022 04:21:44'!
II subclass: #DLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLVI stamp: 'mf 4/11/2022 04:21:44'!
II subclass: #DLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLV stamp: 'mf 4/11/2022 04:21:45'!
II subclass: #DLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLIX stamp: 'mf 4/11/2022 04:21:45'!
II subclass: #DLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLIV stamp: 'mf 4/11/2022 04:21:46'!
II subclass: #DLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLIII stamp: 'mf 4/11/2022 04:21:46'!
II subclass: #DLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLII stamp: 'mf 4/11/2022 04:21:47'!
II subclass: #DLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DLI stamp: 'mf 4/11/2022 04:21:47'!
II subclass: #DLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DL stamp: 'mf 4/11/2022 04:21:48'!
II subclass: #DL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DIX stamp: 'mf 4/11/2022 04:21:48'!
II subclass: #DIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DIV stamp: 'mf 4/11/2022 04:21:49'!
II subclass: #DIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DIII stamp: 'mf 4/11/2022 04:21:49'!
II subclass: #DIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DII stamp: 'mf 4/11/2022 04:21:50'!
II subclass: #DII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DI stamp: 'mf 4/11/2022 04:21:50'!
II subclass: #DI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXVIII stamp: 'mf 4/11/2022 04:21:51'!
II subclass: #DCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXVII stamp: 'mf 4/11/2022 04:21:51'!
II subclass: #DCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXVI stamp: 'mf 4/11/2022 04:21:52'!
II subclass: #DCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXV stamp: 'mf 4/11/2022 04:21:52'!
II subclass: #DCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXIX stamp: 'mf 4/11/2022 04:21:53'!
II subclass: #DCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXIV stamp: 'mf 4/11/2022 04:21:53'!
II subclass: #DCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXIII stamp: 'mf 4/11/2022 04:21:54'!
II subclass: #DCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXII stamp: 'mf 4/11/2022 04:21:54'!
II subclass: #DCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXXI stamp: 'mf 4/11/2022 04:21:55'!
II subclass: #DCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXX stamp: 'mf 4/11/2022 04:21:55'!
II subclass: #DCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXVIII stamp: 'mf 4/11/2022 04:21:56'!
II subclass: #DCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXVII stamp: 'mf 4/11/2022 04:21:56'!
II subclass: #DCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXVI stamp: 'mf 4/11/2022 04:21:57'!
II subclass: #DCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXV stamp: 'mf 4/11/2022 04:21:57'!
II subclass: #DCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXIX stamp: 'mf 4/11/2022 04:21:58'!
II subclass: #DCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXIV stamp: 'mf 4/11/2022 04:21:58'!
II subclass: #DCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXIII stamp: 'mf 4/11/2022 04:21:59'!
II subclass: #DCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXII stamp: 'mf 4/11/2022 04:21:59'!
II subclass: #DCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXXI stamp: 'mf 4/11/2022 04:22:00'!
II subclass: #DCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXX stamp: 'mf 4/11/2022 04:22:00'!
II subclass: #DCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXVIII stamp: 'mf 4/11/2022 04:22:00'!
II subclass: #DCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXVII stamp: 'mf 4/11/2022 04:22:01'!
II subclass: #DCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXVI stamp: 'mf 4/11/2022 04:22:01'!
II subclass: #DCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXV stamp: 'mf 4/11/2022 04:22:02'!
II subclass: #DCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLVIII stamp: 'mf 4/11/2022 04:22:02'!
II subclass: #DCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLVII stamp: 'mf 4/11/2022 04:22:03'!
II subclass: #DCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLVI stamp: 'mf 4/11/2022 04:22:03'!
II subclass: #DCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLV stamp: 'mf 4/11/2022 04:22:04'!
II subclass: #DCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLIX stamp: 'mf 4/11/2022 04:22:04'!
II subclass: #DCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLIV stamp: 'mf 4/11/2022 04:22:05'!
II subclass: #DCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLIII stamp: 'mf 4/11/2022 04:22:05'!
II subclass: #DCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLII stamp: 'mf 4/11/2022 04:22:06'!
II subclass: #DCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXLI stamp: 'mf 4/11/2022 04:22:06'!
II subclass: #DCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXL stamp: 'mf 4/11/2022 04:22:07'!
II subclass: #DCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXIX stamp: 'mf 4/11/2022 04:22:07'!
II subclass: #DCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXIV stamp: 'mf 4/11/2022 04:22:08'!
II subclass: #DCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXIII stamp: 'mf 4/11/2022 04:22:08'!
II subclass: #DCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXII stamp: 'mf 4/11/2022 04:22:08'!
II subclass: #DCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXI stamp: 'mf 4/11/2022 04:22:09'!
II subclass: #DCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCVIII stamp: 'mf 4/11/2022 04:22:09'!
II subclass: #DCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCVII stamp: 'mf 4/11/2022 04:22:10'!
II subclass: #DCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCVI stamp: 'mf 4/11/2022 04:22:10'!
II subclass: #DCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCV stamp: 'mf 4/11/2022 04:22:11'!
II subclass: #DCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCIX stamp: 'mf 4/11/2022 04:22:11'!
II subclass: #DCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCIV stamp: 'mf 4/11/2022 04:22:12'!
II subclass: #DCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCIII stamp: 'mf 4/11/2022 04:22:12'!
II subclass: #DCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCII stamp: 'mf 4/11/2022 04:22:13'!
II subclass: #DCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXCI stamp: 'mf 4/11/2022 04:22:13'!
II subclass: #DCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCXC stamp: 'mf 4/11/2022 04:22:14'!
II subclass: #DCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCX stamp: 'mf 4/11/2022 04:22:14'!
II subclass: #DCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCVIII stamp: 'mf 4/11/2022 04:22:15'!
II subclass: #DCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCVII stamp: 'mf 4/11/2022 04:22:15'!
II subclass: #DCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCVI stamp: 'mf 4/11/2022 04:22:15'!
II subclass: #DCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCV stamp: 'mf 4/11/2022 04:22:16'!
II subclass: #DCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXVIII stamp: 'mf 4/11/2022 04:22:16'!
II subclass: #DCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXVII stamp: 'mf 4/11/2022 04:22:17'!
II subclass: #DCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXVI stamp: 'mf 4/11/2022 04:22:17'!
II subclass: #DCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXV stamp: 'mf 4/11/2022 04:22:18'!
II subclass: #DCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXIX stamp: 'mf 4/11/2022 04:22:18'!
II subclass: #DCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXIV stamp: 'mf 4/11/2022 04:22:19'!
II subclass: #DCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXIII stamp: 'mf 4/11/2022 04:22:19'!
II subclass: #DCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXII stamp: 'mf 4/11/2022 04:22:20'!
II subclass: #DCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXXI stamp: 'mf 4/11/2022 04:22:20'!
II subclass: #DCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXX stamp: 'mf 4/11/2022 04:22:21'!
II subclass: #DCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXVIII stamp: 'mf 4/11/2022 04:22:21'!
II subclass: #DCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXVII stamp: 'mf 4/11/2022 04:22:22'!
II subclass: #DCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXVI stamp: 'mf 4/11/2022 04:22:22'!
II subclass: #DCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXV stamp: 'mf 4/11/2022 04:22:23'!
II subclass: #DCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXIX stamp: 'mf 4/11/2022 04:22:24'!
II subclass: #DCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXIV stamp: 'mf 4/11/2022 04:22:24'!
II subclass: #DCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXIII stamp: 'mf 4/11/2022 04:22:25'!
II subclass: #DCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXII stamp: 'mf 4/11/2022 04:22:25'!
II subclass: #DCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXXI stamp: 'mf 4/11/2022 04:22:26'!
II subclass: #DCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXX stamp: 'mf 4/11/2022 04:22:26'!
II subclass: #DCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXVIII stamp: 'mf 4/11/2022 04:22:27'!
II subclass: #DCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXVII stamp: 'mf 4/11/2022 04:22:28'!
II subclass: #DCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXVI stamp: 'mf 4/11/2022 04:22:28'!
II subclass: #DCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXV stamp: 'mf 4/11/2022 04:22:29'!
II subclass: #DCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXIX stamp: 'mf 4/11/2022 04:22:29'!
II subclass: #DCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXIV stamp: 'mf 4/11/2022 04:22:30'!
II subclass: #DCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXIII stamp: 'mf 4/11/2022 04:22:30'!
II subclass: #DCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXII stamp: 'mf 4/11/2022 04:22:31'!
II subclass: #DCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLXI stamp: 'mf 4/11/2022 04:22:31'!
II subclass: #DCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLX stamp: 'mf 4/11/2022 04:22:32'!
II subclass: #DCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLVIII stamp: 'mf 4/11/2022 04:22:32'!
II subclass: #DCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLVII stamp: 'mf 4/11/2022 04:22:33'!
II subclass: #DCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLVI stamp: 'mf 4/11/2022 04:22:33'!
II subclass: #DCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLV stamp: 'mf 4/11/2022 04:22:34'!
II subclass: #DCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLIX stamp: 'mf 4/11/2022 04:22:34'!
II subclass: #DCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLIV stamp: 'mf 4/11/2022 04:22:35'!
II subclass: #DCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLIII stamp: 'mf 4/11/2022 04:22:35'!
II subclass: #DCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLII stamp: 'mf 4/11/2022 04:22:36'!
II subclass: #DCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCLI stamp: 'mf 4/11/2022 04:22:36'!
II subclass: #DCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCL stamp: 'mf 4/11/2022 04:22:37'!
II subclass: #DCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCIX stamp: 'mf 4/11/2022 04:22:37'!
II subclass: #DCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCIV stamp: 'mf 4/11/2022 04:22:38'!
II subclass: #DCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCIII stamp: 'mf 4/11/2022 04:22:39'!
II subclass: #DCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCII stamp: 'mf 4/11/2022 04:22:39'!
II subclass: #DCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCI stamp: 'mf 4/11/2022 04:22:39'!
II subclass: #DCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXVIII stamp: 'mf 4/11/2022 04:22:40'!
II subclass: #DCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXVII stamp: 'mf 4/11/2022 04:22:40'!
II subclass: #DCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXVI stamp: 'mf 4/11/2022 04:22:41'!
II subclass: #DCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXV stamp: 'mf 4/11/2022 04:22:41'!
II subclass: #DCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXIX stamp: 'mf 4/11/2022 04:22:42'!
II subclass: #DCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXIV stamp: 'mf 4/11/2022 04:22:42'!
II subclass: #DCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXIII stamp: 'mf 4/11/2022 04:22:43'!
II subclass: #DCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXII stamp: 'mf 4/11/2022 04:22:43'!
II subclass: #DCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXXI stamp: 'mf 4/11/2022 04:22:44'!
II subclass: #DCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXX stamp: 'mf 4/11/2022 04:22:44'!
II subclass: #DCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXVIII stamp: 'mf 4/11/2022 04:22:45'!
II subclass: #DCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXVII stamp: 'mf 4/11/2022 04:22:45'!
II subclass: #DCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXVI stamp: 'mf 4/11/2022 04:22:46'!
II subclass: #DCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXV stamp: 'mf 4/11/2022 04:22:46'!
II subclass: #DCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXIX stamp: 'mf 4/11/2022 04:22:47'!
II subclass: #DCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXIV stamp: 'mf 4/11/2022 04:22:47'!
II subclass: #DCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXIII stamp: 'mf 4/11/2022 04:22:48'!
II subclass: #DCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXII stamp: 'mf 4/11/2022 04:22:48'!
II subclass: #DCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXXI stamp: 'mf 4/11/2022 04:22:49'!
II subclass: #DCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXX stamp: 'mf 4/11/2022 04:22:49'!
II subclass: #DCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXVIII stamp: 'mf 4/11/2022 04:22:50'!
II subclass: #DCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXVII stamp: 'mf 4/11/2022 04:22:50'!
II subclass: #DCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXVI stamp: 'mf 4/11/2022 04:22:51'!
II subclass: #DCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXV stamp: 'mf 4/11/2022 04:22:51'!
II subclass: #DCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLVIII stamp: 'mf 4/11/2022 04:22:52'!
II subclass: #DCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLVII stamp: 'mf 4/11/2022 04:22:52'!
II subclass: #DCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLVI stamp: 'mf 4/11/2022 04:22:53'!
II subclass: #DCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLV stamp: 'mf 4/11/2022 04:22:53'!
II subclass: #DCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLIX stamp: 'mf 4/11/2022 04:22:54'!
II subclass: #DCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLIV stamp: 'mf 4/11/2022 04:22:54'!
II subclass: #DCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLIII stamp: 'mf 4/11/2022 04:22:55'!
II subclass: #DCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLII stamp: 'mf 4/11/2022 04:22:56'!
II subclass: #DCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXLI stamp: 'mf 4/11/2022 04:22:56'!
II subclass: #DCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXL stamp: 'mf 4/11/2022 04:22:57'!
II subclass: #DCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXIX stamp: 'mf 4/11/2022 04:22:57'!
II subclass: #DCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXIV stamp: 'mf 4/11/2022 04:22:58'!
II subclass: #DCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXIII stamp: 'mf 4/11/2022 04:22:58'!
II subclass: #DCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXII stamp: 'mf 4/11/2022 04:22:59'!
II subclass: #DCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXI stamp: 'mf 4/11/2022 04:22:59'!
II subclass: #DCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCVIII stamp: 'mf 4/11/2022 04:23:00'!
II subclass: #DCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCVII stamp: 'mf 4/11/2022 04:23:00'!
II subclass: #DCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCVI stamp: 'mf 4/11/2022 04:23:01'!
II subclass: #DCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCV stamp: 'mf 4/11/2022 04:23:01'!
II subclass: #DCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCIX stamp: 'mf 4/11/2022 04:23:02'!
II subclass: #DCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCIV stamp: 'mf 4/11/2022 04:23:02'!
II subclass: #DCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCIII stamp: 'mf 4/11/2022 04:23:03'!
II subclass: #DCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCII stamp: 'mf 4/11/2022 04:23:03'!
II subclass: #DCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXCI stamp: 'mf 4/11/2022 04:23:04'!
II subclass: #DCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCXC stamp: 'mf 4/11/2022 04:23:04'!
II subclass: #DCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCX stamp: 'mf 4/11/2022 04:23:05'!
II subclass: #DCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCVIII stamp: 'mf 4/11/2022 04:23:05'!
II subclass: #DCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCVII stamp: 'mf 4/11/2022 04:23:06'!
II subclass: #DCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCVI stamp: 'mf 4/11/2022 04:23:06'!
II subclass: #DCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCV stamp: 'mf 4/11/2022 04:23:07'!
II subclass: #DCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXVIII stamp: 'mf 4/11/2022 04:23:07'!
II subclass: #DCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXVII stamp: 'mf 4/11/2022 04:23:08'!
II subclass: #DCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXVI stamp: 'mf 4/11/2022 04:23:08'!
II subclass: #DCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXV stamp: 'mf 4/11/2022 04:23:09'!
II subclass: #DCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXIX stamp: 'mf 4/11/2022 04:23:09'!
II subclass: #DCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXIV stamp: 'mf 4/11/2022 04:23:10'!
II subclass: #DCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXIII stamp: 'mf 4/11/2022 04:23:10'!
II subclass: #DCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXII stamp: 'mf 4/11/2022 04:23:11'!
II subclass: #DCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXXI stamp: 'mf 4/11/2022 04:23:11'!
II subclass: #DCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXX stamp: 'mf 4/11/2022 04:23:12'!
II subclass: #DCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXVIII stamp: 'mf 4/11/2022 04:23:12'!
II subclass: #DCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXVII stamp: 'mf 4/11/2022 04:23:13'!
II subclass: #DCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXVI stamp: 'mf 4/11/2022 04:23:13'!
II subclass: #DCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXV stamp: 'mf 4/11/2022 04:23:14'!
II subclass: #DCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXIX stamp: 'mf 4/11/2022 04:23:15'!
II subclass: #DCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXIV stamp: 'mf 4/11/2022 04:23:15'!
II subclass: #DCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXIII stamp: 'mf 4/11/2022 04:23:16'!
II subclass: #DCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXII stamp: 'mf 4/11/2022 04:23:16'!
II subclass: #DCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXXI stamp: 'mf 4/11/2022 04:23:17'!
II subclass: #DCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXX stamp: 'mf 4/11/2022 04:23:17'!
II subclass: #DCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXVIII stamp: 'mf 4/11/2022 04:23:18'!
II subclass: #DCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXVII stamp: 'mf 4/11/2022 04:23:18'!
II subclass: #DCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXVI stamp: 'mf 4/11/2022 04:23:19'!
II subclass: #DCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXV stamp: 'mf 4/11/2022 04:23:19'!
II subclass: #DCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXIX stamp: 'mf 4/11/2022 04:23:19'!
II subclass: #DCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXIV stamp: 'mf 4/11/2022 04:23:20'!
II subclass: #DCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXIII stamp: 'mf 4/11/2022 04:23:20'!
II subclass: #DCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXII stamp: 'mf 4/11/2022 04:23:21'!
II subclass: #DCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLXI stamp: 'mf 4/11/2022 04:23:21'!
II subclass: #DCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLX stamp: 'mf 4/11/2022 04:23:22'!
II subclass: #DCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLVIII stamp: 'mf 4/11/2022 04:23:22'!
II subclass: #DCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLVII stamp: 'mf 4/11/2022 04:23:23'!
II subclass: #DCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLVI stamp: 'mf 4/11/2022 04:23:23'!
II subclass: #DCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLV stamp: 'mf 4/11/2022 04:23:24'!
II subclass: #DCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLIX stamp: 'mf 4/11/2022 04:23:24'!
II subclass: #DCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLIV stamp: 'mf 4/11/2022 04:23:25'!
II subclass: #DCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLIII stamp: 'mf 4/11/2022 04:23:25'!
II subclass: #DCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLII stamp: 'mf 4/11/2022 04:23:26'!
II subclass: #DCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCLI stamp: 'mf 4/11/2022 04:23:26'!
II subclass: #DCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCL stamp: 'mf 4/11/2022 04:23:27'!
II subclass: #DCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCIX stamp: 'mf 4/11/2022 04:23:27'!
II subclass: #DCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCIV stamp: 'mf 4/11/2022 04:23:28'!
II subclass: #DCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCIII stamp: 'mf 4/11/2022 04:23:28'!
II subclass: #DCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCII stamp: 'mf 4/11/2022 04:23:28'!
II subclass: #DCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCI stamp: 'mf 4/11/2022 04:23:29'!
II subclass: #DCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXVIII stamp: 'mf 4/11/2022 04:23:29'!
II subclass: #DCCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXVII stamp: 'mf 4/11/2022 04:23:30'!
II subclass: #DCCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXVI stamp: 'mf 4/11/2022 04:23:30'!
II subclass: #DCCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXV stamp: 'mf 4/11/2022 04:23:31'!
II subclass: #DCCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXIX stamp: 'mf 4/11/2022 04:23:31'!
II subclass: #DCCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXIV stamp: 'mf 4/11/2022 04:23:32'!
II subclass: #DCCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXIII stamp: 'mf 4/11/2022 04:23:32'!
II subclass: #DCCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXII stamp: 'mf 4/11/2022 04:23:33'!
II subclass: #DCCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXXI stamp: 'mf 4/11/2022 04:23:33'!
II subclass: #DCCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXX stamp: 'mf 4/11/2022 04:23:34'!
II subclass: #DCCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXVIII stamp: 'mf 4/11/2022 04:23:34'!
II subclass: #DCCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXVII stamp: 'mf 4/11/2022 04:23:34'!
II subclass: #DCCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXVI stamp: 'mf 4/11/2022 04:23:35'!
II subclass: #DCCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXV stamp: 'mf 4/11/2022 04:23:35'!
II subclass: #DCCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXIX stamp: 'mf 4/11/2022 04:23:36'!
II subclass: #DCCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXIV stamp: 'mf 4/11/2022 04:23:36'!
II subclass: #DCCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXIII stamp: 'mf 4/11/2022 04:23:37'!
II subclass: #DCCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXII stamp: 'mf 4/11/2022 04:23:37'!
II subclass: #DCCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXXI stamp: 'mf 4/11/2022 04:23:38'!
II subclass: #DCCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXX stamp: 'mf 4/11/2022 04:23:38'!
II subclass: #DCCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXVIII stamp: 'mf 4/11/2022 04:23:38'!
II subclass: #DCCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXVII stamp: 'mf 4/11/2022 04:23:39'!
II subclass: #DCCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXVI stamp: 'mf 4/11/2022 04:23:39'!
II subclass: #DCCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXV stamp: 'mf 4/11/2022 04:23:40'!
II subclass: #DCCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLVIII stamp: 'mf 4/11/2022 04:23:40'!
II subclass: #DCCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLVII stamp: 'mf 4/11/2022 04:23:41'!
II subclass: #DCCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLVI stamp: 'mf 4/11/2022 04:23:41'!
II subclass: #DCCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLV stamp: 'mf 4/11/2022 04:23:41'!
II subclass: #DCCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLIX stamp: 'mf 4/11/2022 04:23:42'!
II subclass: #DCCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLIV stamp: 'mf 4/11/2022 04:23:42'!
II subclass: #DCCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLIII stamp: 'mf 4/11/2022 04:23:43'!
II subclass: #DCCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLII stamp: 'mf 4/11/2022 04:23:43'!
II subclass: #DCCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXLI stamp: 'mf 4/11/2022 04:23:44'!
II subclass: #DCCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXL stamp: 'mf 4/11/2022 04:23:44'!
II subclass: #DCCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXIX stamp: 'mf 4/11/2022 04:23:45'!
II subclass: #DCCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXIV stamp: 'mf 4/11/2022 04:23:45'!
II subclass: #DCCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXIII stamp: 'mf 4/11/2022 04:23:46'!
II subclass: #DCCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXII stamp: 'mf 4/11/2022 04:23:46'!
II subclass: #DCCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXI stamp: 'mf 4/11/2022 04:23:46'!
II subclass: #DCCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCVIII stamp: 'mf 4/11/2022 04:23:47'!
II subclass: #DCCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCVII stamp: 'mf 4/11/2022 04:23:47'!
II subclass: #DCCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCVI stamp: 'mf 4/11/2022 04:23:48'!
II subclass: #DCCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCV stamp: 'mf 4/11/2022 04:23:48'!
II subclass: #DCCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCIX stamp: 'mf 4/11/2022 04:23:49'!
II subclass: #DCCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCIV stamp: 'mf 4/11/2022 04:23:49'!
II subclass: #DCCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCIII stamp: 'mf 4/11/2022 04:23:50'!
II subclass: #DCCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCII stamp: 'mf 4/11/2022 04:23:50'!
II subclass: #DCCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXCI stamp: 'mf 4/11/2022 04:23:50'!
II subclass: #DCCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCXC stamp: 'mf 4/11/2022 04:23:51'!
II subclass: #DCCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCX stamp: 'mf 4/11/2022 04:23:51'!
II subclass: #DCCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCVIII stamp: 'mf 4/11/2022 04:23:52'!
II subclass: #DCCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCVII stamp: 'mf 4/11/2022 04:23:52'!
II subclass: #DCCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCVI stamp: 'mf 4/11/2022 04:23:53'!
II subclass: #DCCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCV stamp: 'mf 4/11/2022 04:23:53'!
II subclass: #DCCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXVIII stamp: 'mf 4/11/2022 04:23:53'!
II subclass: #DCCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXVII stamp: 'mf 4/11/2022 04:23:54'!
II subclass: #DCCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXVI stamp: 'mf 4/11/2022 04:23:54'!
II subclass: #DCCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXV stamp: 'mf 4/11/2022 04:23:55'!
II subclass: #DCCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXIX stamp: 'mf 4/11/2022 04:23:55'!
II subclass: #DCCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXIV stamp: 'mf 4/11/2022 04:23:56'!
II subclass: #DCCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXIII stamp: 'mf 4/11/2022 04:23:56'!
II subclass: #DCCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXII stamp: 'mf 4/11/2022 04:23:57'!
II subclass: #DCCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXXI stamp: 'mf 4/11/2022 04:23:57'!
II subclass: #DCCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXX stamp: 'mf 4/11/2022 04:23:57'!
II subclass: #DCCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXVIII stamp: 'mf 4/11/2022 04:23:58'!
II subclass: #DCCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXVII stamp: 'mf 4/11/2022 04:23:58'!
II subclass: #DCCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXVI stamp: 'mf 4/11/2022 04:23:59'!
II subclass: #DCCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXV stamp: 'mf 4/11/2022 04:23:59'!
II subclass: #DCCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXIX stamp: 'mf 4/11/2022 04:24:00'!
II subclass: #DCCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXIV stamp: 'mf 4/11/2022 04:24:00'!
II subclass: #DCCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXIII stamp: 'mf 4/11/2022 04:24:00'!
II subclass: #DCCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXII stamp: 'mf 4/11/2022 04:24:01'!
II subclass: #DCCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXXI stamp: 'mf 4/11/2022 04:24:01'!
II subclass: #DCCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXX stamp: 'mf 4/11/2022 04:24:02'!
II subclass: #DCCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXVIII stamp: 'mf 4/11/2022 04:24:02'!
II subclass: #DCCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXVII stamp: 'mf 4/11/2022 04:24:03'!
II subclass: #DCCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXVI stamp: 'mf 4/11/2022 04:24:03'!
II subclass: #DCCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXV stamp: 'mf 4/11/2022 04:24:04'!
II subclass: #DCCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXIX stamp: 'mf 4/11/2022 04:24:04'!
II subclass: #DCCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXIV stamp: 'mf 4/11/2022 04:24:04'!
II subclass: #DCCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXIII stamp: 'mf 4/11/2022 04:24:05'!
II subclass: #DCCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXII stamp: 'mf 4/11/2022 04:24:05'!
II subclass: #DCCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLXI stamp: 'mf 4/11/2022 04:24:06'!
II subclass: #DCCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLX stamp: 'mf 4/11/2022 04:24:06'!
II subclass: #DCCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLVIII stamp: 'mf 4/11/2022 04:24:06'!
II subclass: #DCCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLVII stamp: 'mf 4/11/2022 04:24:07'!
II subclass: #DCCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLVI stamp: 'mf 4/11/2022 04:24:07'!
II subclass: #DCCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLV stamp: 'mf 4/11/2022 04:24:08'!
II subclass: #DCCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLIX stamp: 'mf 4/11/2022 04:24:08'!
II subclass: #DCCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLIV stamp: 'mf 4/11/2022 04:24:09'!
II subclass: #DCCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLIII stamp: 'mf 4/11/2022 04:24:09'!
II subclass: #DCCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLII stamp: 'mf 4/11/2022 04:24:09'!
II subclass: #DCCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCLI stamp: 'mf 4/11/2022 04:24:10'!
II subclass: #DCCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCL stamp: 'mf 4/11/2022 04:24:10'!
II subclass: #DCCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCIX stamp: 'mf 4/11/2022 04:24:11'!
II subclass: #DCCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCIV stamp: 'mf 4/11/2022 04:24:11'!
II subclass: #DCCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCIII stamp: 'mf 4/11/2022 04:24:11'!
II subclass: #DCCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCII stamp: 'mf 4/11/2022 04:24:12'!
II subclass: #DCCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCCI stamp: 'mf 4/11/2022 04:24:12'!
II subclass: #DCCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCCC stamp: 'mf 4/11/2022 04:24:13'!
II subclass: #DCCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DCC stamp: 'mf 4/11/2022 04:24:13'!
II subclass: #DCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #DC stamp: 'mf 4/11/2022 04:24:13'!
II subclass: #DC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #D stamp: 'mf 4/11/2022 04:24:14'!
II subclass: #D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXVIII stamp: 'mf 4/11/2022 04:24:14'!
II subclass: #CXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXVII stamp: 'mf 4/11/2022 04:24:15'!
II subclass: #CXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXVI stamp: 'mf 4/11/2022 04:24:15'!
II subclass: #CXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXV stamp: 'mf 4/11/2022 04:24:15'!
II subclass: #CXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXIX stamp: 'mf 4/11/2022 04:24:16'!
II subclass: #CXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXIV stamp: 'mf 4/11/2022 04:24:16'!
II subclass: #CXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXIII stamp: 'mf 4/11/2022 04:24:17'!
II subclass: #CXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXII stamp: 'mf 4/11/2022 04:24:17'!
II subclass: #CXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXXI stamp: 'mf 4/11/2022 04:24:18'!
II subclass: #CXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXX stamp: 'mf 4/11/2022 04:24:18'!
II subclass: #CXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXVIII stamp: 'mf 4/11/2022 04:24:18'!
II subclass: #CXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXVII stamp: 'mf 4/11/2022 04:24:19'!
II subclass: #CXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXVI stamp: 'mf 4/11/2022 04:24:19'!
II subclass: #CXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXV stamp: 'mf 4/11/2022 04:24:20'!
II subclass: #CXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXIX stamp: 'mf 4/11/2022 04:24:20'!
II subclass: #CXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXIV stamp: 'mf 4/11/2022 04:24:20'!
II subclass: #CXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXIII stamp: 'mf 4/11/2022 04:24:21'!
II subclass: #CXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXII stamp: 'mf 4/11/2022 04:24:21'!
II subclass: #CXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXXI stamp: 'mf 4/11/2022 04:24:22'!
II subclass: #CXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXX stamp: 'mf 4/11/2022 04:24:22'!
II subclass: #CXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXVIII stamp: 'mf 4/11/2022 04:24:22'!
II subclass: #CXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXVII stamp: 'mf 4/11/2022 04:24:23'!
II subclass: #CXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXVI stamp: 'mf 4/11/2022 04:24:23'!
II subclass: #CXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXV stamp: 'mf 4/11/2022 04:24:24'!
II subclass: #CXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLVIII stamp: 'mf 4/11/2022 04:24:24'!
II subclass: #CXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLVII stamp: 'mf 4/11/2022 04:24:25'!
II subclass: #CXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLVI stamp: 'mf 4/11/2022 04:24:25'!
II subclass: #CXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLV stamp: 'mf 4/11/2022 04:24:25'!
II subclass: #CXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLIX stamp: 'mf 4/11/2022 04:24:26'!
II subclass: #CXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLIV stamp: 'mf 4/11/2022 04:24:26'!
II subclass: #CXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLIII stamp: 'mf 4/11/2022 04:24:27'!
II subclass: #CXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLII stamp: 'mf 4/11/2022 04:24:27'!
II subclass: #CXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXLI stamp: 'mf 4/11/2022 04:24:27'!
II subclass: #CXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXL stamp: 'mf 4/11/2022 04:24:28'!
II subclass: #CXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXIX stamp: 'mf 4/11/2022 04:24:28'!
II subclass: #CXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXIV stamp: 'mf 4/11/2022 04:24:29'!
II subclass: #CXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXIII stamp: 'mf 4/11/2022 04:24:29'!
II subclass: #CXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXII stamp: 'mf 4/11/2022 04:24:29'!
II subclass: #CXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXI stamp: 'mf 4/11/2022 04:24:30'!
II subclass: #CXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCVIII stamp: 'mf 4/11/2022 04:24:30'!
II subclass: #CXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCVII stamp: 'mf 4/11/2022 04:24:31'!
II subclass: #CXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCVI stamp: 'mf 4/11/2022 04:24:31'!
II subclass: #CXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCV stamp: 'mf 4/11/2022 04:24:32'!
II subclass: #CXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCIX stamp: 'mf 4/11/2022 04:24:32'!
II subclass: #CXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCIV stamp: 'mf 4/11/2022 04:24:32'!
II subclass: #CXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCIII stamp: 'mf 4/11/2022 04:24:33'!
II subclass: #CXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCII stamp: 'mf 4/11/2022 04:24:33'!
II subclass: #CXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXCI stamp: 'mf 4/11/2022 04:24:34'!
II subclass: #CXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CXC stamp: 'mf 4/11/2022 04:24:34'!
II subclass: #CXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CX stamp: 'mf 4/11/2022 04:24:34'!
II subclass: #CX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CVIII stamp: 'mf 4/11/2022 04:24:35'!
II subclass: #CVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CVII stamp: 'mf 4/11/2022 04:24:35'!
II subclass: #CVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CVI stamp: 'mf 4/11/2022 04:24:36'!
II subclass: #CVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CV stamp: 'mf 4/11/2022 04:24:36'!
II subclass: #CV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXVIII stamp: 'mf 4/11/2022 04:24:36'!
II subclass: #CMXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXVII stamp: 'mf 4/11/2022 04:24:37'!
II subclass: #CMXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXVI stamp: 'mf 4/11/2022 04:24:37'!
II subclass: #CMXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXV stamp: 'mf 4/11/2022 04:24:38'!
II subclass: #CMXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXIX stamp: 'mf 4/11/2022 04:24:38'!
II subclass: #CMXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXIV stamp: 'mf 4/11/2022 04:24:39'!
II subclass: #CMXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXIII stamp: 'mf 4/11/2022 04:24:39'!
II subclass: #CMXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXII stamp: 'mf 4/11/2022 04:24:40'!
II subclass: #CMXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXXI stamp: 'mf 4/11/2022 04:24:40'!
II subclass: #CMXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXX stamp: 'mf 4/11/2022 04:24:40'!
II subclass: #CMXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXVIII stamp: 'mf 4/11/2022 04:24:41'!
II subclass: #CMXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXVII stamp: 'mf 4/11/2022 04:24:41'!
II subclass: #CMXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXVI stamp: 'mf 4/11/2022 04:24:42'!
II subclass: #CMXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXV stamp: 'mf 4/11/2022 04:24:42'!
II subclass: #CMXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXIX stamp: 'mf 4/11/2022 04:24:43'!
II subclass: #CMXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXIV stamp: 'mf 4/11/2022 04:24:43'!
II subclass: #CMXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXIII stamp: 'mf 4/11/2022 04:24:43'!
II subclass: #CMXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXII stamp: 'mf 4/11/2022 04:24:44'!
II subclass: #CMXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXXI stamp: 'mf 4/11/2022 04:24:44'!
II subclass: #CMXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXX stamp: 'mf 4/11/2022 04:24:45'!
II subclass: #CMXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXVIII stamp: 'mf 4/11/2022 04:24:45'!
II subclass: #CMXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXVII stamp: 'mf 4/11/2022 04:24:45'!
II subclass: #CMXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXVI stamp: 'mf 4/11/2022 04:24:46'!
II subclass: #CMXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXV stamp: 'mf 4/11/2022 04:24:46'!
II subclass: #CMXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLVIII stamp: 'mf 4/11/2022 04:24:47'!
II subclass: #CMXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLVII stamp: 'mf 4/11/2022 04:24:47'!
II subclass: #CMXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLVI stamp: 'mf 4/11/2022 04:24:47'!
II subclass: #CMXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLV stamp: 'mf 4/11/2022 04:24:48'!
II subclass: #CMXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLIX stamp: 'mf 4/11/2022 04:24:48'!
II subclass: #CMXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLIV stamp: 'mf 4/11/2022 04:24:49'!
II subclass: #CMXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLIII stamp: 'mf 4/11/2022 04:24:49'!
II subclass: #CMXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLII stamp: 'mf 4/11/2022 04:24:50'!
II subclass: #CMXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXLI stamp: 'mf 4/11/2022 04:24:50'!
II subclass: #CMXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXL stamp: 'mf 4/11/2022 04:24:50'!
II subclass: #CMXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXIX stamp: 'mf 4/11/2022 04:24:51'!
II subclass: #CMXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXIV stamp: 'mf 4/11/2022 04:24:51'!
II subclass: #CMXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXIII stamp: 'mf 4/11/2022 04:24:52'!
II subclass: #CMXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXII stamp: 'mf 4/11/2022 04:24:52'!
II subclass: #CMXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXI stamp: 'mf 4/11/2022 04:24:53'!
II subclass: #CMXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCVIII stamp: 'mf 4/11/2022 04:24:53'!
II subclass: #CMXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCVII stamp: 'mf 4/11/2022 04:24:53'!
II subclass: #CMXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCVI stamp: 'mf 4/11/2022 04:24:54'!
II subclass: #CMXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCV stamp: 'mf 4/11/2022 04:24:54'!
II subclass: #CMXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCIX stamp: 'mf 4/11/2022 04:24:55'!
II subclass: #CMXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCIV stamp: 'mf 4/11/2022 04:24:55'!
II subclass: #CMXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCIII stamp: 'mf 4/11/2022 04:24:55'!
II subclass: #CMXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCII stamp: 'mf 4/11/2022 04:24:56'!
II subclass: #CMXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXCI stamp: 'mf 4/11/2022 04:24:56'!
II subclass: #CMXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMXC stamp: 'mf 4/11/2022 04:24:57'!
II subclass: #CMXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMX stamp: 'mf 4/11/2022 04:24:57'!
II subclass: #CMX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMVIII stamp: 'mf 4/11/2022 04:24:58'!
II subclass: #CMVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMVII stamp: 'mf 4/11/2022 04:24:58'!
II subclass: #CMVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMVI stamp: 'mf 4/11/2022 04:24:58'!
II subclass: #CMVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMV stamp: 'mf 4/11/2022 04:24:59'!
II subclass: #CMV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXVIII stamp: 'mf 4/11/2022 04:24:59'!
II subclass: #CMLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXVII stamp: 'mf 4/11/2022 04:25:00'!
II subclass: #CMLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXVI stamp: 'mf 4/11/2022 04:25:00'!
II subclass: #CMLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXV stamp: 'mf 4/11/2022 04:25:01'!
II subclass: #CMLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXIX stamp: 'mf 4/11/2022 04:25:01'!
II subclass: #CMLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXIV stamp: 'mf 4/11/2022 04:25:01'!
II subclass: #CMLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXIII stamp: 'mf 4/11/2022 04:25:02'!
II subclass: #CMLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXII stamp: 'mf 4/11/2022 04:25:02'!
II subclass: #CMLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXXI stamp: 'mf 4/11/2022 04:25:03'!
II subclass: #CMLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXX stamp: 'mf 4/11/2022 04:25:03'!
II subclass: #CMLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXVIII stamp: 'mf 4/11/2022 04:25:04'!
II subclass: #CMLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXVII stamp: 'mf 4/11/2022 04:25:04'!
II subclass: #CMLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXVI stamp: 'mf 4/11/2022 04:25:04'!
II subclass: #CMLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXV stamp: 'mf 4/11/2022 04:25:05'!
II subclass: #CMLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXIX stamp: 'mf 4/11/2022 04:25:05'!
II subclass: #CMLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXIV stamp: 'mf 4/11/2022 04:25:06'!
II subclass: #CMLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXIII stamp: 'mf 4/11/2022 04:25:06'!
II subclass: #CMLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXII stamp: 'mf 4/11/2022 04:25:07'!
II subclass: #CMLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXXI stamp: 'mf 4/11/2022 04:25:07'!
II subclass: #CMLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXX stamp: 'mf 4/11/2022 04:25:07'!
II subclass: #CMLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXVIII stamp: 'mf 4/11/2022 04:25:08'!
II subclass: #CMLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXVII stamp: 'mf 4/11/2022 04:25:08'!
II subclass: #CMLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXVI stamp: 'mf 4/11/2022 04:25:09'!
II subclass: #CMLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXV stamp: 'mf 4/11/2022 04:25:09'!
II subclass: #CMLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXIX stamp: 'mf 4/11/2022 04:25:09'!
II subclass: #CMLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXIV stamp: 'mf 4/11/2022 04:25:10'!
II subclass: #CMLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXIII stamp: 'mf 4/11/2022 04:25:10'!
II subclass: #CMLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXII stamp: 'mf 4/11/2022 04:25:11'!
II subclass: #CMLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLXI stamp: 'mf 4/11/2022 04:25:11'!
II subclass: #CMLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLX stamp: 'mf 4/11/2022 04:25:12'!
II subclass: #CMLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLVIII stamp: 'mf 4/11/2022 04:25:12'!
II subclass: #CMLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLVII stamp: 'mf 4/11/2022 04:25:12'!
II subclass: #CMLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLVI stamp: 'mf 4/11/2022 04:25:13'!
II subclass: #CMLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLV stamp: 'mf 4/11/2022 04:25:13'!
II subclass: #CMLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLIX stamp: 'mf 4/11/2022 04:25:14'!
II subclass: #CMLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLIV stamp: 'mf 4/11/2022 04:25:14'!
II subclass: #CMLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLIII stamp: 'mf 4/11/2022 04:25:14'!
II subclass: #CMLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLII stamp: 'mf 4/11/2022 04:25:15'!
II subclass: #CMLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMLI stamp: 'mf 4/11/2022 04:25:15'!
II subclass: #CMLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CML stamp: 'mf 4/11/2022 04:25:15'!
II subclass: #CML
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMIX stamp: 'mf 4/11/2022 04:25:16'!
II subclass: #CMIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMIV stamp: 'mf 4/11/2022 04:25:16'!
II subclass: #CMIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMIII stamp: 'mf 4/11/2022 04:25:17'!
II subclass: #CMIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMII stamp: 'mf 4/11/2022 04:25:17'!
II subclass: #CMII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CMI stamp: 'mf 4/11/2022 04:25:17'!
II subclass: #CMI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CM stamp: 'mf 4/11/2022 04:25:18'!
II subclass: #CM
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXVIII stamp: 'mf 4/11/2022 04:25:18'!
II subclass: #CLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXVII stamp: 'mf 4/11/2022 04:25:19'!
II subclass: #CLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXVI stamp: 'mf 4/11/2022 04:25:19'!
II subclass: #CLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXV stamp: 'mf 4/11/2022 04:25:19'!
II subclass: #CLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXIX stamp: 'mf 4/11/2022 04:25:20'!
II subclass: #CLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXIV stamp: 'mf 4/11/2022 04:25:20'!
II subclass: #CLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXIII stamp: 'mf 4/11/2022 04:25:21'!
II subclass: #CLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXII stamp: 'mf 4/11/2022 04:25:21'!
II subclass: #CLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXXI stamp: 'mf 4/11/2022 04:25:22'!
II subclass: #CLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXX stamp: 'mf 4/11/2022 04:25:22'!
II subclass: #CLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXVIII stamp: 'mf 4/11/2022 04:25:22'!
II subclass: #CLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXVII stamp: 'mf 4/11/2022 04:25:23'!
II subclass: #CLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXVI stamp: 'mf 4/11/2022 04:25:23'!
II subclass: #CLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXV stamp: 'mf 4/11/2022 04:25:24'!
II subclass: #CLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXIX stamp: 'mf 4/11/2022 04:25:24'!
II subclass: #CLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXIV stamp: 'mf 4/11/2022 04:25:24'!
II subclass: #CLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXIII stamp: 'mf 4/11/2022 04:25:25'!
II subclass: #CLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXII stamp: 'mf 4/11/2022 04:25:25'!
II subclass: #CLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXXI stamp: 'mf 4/11/2022 04:25:26'!
II subclass: #CLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXX stamp: 'mf 4/11/2022 04:25:26'!
II subclass: #CLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXVIII stamp: 'mf 4/11/2022 04:25:26'!
II subclass: #CLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXVII stamp: 'mf 4/11/2022 04:25:27'!
II subclass: #CLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXVI stamp: 'mf 4/11/2022 04:25:27'!
II subclass: #CLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXV stamp: 'mf 4/11/2022 04:25:27'!
II subclass: #CLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXIX stamp: 'mf 4/11/2022 04:25:28'!
II subclass: #CLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXIV stamp: 'mf 4/11/2022 04:25:28'!
II subclass: #CLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXIII stamp: 'mf 4/11/2022 04:25:29'!
II subclass: #CLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXII stamp: 'mf 4/11/2022 04:25:29'!
II subclass: #CLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLXI stamp: 'mf 4/11/2022 04:25:29'!
II subclass: #CLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLX stamp: 'mf 4/11/2022 04:25:30'!
II subclass: #CLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLVIII stamp: 'mf 4/11/2022 04:25:30'!
II subclass: #CLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLVII stamp: 'mf 4/11/2022 04:25:30'!
II subclass: #CLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLVI stamp: 'mf 4/11/2022 04:25:31'!
II subclass: #CLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLV stamp: 'mf 4/11/2022 04:25:31'!
II subclass: #CLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLIX stamp: 'mf 4/11/2022 04:25:31'!
II subclass: #CLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLIV stamp: 'mf 4/11/2022 04:25:32'!
II subclass: #CLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLIII stamp: 'mf 4/11/2022 04:25:32'!
II subclass: #CLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLII stamp: 'mf 4/11/2022 04:25:33'!
II subclass: #CLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CLI stamp: 'mf 4/11/2022 04:25:33'!
II subclass: #CLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CL stamp: 'mf 4/11/2022 04:25:33'!
II subclass: #CL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CIX stamp: 'mf 4/11/2022 04:25:34'!
II subclass: #CIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CIV stamp: 'mf 4/11/2022 04:25:34'!
II subclass: #CIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CIII stamp: 'mf 4/11/2022 04:25:34'!
II subclass: #CIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CII stamp: 'mf 4/11/2022 04:25:35'!
II subclass: #CII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CI stamp: 'mf 4/11/2022 04:25:35'!
II subclass: #CI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXVIII stamp: 'mf 4/11/2022 04:25:36'!
II subclass: #CDXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXVII stamp: 'mf 4/11/2022 04:25:36'!
II subclass: #CDXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXVI stamp: 'mf 4/11/2022 04:25:36'!
II subclass: #CDXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXV stamp: 'mf 4/11/2022 04:25:37'!
II subclass: #CDXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXIX stamp: 'mf 4/11/2022 04:25:37'!
II subclass: #CDXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXIV stamp: 'mf 4/11/2022 04:25:38'!
II subclass: #CDXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXIII stamp: 'mf 4/11/2022 04:25:38'!
II subclass: #CDXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXII stamp: 'mf 4/11/2022 04:25:38'!
II subclass: #CDXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXXI stamp: 'mf 4/11/2022 04:25:39'!
II subclass: #CDXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXX stamp: 'mf 4/11/2022 04:25:39'!
II subclass: #CDXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXVIII stamp: 'mf 4/11/2022 04:25:40'!
II subclass: #CDXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXVII stamp: 'mf 4/11/2022 04:25:40'!
II subclass: #CDXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXVI stamp: 'mf 4/11/2022 04:25:40'!
II subclass: #CDXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXV stamp: 'mf 4/11/2022 04:25:41'!
II subclass: #CDXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXIX stamp: 'mf 4/11/2022 04:25:41'!
II subclass: #CDXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXIV stamp: 'mf 4/11/2022 04:25:41'!
II subclass: #CDXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXIII stamp: 'mf 4/11/2022 04:25:42'!
II subclass: #CDXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXII stamp: 'mf 4/11/2022 04:25:42'!
II subclass: #CDXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXXI stamp: 'mf 4/11/2022 04:25:42'!
II subclass: #CDXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXX stamp: 'mf 4/11/2022 04:25:43'!
II subclass: #CDXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXVIII stamp: 'mf 4/11/2022 04:25:43'!
II subclass: #CDXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXVII stamp: 'mf 4/11/2022 04:25:43'!
II subclass: #CDXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXVI stamp: 'mf 4/11/2022 04:25:44'!
II subclass: #CDXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXV stamp: 'mf 4/11/2022 04:25:44'!
II subclass: #CDXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLVIII stamp: 'mf 4/11/2022 04:25:45'!
II subclass: #CDXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLVII stamp: 'mf 4/11/2022 04:25:45'!
II subclass: #CDXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLVI stamp: 'mf 4/11/2022 04:25:45'!
II subclass: #CDXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLV stamp: 'mf 4/11/2022 04:25:46'!
II subclass: #CDXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLIX stamp: 'mf 4/11/2022 04:25:46'!
II subclass: #CDXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLIV stamp: 'mf 4/11/2022 04:25:46'!
II subclass: #CDXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLIII stamp: 'mf 4/11/2022 04:25:47'!
II subclass: #CDXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLII stamp: 'mf 4/11/2022 04:25:47'!
II subclass: #CDXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXLI stamp: 'mf 4/11/2022 04:25:47'!
II subclass: #CDXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXL stamp: 'mf 4/11/2022 04:25:48'!
II subclass: #CDXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXIX stamp: 'mf 4/11/2022 04:25:48'!
II subclass: #CDXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXIV stamp: 'mf 4/11/2022 04:25:48'!
II subclass: #CDXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXIII stamp: 'mf 4/11/2022 04:25:49'!
II subclass: #CDXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXII stamp: 'mf 4/11/2022 04:25:49'!
II subclass: #CDXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXI stamp: 'mf 4/11/2022 04:25:50'!
II subclass: #CDXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCVIII stamp: 'mf 4/11/2022 04:25:50'!
II subclass: #CDXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCVII stamp: 'mf 4/11/2022 04:25:50'!
II subclass: #CDXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCVI stamp: 'mf 4/11/2022 04:25:51'!
II subclass: #CDXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCV stamp: 'mf 4/11/2022 04:25:51'!
II subclass: #CDXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCIX stamp: 'mf 4/11/2022 04:25:51'!
II subclass: #CDXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCIV stamp: 'mf 4/11/2022 04:25:52'!
II subclass: #CDXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCIII stamp: 'mf 4/11/2022 04:25:52'!
II subclass: #CDXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCII stamp: 'mf 4/11/2022 04:25:52'!
II subclass: #CDXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXCI stamp: 'mf 4/11/2022 04:25:53'!
II subclass: #CDXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDXC stamp: 'mf 4/11/2022 04:25:53'!
II subclass: #CDXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDX stamp: 'mf 4/11/2022 04:25:53'!
II subclass: #CDX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDVIII stamp: 'mf 4/11/2022 04:25:54'!
II subclass: #CDVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDVII stamp: 'mf 4/11/2022 04:25:54'!
II subclass: #CDVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDVI stamp: 'mf 4/11/2022 04:25:54'!
II subclass: #CDVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDV stamp: 'mf 4/11/2022 04:25:55'!
II subclass: #CDV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXVIII stamp: 'mf 4/11/2022 04:25:55'!
II subclass: #CDLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXVII stamp: 'mf 4/11/2022 04:25:56'!
II subclass: #CDLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXVI stamp: 'mf 4/11/2022 04:25:56'!
II subclass: #CDLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXV stamp: 'mf 4/11/2022 04:25:56'!
II subclass: #CDLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXIX stamp: 'mf 4/11/2022 04:25:57'!
II subclass: #CDLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXIV stamp: 'mf 4/11/2022 04:25:57'!
II subclass: #CDLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXIII stamp: 'mf 4/11/2022 04:25:58'!
II subclass: #CDLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXII stamp: 'mf 4/11/2022 04:25:58'!
II subclass: #CDLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXXI stamp: 'mf 4/11/2022 04:25:58'!
II subclass: #CDLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXX stamp: 'mf 4/11/2022 04:25:59'!
II subclass: #CDLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXVIII stamp: 'mf 4/11/2022 04:25:59'!
II subclass: #CDLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXVII stamp: 'mf 4/11/2022 04:25:59'!
II subclass: #CDLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXVI stamp: 'mf 4/11/2022 04:26:00'!
II subclass: #CDLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXV stamp: 'mf 4/11/2022 04:26:00'!
II subclass: #CDLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXIX stamp: 'mf 4/11/2022 04:26:00'!
II subclass: #CDLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXIV stamp: 'mf 4/11/2022 04:26:01'!
II subclass: #CDLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXIII stamp: 'mf 4/11/2022 04:26:01'!
II subclass: #CDLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXII stamp: 'mf 4/11/2022 04:26:02'!
II subclass: #CDLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXXI stamp: 'mf 4/11/2022 04:26:02'!
II subclass: #CDLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXX stamp: 'mf 4/11/2022 04:26:03'!
II subclass: #CDLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXVIII stamp: 'mf 4/11/2022 04:26:03'!
II subclass: #CDLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXVII stamp: 'mf 4/11/2022 04:26:03'!
II subclass: #CDLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXVI stamp: 'mf 4/11/2022 04:26:04'!
II subclass: #CDLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXV stamp: 'mf 4/11/2022 04:26:04'!
II subclass: #CDLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXIX stamp: 'mf 4/11/2022 04:26:05'!
II subclass: #CDLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXIV stamp: 'mf 4/11/2022 04:26:05'!
II subclass: #CDLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXIII stamp: 'mf 4/11/2022 04:26:06'!
II subclass: #CDLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXII stamp: 'mf 4/11/2022 04:26:06'!
II subclass: #CDLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLXI stamp: 'mf 4/11/2022 04:26:06'!
II subclass: #CDLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLX stamp: 'mf 4/11/2022 04:26:07'!
II subclass: #CDLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLVIII stamp: 'mf 4/11/2022 04:26:07'!
II subclass: #CDLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLVII stamp: 'mf 4/11/2022 04:26:08'!
II subclass: #CDLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLVI stamp: 'mf 4/11/2022 04:26:08'!
II subclass: #CDLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLV stamp: 'mf 4/11/2022 04:26:08'!
II subclass: #CDLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLIX stamp: 'mf 4/11/2022 04:26:09'!
II subclass: #CDLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLIV stamp: 'mf 4/11/2022 04:26:09'!
II subclass: #CDLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLIII stamp: 'mf 4/11/2022 04:26:10'!
II subclass: #CDLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLII stamp: 'mf 4/11/2022 04:26:10'!
II subclass: #CDLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDLI stamp: 'mf 4/11/2022 04:26:11'!
II subclass: #CDLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDL stamp: 'mf 4/11/2022 04:26:11'!
II subclass: #CDL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDIX stamp: 'mf 4/11/2022 04:26:11'!
II subclass: #CDIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDIV stamp: 'mf 4/11/2022 04:26:12'!
II subclass: #CDIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDIII stamp: 'mf 4/11/2022 04:26:12'!
II subclass: #CDIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDII stamp: 'mf 4/11/2022 04:26:13'!
II subclass: #CDII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CDI stamp: 'mf 4/11/2022 04:26:13'!
II subclass: #CDI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CD stamp: 'mf 4/11/2022 04:26:14'!
II subclass: #CD
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXVIII stamp: 'mf 4/11/2022 04:26:14'!
II subclass: #CCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXVII stamp: 'mf 4/11/2022 04:26:14'!
II subclass: #CCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXVI stamp: 'mf 4/11/2022 04:26:15'!
II subclass: #CCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXV stamp: 'mf 4/11/2022 04:26:15'!
II subclass: #CCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXIX stamp: 'mf 4/11/2022 04:26:16'!
II subclass: #CCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXIV stamp: 'mf 4/11/2022 04:26:16'!
II subclass: #CCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXIII stamp: 'mf 4/11/2022 04:26:16'!
II subclass: #CCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXII stamp: 'mf 4/11/2022 04:26:17'!
II subclass: #CCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXXI stamp: 'mf 4/11/2022 04:26:17'!
II subclass: #CCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXX stamp: 'mf 4/11/2022 04:26:18'!
II subclass: #CCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXVIII stamp: 'mf 4/11/2022 04:26:18'!
II subclass: #CCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXVII stamp: 'mf 4/11/2022 04:26:18'!
II subclass: #CCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXVI stamp: 'mf 4/11/2022 04:26:19'!
II subclass: #CCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXV stamp: 'mf 4/11/2022 04:26:19'!
II subclass: #CCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXIX stamp: 'mf 4/11/2022 04:26:20'!
II subclass: #CCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXIV stamp: 'mf 4/11/2022 04:26:20'!
II subclass: #CCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXIII stamp: 'mf 4/11/2022 04:26:20'!
II subclass: #CCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXII stamp: 'mf 4/11/2022 04:26:21'!
II subclass: #CCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXXI stamp: 'mf 4/11/2022 04:26:21'!
II subclass: #CCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXX stamp: 'mf 4/11/2022 04:26:22'!
II subclass: #CCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXVIII stamp: 'mf 4/11/2022 04:26:22'!
II subclass: #CCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXVII stamp: 'mf 4/11/2022 04:26:22'!
II subclass: #CCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXVI stamp: 'mf 4/11/2022 04:26:23'!
II subclass: #CCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXV stamp: 'mf 4/11/2022 04:26:23'!
II subclass: #CCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLVIII stamp: 'mf 4/11/2022 04:26:24'!
II subclass: #CCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLVII stamp: 'mf 4/11/2022 04:26:24'!
II subclass: #CCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLVI stamp: 'mf 4/11/2022 04:26:24'!
II subclass: #CCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLV stamp: 'mf 4/11/2022 04:26:25'!
II subclass: #CCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLIX stamp: 'mf 4/11/2022 04:26:25'!
II subclass: #CCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLIV stamp: 'mf 4/11/2022 04:26:25'!
II subclass: #CCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLIII stamp: 'mf 4/11/2022 04:26:26'!
II subclass: #CCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLII stamp: 'mf 4/11/2022 04:26:26'!
II subclass: #CCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXLI stamp: 'mf 4/11/2022 04:26:27'!
II subclass: #CCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXL stamp: 'mf 4/11/2022 04:26:27'!
II subclass: #CCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXIX stamp: 'mf 4/11/2022 04:26:27'!
II subclass: #CCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXIV stamp: 'mf 4/11/2022 04:26:28'!
II subclass: #CCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXIII stamp: 'mf 4/11/2022 04:26:28'!
II subclass: #CCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXII stamp: 'mf 4/11/2022 04:26:29'!
II subclass: #CCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXI stamp: 'mf 4/11/2022 04:26:29'!
II subclass: #CCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCVIII stamp: 'mf 4/11/2022 04:26:30'!
II subclass: #CCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCVII stamp: 'mf 4/11/2022 04:26:30'!
II subclass: #CCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCVI stamp: 'mf 4/11/2022 04:26:31'!
II subclass: #CCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCV stamp: 'mf 4/11/2022 04:26:31'!
II subclass: #CCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCIX stamp: 'mf 4/11/2022 04:26:32'!
II subclass: #CCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCIV stamp: 'mf 4/11/2022 04:26:32'!
II subclass: #CCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCIII stamp: 'mf 4/11/2022 04:26:32'!
II subclass: #CCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCII stamp: 'mf 4/11/2022 04:26:33'!
II subclass: #CCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXCI stamp: 'mf 4/11/2022 04:26:33'!
II subclass: #CCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCXC stamp: 'mf 4/11/2022 04:26:34'!
II subclass: #CCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCX stamp: 'mf 4/11/2022 04:26:34'!
II subclass: #CCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCVIII stamp: 'mf 4/11/2022 04:26:35'!
II subclass: #CCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCVII stamp: 'mf 4/11/2022 04:26:35'!
II subclass: #CCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCVI stamp: 'mf 4/11/2022 04:26:36'!
II subclass: #CCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCV stamp: 'mf 4/11/2022 04:26:36'!
II subclass: #CCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXVIII stamp: 'mf 4/11/2022 04:26:36'!
II subclass: #CCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXVII stamp: 'mf 4/11/2022 04:26:37'!
II subclass: #CCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXVI stamp: 'mf 4/11/2022 04:26:37'!
II subclass: #CCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXV stamp: 'mf 4/11/2022 04:26:38'!
II subclass: #CCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXIX stamp: 'mf 4/11/2022 04:26:38'!
II subclass: #CCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXIV stamp: 'mf 4/11/2022 04:26:39'!
II subclass: #CCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXIII stamp: 'mf 4/11/2022 04:26:39'!
II subclass: #CCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXII stamp: 'mf 4/11/2022 04:26:39'!
II subclass: #CCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXXI stamp: 'mf 4/11/2022 04:26:40'!
II subclass: #CCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXX stamp: 'mf 4/11/2022 04:26:40'!
II subclass: #CCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXVIII stamp: 'mf 4/11/2022 04:26:40'!
II subclass: #CCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXVII stamp: 'mf 4/11/2022 04:26:41'!
II subclass: #CCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXVI stamp: 'mf 4/11/2022 04:26:41'!
II subclass: #CCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXV stamp: 'mf 4/11/2022 04:26:41'!
II subclass: #CCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXIX stamp: 'mf 4/11/2022 04:26:42'!
II subclass: #CCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXIV stamp: 'mf 4/11/2022 04:26:42'!
II subclass: #CCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXIII stamp: 'mf 4/11/2022 04:26:43'!
II subclass: #CCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXII stamp: 'mf 4/11/2022 04:26:43'!
II subclass: #CCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXXI stamp: 'mf 4/11/2022 04:26:43'!
II subclass: #CCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXX stamp: 'mf 4/11/2022 04:26:44'!
II subclass: #CCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXVIII stamp: 'mf 4/11/2022 04:26:44'!
II subclass: #CCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXVII stamp: 'mf 4/11/2022 04:26:45'!
II subclass: #CCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXVI stamp: 'mf 4/11/2022 04:26:45'!
II subclass: #CCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXV stamp: 'mf 4/11/2022 04:26:45'!
II subclass: #CCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXIX stamp: 'mf 4/11/2022 04:26:46'!
II subclass: #CCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXIV stamp: 'mf 4/11/2022 04:26:46'!
II subclass: #CCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXIII stamp: 'mf 4/11/2022 04:26:47'!
II subclass: #CCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXII stamp: 'mf 4/11/2022 04:26:47'!
II subclass: #CCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLXI stamp: 'mf 4/11/2022 04:26:47'!
II subclass: #CCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLX stamp: 'mf 4/11/2022 04:26:48'!
II subclass: #CCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLVIII stamp: 'mf 4/11/2022 04:26:48'!
II subclass: #CCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLVII stamp: 'mf 4/11/2022 04:26:48'!
II subclass: #CCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLVI stamp: 'mf 4/11/2022 04:26:49'!
II subclass: #CCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLV stamp: 'mf 4/11/2022 04:26:49'!
II subclass: #CCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLIX stamp: 'mf 4/11/2022 04:26:49'!
II subclass: #CCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLIV stamp: 'mf 4/11/2022 04:26:50'!
II subclass: #CCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLIII stamp: 'mf 4/11/2022 04:26:50'!
II subclass: #CCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLII stamp: 'mf 4/11/2022 04:26:51'!
II subclass: #CCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCLI stamp: 'mf 4/11/2022 04:26:51'!
II subclass: #CCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCL stamp: 'mf 4/11/2022 04:26:51'!
II subclass: #CCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCIX stamp: 'mf 4/11/2022 04:26:52'!
II subclass: #CCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCIV stamp: 'mf 4/11/2022 04:26:52'!
II subclass: #CCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCIII stamp: 'mf 4/11/2022 04:26:52'!
II subclass: #CCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCII stamp: 'mf 4/11/2022 04:26:53'!
II subclass: #CCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCI stamp: 'mf 4/11/2022 04:26:53'!
II subclass: #CCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXVIII stamp: 'mf 4/11/2022 04:26:53'!
II subclass: #CCCXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXVII stamp: 'mf 4/11/2022 04:26:54'!
II subclass: #CCCXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXVI stamp: 'mf 4/11/2022 04:26:54'!
II subclass: #CCCXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXV stamp: 'mf 4/11/2022 04:26:54'!
II subclass: #CCCXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXIX stamp: 'mf 4/11/2022 04:26:55'!
II subclass: #CCCXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXIV stamp: 'mf 4/11/2022 04:26:55'!
II subclass: #CCCXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXIII stamp: 'mf 4/11/2022 04:26:55'!
II subclass: #CCCXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXII stamp: 'mf 4/11/2022 04:26:56'!
II subclass: #CCCXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXXI stamp: 'mf 4/11/2022 04:26:56'!
II subclass: #CCCXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXX stamp: 'mf 4/11/2022 04:26:56'!
II subclass: #CCCXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXVIII stamp: 'mf 4/11/2022 04:26:57'!
II subclass: #CCCXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXVII stamp: 'mf 4/11/2022 04:26:57'!
II subclass: #CCCXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXVI stamp: 'mf 4/11/2022 04:26:58'!
II subclass: #CCCXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXV stamp: 'mf 4/11/2022 04:26:58'!
II subclass: #CCCXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXIX stamp: 'mf 4/11/2022 04:26:58'!
II subclass: #CCCXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXIV stamp: 'mf 4/11/2022 04:26:59'!
II subclass: #CCCXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXIII stamp: 'mf 4/11/2022 04:26:59'!
II subclass: #CCCXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXII stamp: 'mf 4/11/2022 04:26:59'!
II subclass: #CCCXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXXI stamp: 'mf 4/11/2022 04:27:00'!
II subclass: #CCCXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXX stamp: 'mf 4/11/2022 04:27:00'!
II subclass: #CCCXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXVIII stamp: 'mf 4/11/2022 04:27:00'!
II subclass: #CCCXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXVII stamp: 'mf 4/11/2022 04:27:01'!
II subclass: #CCCXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXVI stamp: 'mf 4/11/2022 04:27:01'!
II subclass: #CCCXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXV stamp: 'mf 4/11/2022 04:27:01'!
II subclass: #CCCXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLVIII stamp: 'mf 4/11/2022 04:27:02'!
II subclass: #CCCXLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLVII stamp: 'mf 4/11/2022 04:27:02'!
II subclass: #CCCXLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLVI stamp: 'mf 4/11/2022 04:27:02'!
II subclass: #CCCXLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLV stamp: 'mf 4/11/2022 04:27:03'!
II subclass: #CCCXLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLIX stamp: 'mf 4/11/2022 04:27:03'!
II subclass: #CCCXLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLIV stamp: 'mf 4/11/2022 04:27:03'!
II subclass: #CCCXLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLIII stamp: 'mf 4/11/2022 04:27:04'!
II subclass: #CCCXLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLII stamp: 'mf 4/11/2022 04:27:04'!
II subclass: #CCCXLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXLI stamp: 'mf 4/11/2022 04:27:04'!
II subclass: #CCCXLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXL stamp: 'mf 4/11/2022 04:27:05'!
II subclass: #CCCXL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXIX stamp: 'mf 4/11/2022 04:27:05'!
II subclass: #CCCXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXIV stamp: 'mf 4/11/2022 04:27:05'!
II subclass: #CCCXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXIII stamp: 'mf 4/11/2022 04:27:06'!
II subclass: #CCCXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXII stamp: 'mf 4/11/2022 04:27:06'!
II subclass: #CCCXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXI stamp: 'mf 4/11/2022 04:27:06'!
II subclass: #CCCXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCVIII stamp: 'mf 4/11/2022 04:27:07'!
II subclass: #CCCXCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCVII stamp: 'mf 4/11/2022 04:27:07'!
II subclass: #CCCXCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCVI stamp: 'mf 4/11/2022 04:27:07'!
II subclass: #CCCXCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCV stamp: 'mf 4/11/2022 04:27:08'!
II subclass: #CCCXCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCIX stamp: 'mf 4/11/2022 04:27:08'!
II subclass: #CCCXCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCIV stamp: 'mf 4/11/2022 04:27:08'!
II subclass: #CCCXCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCIII stamp: 'mf 4/11/2022 04:27:09'!
II subclass: #CCCXCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCII stamp: 'mf 4/11/2022 04:27:09'!
II subclass: #CCCXCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXCI stamp: 'mf 4/11/2022 04:27:09'!
II subclass: #CCCXCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCXC stamp: 'mf 4/11/2022 04:27:10'!
II subclass: #CCCXC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCX stamp: 'mf 4/11/2022 04:27:10'!
II subclass: #CCCX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCVIII stamp: 'mf 4/11/2022 04:27:10'!
II subclass: #CCCVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCVII stamp: 'mf 4/11/2022 04:27:11'!
II subclass: #CCCVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCVI stamp: 'mf 4/11/2022 04:27:11'!
II subclass: #CCCVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCV stamp: 'mf 4/11/2022 04:27:11'!
II subclass: #CCCV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXVIII stamp: 'mf 4/11/2022 04:27:12'!
II subclass: #CCCLXXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXVII stamp: 'mf 4/11/2022 04:27:12'!
II subclass: #CCCLXXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXVI stamp: 'mf 4/11/2022 04:27:12'!
II subclass: #CCCLXXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXV stamp: 'mf 4/11/2022 04:27:13'!
II subclass: #CCCLXXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXIX stamp: 'mf 4/11/2022 04:27:13'!
II subclass: #CCCLXXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXIV stamp: 'mf 4/11/2022 04:27:14'!
II subclass: #CCCLXXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXIII stamp: 'mf 4/11/2022 04:27:14'!
II subclass: #CCCLXXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXII stamp: 'mf 4/11/2022 04:27:14'!
II subclass: #CCCLXXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXXI stamp: 'mf 4/11/2022 04:27:15'!
II subclass: #CCCLXXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXX stamp: 'mf 4/11/2022 04:27:15'!
II subclass: #CCCLXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXVIII stamp: 'mf 4/11/2022 04:27:15'!
II subclass: #CCCLXXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXVII stamp: 'mf 4/11/2022 04:27:16'!
II subclass: #CCCLXXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXVI stamp: 'mf 4/11/2022 04:27:16'!
II subclass: #CCCLXXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXV stamp: 'mf 4/11/2022 04:27:16'!
II subclass: #CCCLXXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXIX stamp: 'mf 4/11/2022 04:27:17'!
II subclass: #CCCLXXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXIV stamp: 'mf 4/11/2022 04:27:17'!
II subclass: #CCCLXXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXIII stamp: 'mf 4/11/2022 04:27:17'!
II subclass: #CCCLXXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXII stamp: 'mf 4/11/2022 04:27:18'!
II subclass: #CCCLXXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXXI stamp: 'mf 4/11/2022 04:27:18'!
II subclass: #CCCLXXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXX stamp: 'mf 4/11/2022 04:27:18'!
II subclass: #CCCLXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXVIII stamp: 'mf 4/11/2022 04:27:19'!
II subclass: #CCCLXVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXVII stamp: 'mf 4/11/2022 04:27:19'!
II subclass: #CCCLXVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXVI stamp: 'mf 4/11/2022 04:27:19'!
II subclass: #CCCLXVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXV stamp: 'mf 4/11/2022 04:27:20'!
II subclass: #CCCLXV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXIX stamp: 'mf 4/11/2022 04:27:20'!
II subclass: #CCCLXIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXIV stamp: 'mf 4/11/2022 04:27:20'!
II subclass: #CCCLXIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXIII stamp: 'mf 4/11/2022 04:27:21'!
II subclass: #CCCLXIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXII stamp: 'mf 4/11/2022 04:27:21'!
II subclass: #CCCLXII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLXI stamp: 'mf 4/11/2022 04:27:21'!
II subclass: #CCCLXI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLX stamp: 'mf 4/11/2022 04:27:22'!
II subclass: #CCCLX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLVIII stamp: 'mf 4/11/2022 04:27:22'!
II subclass: #CCCLVIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLVII stamp: 'mf 4/11/2022 04:27:22'!
II subclass: #CCCLVII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLVI stamp: 'mf 4/11/2022 04:27:23'!
II subclass: #CCCLVI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLV stamp: 'mf 4/11/2022 04:27:23'!
II subclass: #CCCLV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLIX stamp: 'mf 4/11/2022 04:27:23'!
II subclass: #CCCLIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLIV stamp: 'mf 4/11/2022 04:27:24'!
II subclass: #CCCLIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLIII stamp: 'mf 4/11/2022 04:27:24'!
II subclass: #CCCLIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLII stamp: 'mf 4/11/2022 04:27:24'!
II subclass: #CCCLII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCLI stamp: 'mf 4/11/2022 04:27:25'!
II subclass: #CCCLI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCL stamp: 'mf 4/11/2022 04:27:25'!
II subclass: #CCCL
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCIX stamp: 'mf 4/11/2022 04:27:25'!
II subclass: #CCCIX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCIV stamp: 'mf 4/11/2022 04:27:26'!
II subclass: #CCCIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCIII stamp: 'mf 4/11/2022 04:27:26'!
II subclass: #CCCIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCII stamp: 'mf 4/11/2022 04:27:26'!
II subclass: #CCCII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCCI stamp: 'mf 4/11/2022 04:27:27'!
II subclass: #CCCI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CCC stamp: 'mf 4/11/2022 04:27:27'!
II subclass: #CCC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #CC stamp: 'mf 4/11/2022 04:27:27'!
II subclass: #CC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

!classRemoval: #C stamp: 'mf 4/11/2022 04:27:28'!
II subclass: #C
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Naturales'!

II+II!

!classDefinition: #AnObsoleteIV category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:30:54'!
II subclass: #AnObsoleteIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'AnObsoleteIV class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:30:54'!
AnObsoleteIV class
	instanceVariableNames: ''!

!classRemoval: #AnObsoleteIV stamp: 'mf 4/11/2022 04:31:02'!
II subclass: #AnObsoleteIV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

II+II!

!classDefinition: #III category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:33'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'III class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:33'!
III class
	instanceVariableNames: ''!

!classDefinition: #IV category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:33'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'IV class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:33'!
IV class
	instanceVariableNames: ''!

IV+IV!

!classDefinition: #V category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'V class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
V class
	instanceVariableNames: ''!

!classDefinition: #VI category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
II subclass: #VI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'VI class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
VI class
	instanceVariableNames: ''!

!classDefinition: #VII category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
II subclass: #VII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'VII class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:44'!
VII class
	instanceVariableNames: ''!

!classDefinition: #VIII category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:45'!
II subclass: #VIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Romanos'!

!classDefinition: 'VIII class' category: 'Numeros-Romanos' stamp: 'mf 4/11/2022 04:31:45'!
VIII class
	instanceVariableNames: ''!

----End fileIn of D:\Descargas\Roman Numbers Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:33:00'!
ERROR!
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:34:07'!
/ unDivisor

	^unDivisor divideA: self! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:34:40'!
divideA: unDividendo

	^unDividendo! !

I / I!

III / I !

II - IV!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:36:05'!
ERROR!
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:40:16'!
- unRestando

	self error: 'jajaSalu2'! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:40:33' prior: 50917185!
- unSustraendo

	self error: 'jajaSalu2'! !

I - IV!
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:43:13' prior: 50917189!
- unSustraendo

	| negativeNumbersNotSupportedErrorDescription |
	self error: negativeNumbersNotSupportedErrorDescription.! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:44:03'!
negativeNumbersNotSupportedErrorDescription
	^'Negative numbers not supported'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:44:12'!
ERROR!

I negativeNumbersNotSupportedErrorDescription!

I - II !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 04:45:52' prior: 50917194!
- unSustraendo

	
	self error: I negativeNumbersNotSupportedErrorDescription.! !

I - II !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 04:46:12'!
PASSED!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 04:47:08'!
/ unDivisor

	^unDivisor divideA: self! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 04:49:26'!
divideA: unDividendo

	^unDividendo! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:04:40' prior: 50917258!
divideA: unDividendo

	^I + ((unDividendo - self) / self)! !

II / I!

II / II!

IV / II!

!methodRemoval: I class #divideA: stamp: 'mf 4/11/2022 05:07:27'!
divideA: unDividendo

	^unDividendo!

!methodRemoval: II class #divideA: stamp: 'mf 4/11/2022 05:07:37'!
divideA: unDividendo

	^I + ((unDividendo - self) / self)!
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:08:33' prior: 50917173!
/ unDivisor

	^unDivisor divideA: self! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:09:05'!
divideA: unDividendo

	^unDividendo! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:10:03'!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	! !

II / II!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:10:25' prior: 50917283!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	
	! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:13:36' prior: 50917288!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	
	[unDividendo-self] signal: Error.! !

[II - IV] signal: Error!

[II - IV] !

[II - IV] signal!

[II - IV] value!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:16:35'!
esMayorQue: unNumeroRomano

	^self previous = unNumeroRomano! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:16:42' prior: 50917301!
esMayorQue: unNumeroRomano

	^self previous = unNumeroRomano ! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:16:57' prior: 50917306!
esMayorQue: unNumeroRomano

	^self previous = unNumeroRomano ifTrue: [^True]! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:17:15' prior: 50917311!
esMayorQue: unNumeroRomano

	^self previous = unNumeroRomano ifTrue: [^True]
	! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:17:22' prior: 50917317!
esMayorQue: unNumeroRomano

	self previous = unNumeroRomano ifTrue: [^True]
	! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:17:43' prior: 50917323!
esMayorQue: unNumeroRomano

	self previous = unNumeroRomano ifTrue: [^True].
	^self previous esMayorQue: unNumeroRomano! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:18:07'!
esMayorQue: unNumeroRomano
	^False! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:18:23' prior: 50917293!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	
	! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:19:41' prior: 50917339!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	
	^ I + ((unDividendo-self)/self)! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:21:38' prior: 50917254!
/ unDivisor
	
	(unDivisor esMayorQue: self) ifTrue:[self error: 'jja'].
	
	^unDivisor divideA: self! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:22:45'!
canNotDivideByBiggerNumberErrorDescription
	
	^'Can noy divide by bigger number'! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:23:15' prior: 50917350!
/ unDivisor
	
	(unDivisor esMayorQue: self) ifTrue:[self error: II canNotDivideByBiggerNumberErrorDescription].
	
	^unDivisor divideA: self! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:23:27'!
PASSED!

II/I!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:24:18' prior: 50917362!
/ unDivisor
	
	(self esMayorQue: unDivisor) ifTrue:[self error: II canNotDivideByBiggerNumberErrorDescription].
	
	^unDivisor divideA: self! !

II/I!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:24:50' prior: 50917408!
/ unDivisor
	
	(unDivisor esMayorQue: self) ifTrue:[self error: II canNotDivideByBiggerNumberErrorDescription].
	
	^unDivisor divideA: self! !

II esMayorQue: I!

I esMayorQue: II!

II/I!

II/I!

I esMayorQue: II!

I = I!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:28:49' prior: 50917416!
/ unDivisor
	
	(unDivisor esMayorQue: self) ifTrue:[self error: II canNotDivideByBiggerNumberErrorDescription].
	
	^unDivisor divideA: self! !
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:28:55' prior: 50917329!
esMayorQue: unNumeroRomano

	self previous = unNumeroRomano ifTrue: [^true].
	^self previous esMayorQue: unNumeroRomano! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:29:06' prior: 50917335!
esMayorQue: unNumeroRomano
	^false! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:13'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:29:29'!
ERROR!

III / IV!

I / II!
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:31:31' prior: 50917275!
/ unDivisor

	self = unDivisor ifTrue: [^self].
	
	self error: II! !
!I class methodsFor: 'operations' stamp: 'mf 4/11/2022 05:31:45' prior: 50917493!
/ unDivisor

	self = unDivisor ifTrue: [^self].
	
	self error: II canNotDivideByBiggerNumberErrorDescription.! !

!methodRemoval: I class #divideA: stamp: 'mf 4/11/2022 05:31:54'!
divideA: unDividendo

	^unDividendo!
!II class methodsFor: 'operaciones' stamp: 'mf 4/11/2022 05:32:38' prior: 50917426!
/ unDivisor
	
	(unDivisor esMayorQue: self) ifTrue:[self error: II canNotDivideByBiggerNumberErrorDescription].
	
	self = unDivisor ifTrue: [^I].
	
	^ I + ((self-unDivisor)/unDivisor)! !

!methodRemoval: II class #divideA: stamp: 'mf 4/11/2022 05:32:46'!
divideA: unDividendo

	unDividendo = self ifTrue: [^I].
	
	^ I + ((unDividendo-self)/self)!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'mf 4/11/2022 05:32:54'!
PASSED!
!II class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IV.
	previous := II.! !
!IV class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := V.
	previous := III.! !
!V class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VI.
	previous := IV.! !
!VI class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VII.
	previous := V.! !
!VII class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VIII.
	previous := VI.! !
!VIII class methodsFor: 'as yet unclassified' stamp: 'mf 4/11/2022 05:33:04' overrides: 50917561!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := VII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IV.
	previous := II.!

!methodRemoval: IV class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := V.
	previous := III.!

!methodRemoval: V class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VI.
	previous := IV.!

!methodRemoval: VI class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VII.
	previous := V.!

!methodRemoval: VII class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := VIII.
	previous := VI.!

!methodRemoval: VIII class #initializeCollaboratorsFromFile stamp: 'mf 4/11/2022 05:33:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := VII.!

----SNAPSHOT----(11 April 2022 05:33:12) CuisUniversity-4532.image priorSource: 18546821!

----QUIT----(11 April 2022 05:34:01) CuisUniversity-4532.image priorSource: 18752431!

----STARTUP---- (17 April 2022 16:07:08) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\2022-1c-main\01-CodigoRepetido\CodigoRepetido-Ejercicio.st----!

!classRemoval: #Zone stamp: 'mf 4/17/2022 16:08:21'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #YYY stamp: 'mf 4/17/2022 16:08:21'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #ServiceProducedCalculator stamp: 'mf 4/17/2022 16:08:21'!
Object subclass: #ServiceProducedCalculator
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 4/17/2022 16:08:22'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 4/17/2022 16:08:22'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 4/17/2022 16:08:22'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Comertial stamp: 'mf 4/17/2022 16:08:39'!
AnObsoleteZone subclass: #Comertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterPlant stamp: 'mf 4/17/2022 16:08:45'!
AnObsoleteService subclass: #WaterPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:09:39'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:09:39'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:09:39'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:09:39'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:09:40'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:09:40'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:09:40'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:09:40'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:09:40'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:11:45'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:11:45'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:14:19'!
tiempoQueTardaCustomerBookEnEjecutarElMensaje

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:14:19' prior: 50917709!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	self tiempoQueTardaCustomerBookEnEjecutarElMensaje
	
! !
!CustomerBookTest methodsFor: 'funciones-testing' stamp: 'mf 4/17/2022 16:18:00'!
tiempoQueTardaCustomerBookEnEjecutarElMensaje: unMensaje alCustomer: unCustomer

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook unMensaje unCustomer.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)! !
!CustomerBookTest methodsFor: 'funciones-testing' stamp: 'mf 4/17/2022 16:18:51' prior: 50918107!
tiempoQueTardaCustomerBookEnEjecutarElMensaje: unMensaje alCustomer: unCustomer

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook unMensaje unCustomer.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:20:01' prior: 50918100!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	|tiempo|
	tiempo _ self tiempoQueTarda
	
! !

!methodRemoval: CustomerBookTest #tiempoQueTardaCustomerBookEnEjecutarElMensaje stamp: 'mf 4/17/2022 16:20:15'!
tiempoQueTardaCustomerBookEnEjecutarElMensaje

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:21:52' prior: 50918142!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	|tiempo|
	tiempo _ self tiempoQueTardaCustomerBookEnEjecutarElMensaje: 'addCustomer' alCustomer: 'John Lenon'.
	
! !
!CustomerBookTest methodsFor: 'funciones-testing' stamp: 'mf 4/17/2022 16:22:12' prior: 50918125!
tiempoQueTardaCustomerBookEnEjecutarElMensaje: unMensaje alCustomer: unCustomer

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook unMensaje: unCustomer.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning! !

!methodRemoval: CustomerBookTest #tiempoQueTardaCustomerBookEnEjecutarElMensaje:alCustomer: stamp: 'mf 4/17/2022 16:28:14'!
tiempoQueTardaCustomerBookEnEjecutarElMensaje: unMensaje alCustomer: unCustomer

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook unMensaje: unCustomer.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:30:24' prior: 50918166!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	|customerBook|		
	
	customerBook _ CustomerBook new.
	
	self should: [ customerBook addCustomerNamed: 'John Lennon'] notTakeMoreThan: 50 milliSeconds.
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:30:28'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:30:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:30:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:30:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:30:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:30:29'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:30:29'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:30:29'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:30:29'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:31:29' prior: 50917726!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self should: [ customerBook removeCustomerNamed: paulMcCartney] notTakeMoreThan: 50 milliSeconds.
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:31:51' prior: 50918253!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self should: [ customerBook removeCustomerNamed: paulMcCartney] notTakeMoreThan: 50 milliSeconds.
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:31:56'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:31:56'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:32:04' prior: 50918274!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self should: [ customerBook removeCustomerNamed: paulMcCartney] notTakeMoreThan: 100 milliSeconds.
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:32:06'!
PASSED!

customerBook _ CustomerBook new.!

customerBook addCustomerNamed: 'John Lennon'.!

customerBook removeCustomerNamed: 'Paul McCartney'.!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:43:54' prior: 50917747!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self should: [ customerBook addCustomerNamed: ''] 
		raise: Error 
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:43:57'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:43:58'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:43:58'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:45:11' prior: 50917760!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
	self should: [ customerBook removeCustomerNamed: 'Paul McCartney']
		raise: NotFound
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 16:45:22' prior: 50918419!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook removeCustomerNamed: 'Paul McCartney']
		raise: NotFound
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 16:45:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 16:45:24'!
PASSED!
!CustomerBookTest methodsFor: 'testing-functions' stamp: 'mf 4/17/2022 17:03:51'!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers
	"comment stating purpose of message"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:11:09' prior: 50917776!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self checkIf: customerBook numberOfActiveCustomersEquals: 0 numberOfSuspendedCustomersEquals: 1 numberOFCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:11:53' prior: 50918501!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self checkIf: customerBook numberOfActiveCustomersEquals: 0 numberOfSuspendedCustomersEquals: 1 numberOFCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing checks' stamp: 'mf 4/17/2022 17:13:25'!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers aNumberOfCustomersEquals: aNumberOfCustomers
	
	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 1 equals: aCustomerBook numberOfCustomers.
! !
!CustomerBookTest methodsFor: 'testing checks' stamp: 'mf 4/17/2022 17:13:35' prior: 50918548!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers aNumberOfCustomersEquals: aNumberOfCustomers
	
	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.
! !

!methodRemoval: CustomerBookTest #checkIf:numberOfActiveCustomersEquals:numberOfSuspendedCustomersEquals: stamp: 'mf 4/17/2022 17:13:39'!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers
	"comment stating purpose of message"
!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:14:00'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:14:18'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:14:34' prior: 50918525!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self checkIf: customerBook numberOfActiveCustomersEquals: 0 numberOfSuspendedCustomersEquals: 1 aNumberOfCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing checks' stamp: 'mf 4/17/2022 17:16:04'!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers numberOfCustomersEquals: aNumberOfCustomers
	
	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mf 4/17/2022 17:16:04' prior: 50918600!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self checkIf: customerBook numberOfActiveCustomersEquals: 0 numberOfSuspendedCustomersEquals: 1 numberOfCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!methodRemoval: CustomerBookTest #checkIf:numberOfActiveCustomersEquals:numberOfSuspendedCustomersEquals:aNumberOfCustomersEquals: stamp: 'mf 4/17/2022 17:16:04'!
checkIf: aCustomerBook numberOfActiveCustomersEquals: aNumberOfActiveCustomers numberOfSuspendedCustomersEquals: aNumberOfSuspendedCustomers aNumberOfCustomersEquals: aNumberOfCustomers
	
	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.
!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:16:35' prior: 50918640!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self checkIf: customerBook 
	numberOfActiveCustomersEquals: 0 
	numberOfSuspendedCustomersEquals: 1 
	numberOfCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:16:36'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:16:36'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:16:58' prior: 50918682!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkIf: customerBook 
		numberOfActiveCustomersEquals: 0 
		numberOfSuspendedCustomersEquals: 1 
		numberOfCustomersEquals: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:17:22' prior: 50917796!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkIf: customerBook 
		numberOfActiveCustomersEquals: 0 
		numberOfSuspendedCustomersEquals: 0 
		numberOfCustomersEquals: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:17:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:17:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:17:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:17:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:17:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:17:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:17:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:17:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:17:24'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:19:01' prior: 50917817!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: 'George Harrison']
		raise: CantSuspend
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:19:01'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:19:14' prior: 50918812!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: 'George Harrison']
		raise: CantSuspend
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:19:15'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:19:16'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:19:16'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mf 4/17/2022 17:19:58' prior: 50917833!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: johnLennon]
		raise: CantSuspend 
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:20:00'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:20:00'!
PASSED!
!CustomerBook methodsFor: 'initialization' stamp: 'mf 4/17/2022 17:21:00' prior: 50917876 overrides: 16896425!
initialize

	active _ OrderedCollection new.
	suspended _ OrderedCollection new.! !

OrderedCollection!
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:27:30' prior: 50917907!
removeCustomerNamed: aName 
 
	1 to: active size do:
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:28:02' prior: 50918978!
removeCustomerNamed: aName 

	1 to: active size do:
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:29:29' prior: 50918992!
removeCustomerNamed: aName 
 
	"1 to: active size do:
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
	
	active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^NotFound signal.]]
! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:30:05' prior: 50919006!
removeCustomerNamed: aName 
 
	"1 to: active size do:
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
	
	active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^NotFound signal.]].
	^aName.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:30:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:30:28'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:30:58' prior: 50919022!
removeCustomerNamed: aName 
	
	active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^NotFound signal.]].
	^aName.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:31:52' prior: 50917934!
suspendCustomerNamed: aName 
	
	active remove: aName ifAbsent: [^CantSuspend signal].
	
	suspended add: aName
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:32:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:32:01'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:40:59' prior: 50917882!
addCustomerNamed: aName

	aName ifEmpty: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:41:49' prior: 50919122!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:41:54'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:41:54'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:45:04' prior: 50919132!
addCustomerNamed: aCustomerName

	aCustomerName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aCustomerName) or: [suspended includes: aCustomerName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aCustomerName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:45:04' prior: 50919176!
addCustomerNamed: aCustomerName

	aCustomerName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aCustomerName) or: [suspended includes: aCustomerName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aCustomerName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50919188!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'mf 4/17/2022 17:47:17' prior: 50919200!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mf 4/17/2022 17:47:29'!
PASSED!

----QUIT----(17 April 2022 17:50:29) CuisUniversity-4532.image priorSource: 18752522!

----STARTUP---- (24 April 2022 21:07:30) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\2022-1c-main\02-Numeros\Numero-Exercise.st----!

----End fileIn of D:\Descargas\2022-1c-main\02-Numeros\Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:21'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:21'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/24/2022 21:15:22'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:22'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:22'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:15:22'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/24/2022 21:15:22'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/24/2022 21:15:22'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/24/2022 21:15:22'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/24/2022 21:15:36'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:15:36'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/24/2022 21:15:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/24/2022 21:15:37'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/24/2022 21:15:37'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/24/2022 21:15:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/24/2022 21:15:37'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/24/2022 21:15:37'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/24/2022 21:15:37'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/24/2022 21:15:37'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:15:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:15:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:15:45'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:15:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:49'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:15:51'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:15:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:54'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:15:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:16:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:16:03'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:16:03'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:27:04'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:27:04'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:30:53' prior: 50920339 overrides: 50920262!
+ anAdder 
	
	^anAdder addEntero: self
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:31:03' prior: 50920913 overrides: 50920262!
+ anAdder 
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:31:35' prior: 50920918 overrides: 50920262!
+ anAdder 
	
	^anAdder addEntero: self
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/24/2022 21:32:22'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:32:22'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:32:22'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:32:23'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/24/2022 21:32:23'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/24/2022 21:32:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/24/2022 21:32:23'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:32:30'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:32:40'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:32:40'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:33:19' prior: 50920472 overrides: 50920262!
+ anAdder 
	
	^ anAdder addFraccion: self! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:33:29'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:33:34'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:34:11'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:34:11'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:35:17' prior: 50920332 overrides: 50920257!
* aMultiplier 
	
	^aMultiplier multiplyEntero: self
	! !

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/24/2022 21:35:26'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:35:26'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/24/2022 21:35:26'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/24/2022 21:35:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/24/2022 21:35:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/24/2022 21:35:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/24/2022 21:35:27'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/24/2022 21:35:27'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/24/2022 21:35:27'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:35:31'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:36:19' prior: 50920464 overrides: 50920257!
* aMultiplier 
	
	^aMultiplier multiplyFraccion: self
	! !

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:36:25'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:37:41' prior: 50920345 overrides: 50920267!
- aSubtrahend 
	
	^ aSubtrahend subtractEntero: self! !

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:38:02'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:38:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:38:06'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:38:06'!
ERROR!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:38:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:38:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:38:29'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:38:31'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:38:31'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:38:59' prior: 50920483 overrides: 50920267!
- aSubtrahend 
	
	^aSubtrahend subtractFraccion: self 
! !

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:39:14'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:39:18'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:39:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:39:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:39:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:39:31'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:39:58'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:40:33' prior: 50920352 overrides: 50920272!
/ aDivisor 
	
	^aDivisor divideEntero: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mf 4/24/2022 21:40:52' prior: 50920495 overrides: 50920272!
/ aDivisor 
	
	^aDivisor divideFraccion: self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:41:08'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/24/2022 21:41:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/24/2022 21:41:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/24/2022 21:41:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/24/2022 21:41:12'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/24/2022 21:41:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/24/2022 21:41:12'!
PASSED!

Entero subclass: #EnteroNegativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'mf 4/24/2022 22:01:29'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'mf 4/24/2022 22:01:37'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'mf 4/24/2022 22:01:42'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'mf 4/24/2022 22:01:45'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'initialization' stamp: 'mf 4/24/2022 22:07:27' prior: 50920393!
initalizeWith: aValue 
	
	aValue isZero ifTrue: [^Cero with: aValue]! !
!NumeroTest methodsFor: 'setup' stamp: 'mf 4/24/2022 22:09:44' prior: 50920230 overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09' prior: 50921518!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'initialization' stamp: 'mf 4/24/2022 22:15:24' prior: 50921540!
initalizeWith: aValue 
	
	value := aValue! !
!Entero class methodsFor: 'instance creation' stamp: 'mf 4/24/2022 22:20:27' prior: 50920440!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue isZero ifTrue: [^Cero new initializeWith: aValue]	.
	^self new initalizeWith: aValue! !

Entero with: 0!
!Entero class methodsFor: 'instance creation' stamp: 'mf 4/24/2022 22:22:41' prior: 50921550!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue isZero ifTrue: [^Cero new initalizeWith: aValue]	.
	^self new initalizeWith: aValue! !

Entero with: 0.!

cero _ Entero with: 0.!

cero _ Entero with: 0.cero class!
!Entero class methodsFor: 'instance creation' stamp: 'mf 4/24/2022 22:26:37' prior: 50921564!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue isZero ifTrue: [^Cero new initalizeWith: aValue]	.
	
	
	
	^self new initalizeWith: aValue! !

----QUIT----(24 April 2022 22:26:49) CuisUniversity-4532.image priorSource: 18803261!

----STARTUP---- (25 April 2022 15:20:09) as D:\Cuis\CuisUniversity-4532.image!

!Entero class methodsFor: 'instance creation' stamp: 'mf 4/25/2022 15:22:30' prior: 50921579!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue isZero ifTrue: [^Cero new initalizeWith: aValue]	.
	(aValue = 1) ifTrue: [^Uno new initalizeWith: aValue]	.
	(aValue < 0) ifTrue: [^EnteroNegativo new initalizeWith: aValue]	.
	(aValue > 1) ifTrue: [^EnteroNegativo new initalizeWith: aValue]	.
	
	^self new initalizeWith: aValue! !
!Entero class methodsFor: 'instance creation' stamp: 'mf 4/25/2022 15:22:48' prior: 50921597!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue isZero ifTrue: [^Cero new initalizeWith: aValue]	.
	(aValue = 1) ifTrue: [^Uno new initalizeWith: aValue]	.
	(aValue < 0) ifTrue: [^EnteroNegativo new initalizeWith: aValue]	.
	(aValue > 1) ifTrue: [^EnteroPositivo new initalizeWith: aValue]	.
	
	^self new initalizeWith: aValue! !

EnteroPositivo subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'mf 4/25/2022 15:23:13'!
EnteroPositivo subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'no messages' stamp: 'mf 4/25/2022 15:24:57' overrides: 50920363!
fibonacci
	
	|one|
	
	one _ Entero with: 1.

	^one! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/25/2022 15:25:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/25/2022 15:25:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/25/2022 15:25:23'!
PASSED!
!Uno methodsFor: 'no messages' stamp: 'mf 4/25/2022 15:35:13' overrides: 50920363!
fibonacci
	
	|one|
	
	one _ Entero with: 1.

	^one! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/25/2022 15:35:18'!
PASSED!

----SNAPSHOT----(25 April 2022 15:35:31) CuisUniversity-4532.image priorSource: 18878104!

----QUIT----(25 April 2022 15:35:37) CuisUniversity-4532.image priorSource: 18889053!

----STARTUP---- (25 April 2022 16:04:43) as D:\Cuis\CuisUniversity-4532.image!

!EnteroNegativo methodsFor: 'no messages' stamp: 'mf 4/25/2022 16:05:22' overrides: 50920363!
fibonacci
	
	self error: Entero negativeFibonacciErrorDescription.! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'mf 4/25/2022 16:05:25' prior: 50921942 overrides: 50920363!
fibonacci
	
	self error: Entero negativeFibonacciErrorDescription! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/25/2022 16:05:30'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/25/2022 16:05:31'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/25/2022 16:05:31'!
PASSED!
!EnteroPositivo methodsFor: 'no messages' stamp: 'mf 4/25/2022 16:06:11' overrides: 50920363!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'mf 4/25/2022 16:06:19' prior: 50922093 overrides: 50920363!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:06:24'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:06:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/25/2022 16:06:37'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/25/2022 16:06:37'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/25/2022 16:07:12' prior: 50920363!
fibonacci

	self.	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mf 4/25/2022 16:07:24' prior: 50922255!
fibonacci

	self subclassResponsibility	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mf 4/25/2022 16:07:30'!
PASSED!

----QUIT----(25 April 2022 16:13:18) CuisUniversity-4532.image priorSource: 18889144!

----STARTUP---- (28 April 2022 05:54:04) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\2022-1c-main\03-Stack\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 05:55:30'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 05:55:40'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 05:55:41'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 05:55:41'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 05:55:41'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 05:55:47'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 05:55:50'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 05:55:52'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 05:55:53'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 05:55:54'!
PASSED!

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 4/28/2022 06:03:00'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 4/28/2022 06:03:01'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 4/28/2022 06:03:01'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 4/28/2022 06:03:01'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONotEmptyStackState stamp: 'mf 4/28/2022 06:03:12'!
OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOEmptyStackState stamp: 'mf 4/28/2022 06:03:13'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackState stamp: 'mf 4/28/2022 06:03:13'!
Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

----End fileIn of D:\Descargas\2022-1c-main\03-Stack\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:04:00'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:04:00'!
ERROR!

----End fileIn of D:\Cuis\Stack- Solucionado 1a .st----!

Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:05:20'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackState category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:07:02'!
Object subclass: #OOStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Cuis\Estado del stack soluciando xd.st----!

Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackState category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:08:58'!
Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackState subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NameOfSubclass category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:09:23'!
OOStackState subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'OOStackState'!

!classDefinition: #OOEmptyStackState category: 'OOStackState' stamp: 'mf 4/28/2022 06:10:05'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'OOStackState'!

OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStackState category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:10:29'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONotEmptyStackState category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:10:50'!
OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NameOfSubclass stamp: 'mf 4/28/2022 06:10:56'!
OOStackState subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:14:46'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 06:14:50'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:14:50'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'mf 4/28/2022 06:24:58'!
find: aPrefix
	"comment stating purpose of message"

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:25:06' prior: 50923302!
find: aPrefix

	
	! !

!classRemoval: #SentenceFinderByPrefix stamp: 'mf 4/28/2022 06:28:47'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONotEmptyStackState stamp: 'mf 4/28/2022 06:28:48'!
OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOEmptyStackState stamp: 'mf 4/28/2022 06:28:48'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackState stamp: 'mf 4/28/2022 06:28:48'!
Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 4/28/2022 06:28:49'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 4/28/2022 06:28:49'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 4/28/2022 06:28:49'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Descargas\ing1-2021-c2-main\15-Stack\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:29:28'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 06:29:31'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:29:31'!
PASSED!
!State class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:36:00'!
stateBySize: aSize

	self subclassResponsibility! !
!State methodsFor: 'no messages' stamp: 'mf 4/28/2022 06:37:14'!
empty 
	
	self subclassResponsibility! !
!State methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:37:42'!
popContents: aContents
	
	self subclassResponsibility! !
!EmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:37:54' prior: 50923731!
top 
	
	self error: OOStack stackEmptyErrorDescription! !
!EmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:37:57' prior: 50923726 overrides: 50923839!
popContents: aContents
	
	self error: OOStack stackEmptyErrorDescription! !
!EmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:38:03' prior: 50923723 overrides: 50923835!
empty
	
	^ true! !
!EmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:38:06' prior: 50923856 overrides: 50923835!
empty
	
	^true! !
!State methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:38:25'!
top 
	
	self subclassResponsibility! !
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 06:38:48' prior: 50923577 overrides: 16896425!
initialize
	
	state _ EmptyState new.
	elements:= OrderedCollection new.! !
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 06:38:54' prior: 50923869 overrides: 16896425!
initialize
	
	state _ EmptyState new.
	elements _ OrderedCollection new.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:39:08' prior: 50923582!
isEmpty
	
	^state empty.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:39:14' prior: 50923586 overrides: 16880927!
size
	
	^elements size.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:39:22' prior: 50923589!
top
	
	^(state top)value:elements.! !
!NotEmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:39:46' prior: 50923774 overrides: 50923864!
top
	
	^[:contents | contents last]
	! !
!NotEmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:40:02' prior: 50923770!
poppedElement
	
	^lastPoppedElement.! !
!NotEmptyState methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 06:40:22' prior: 50923760 overrides: 50923835!
empty 
	
	^false.! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 06:45:22' prior: 50923593!
pop
	
	|top|
	
	top _ state top.
	
	top := state poppedElement.
	
	state := State withSize: elements size.
	
	^top
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 06:47:14' prior: 50923907!
pop
	
	|top|
	
	top _ state top.
	
	elements removeLast.
	
	state _ State for: self.
	
	^top
    	
	
	! !

----QUIT----(28 April 2022 06:53:47) CuisUniversity-4532.image priorSource: 18904051!

----STARTUP---- (28 April 2022 06:54:21) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\ing1-2021-c2-main\15-Stack\Stack-Exercise.st----!

Object subclass: #Top
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Top category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:55:16'!
Object subclass: #Top
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRenamed: #Top as: #OOStackTop stamp: 'mf 4/28/2022 06:55:39'!
Smalltalk renameClassNamed: #Top as: #OOStackTop!

OOStackTop subclass: #OOEmptyStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStackTop category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:56:06'!
OOStackTop subclass: #OOEmptyStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackTop subclass: #OONotEmptyStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONotEmptyStackTop category: 'Stack-Exercise' stamp: 'mf 4/28/2022 06:56:17'!
OOStackTop subclass: #OONotEmptyStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:56:37' prior: 50924159!
isEmpty
	
	^state empty.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:56:45' prior: 50924422!
isEmpty
	
	^elements isEmpty.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:56:49'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 06:56:52'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 06:56:52'!
PASSED!
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:57:03' prior: 50924163 overrides: 16880927!
size
	
	^elements size.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 06:57:10' prior: 50924167!
top
	
	^(state top)value:elements.! !
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 06:57:20' prior: 50924154 overrides: 16896425!
initialize
	
	state:= EmptyState new.
	elements:= OrderedCollection new.! !
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 06:57:25' prior: 50924479 overrides: 16896425!
initialize
	
	state:= EmptyState new.
	elements _ OrderedCollection new.! !
!OOStackTop methodsFor: 'no messages' stamp: 'mf 4/28/2022 06:59:34' overrides: 16881508!
value
	
	self subclassResponsibility! !
!OOEmptyStackTop methodsFor: 'no messages' stamp: 'mf 4/28/2022 06:59:51' overrides: 50924491!
value 
	
	! !
!OOEmptyStackTop methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:00:19' prior: 50924496 overrides: 50924491!
value 
	
	self error: OOStack stackEmptyErrorDescription! !

OOStackTop subclass: #OONotEmptyStackTop
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONotEmptyStackTop category: 'Stack-Exercise' stamp: 'mf 4/28/2022 07:00:42'!
OOStackTop subclass: #OONotEmptyStackTop
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OONotEmptyStackTop methodsFor: 'no messages' stamp: 'mf 4/28/2022 07:01:25' overrides: 50924491!
value
	
	^value! !
!OOStack methodsFor: 'private' stamp: 'mf 4/28/2022 07:04:07'!
elements
	
	^elements! !
!OOStackTop class methodsFor: 'no messages' stamp: 'mf 4/28/2022 07:05:15'!
of: anOOStack
	
	! !
!OOStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:05:36'!
canHandle: anOOStack
	
	! !
!OOStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:05:49' prior: 50924530!
canHandle: anOOStack
	
	self subclassResponsibility! !
!OOEmptyStackTop class methodsFor: 'no messages' stamp: 'mf 4/28/2022 07:06:44' overrides: 50924534!
canHandle: anOOStack
	
	^anOOStack isEmpty.! !
!OONotEmptyStackTop class methodsFor: 'no messages' stamp: 'mf 4/28/2022 07:07:23' overrides: 50924534!
canHandle: anOOStack
	
	^anOOStack isEmpty not.! !
!OOStack commentStamp: '<historical>' prior: 50924150!
!

charles _ OOStack new.!

charles isEmpty.!

charles isEmpty not.!
!OOEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:08:58' overrides: 50924526!
of: anOOStack
	
	^anOOStack isEmpty.! !
!OOEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:09:02' prior: 50924554 overrides: 50924526!
of: anOOStack
	! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:09:13' overrides: 50924526!
of: anOOStack
	
	^anOOStack isEmpty not.! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:09:57' prior: 50924565 overrides: 50924526!
of: anOOStack
	
	| kk |
	^ self new initializeWith: kk.! !
!OONotEmptyStackTop methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:11:45'!
initializeWith: anObject! !
!OONotEmptyStackTop methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:11:54' prior: 50924576!
initializeWith: anObject

	value _ anObject! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:12:29' prior: 50924571 overrides: 50924526!
of: anOOStack
	
	
	^ self new initializeWith: (anOOStack elements last).! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:12:34' prior: 50924587 overrides: 50924526!
of: anOOStack
	
	^ self new initializeWith: (anOOStack elements last).! !
!OOStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:13:50' prior: 50924526!
of: anOOStack

	^(self subclasses detect:[:subclass| subclass canHandle: anOOStack]) new.
	
	! !
!OOEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:15:26' prior: 50924560 overrides: 50924600!
of: anOOStack

	self new	! !
!OOStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:16:56' prior: 50924600!
of: anOOStack

	^(self subclasses detect:[:subclass| subclass canHandle: anOOStack]) for: anOOStack.
	
	! !
!OOEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:17:06'!
for: anOOStack

	self new	! !

!methodRemoval: OOEmptyStackTop class #of: stamp: 'mf 4/28/2022 07:17:13'!
of: anOOStack

	self new	!
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:17:22'!
for: anOOStack
	
	^ self new initializeWith: (anOOStack elements last).! !

!methodRemoval: OONotEmptyStackTop class #of: stamp: 'mf 4/28/2022 07:17:35'!
of: anOOStack
	
	^ self new initializeWith: (anOOStack elements last).!
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 07:20:57' prior: 50924474!
top
	
	^(state top)value:elements.! !

Object subclass: #OOStack
	instanceVariableNames: 'elements top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 4/28/2022 07:21:09'!
Object subclass: #OOStack
	instanceVariableNames: 'elements top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'elements state top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 4/28/2022 07:21:18'!
Object subclass: #OOStack
	instanceVariableNames: 'elements state top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 07:21:41' prior: 50924485 overrides: 16896425!
initialize
	
	state:= EmptyState new.
	
	top _ OOEmptyStackTop new.
	
	elements _ OrderedCollection new.! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 07:22:06' prior: 50924637!
top
	
	^top value.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:22:16'!
PASSED!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:23:51' prior: 50924179!
push: anElement
	state:= NotEmptyState new.
	elements addLast: anElement.
	! !
!OOStack methodsFor: 'checks' stamp: 'VV 9/16/2021 22:27:26' prior: 50924671!
top
	^(state top)value:elements.! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:25:40'!
withValue: anObject
	
	! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:25:44' prior: 50924687!
withValue: anObject
	
	self new! !
!OONotEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 07:25:59' prior: 50924692!
withValue: anObject
	
	^self new initializeWith: anObject! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:26:43' prior: 50924678!
push: anElement
	
	state:= NotEmptyState new.
	elements addLast: anElement.
	
	top _ OONotEmptyStackTop withValue: anElement
	! !
!OOStack methodsFor: 'checks' stamp: 'mf 4/28/2022 07:27:07' prior: 50924683!
top
	
	^top value.! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:27:16'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:27:19'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:27:30'!
PASSED!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:28:45' prior: 50924171!
pop
	
	|poppedElement|
	
	poppedElement _ top value.
	
	^poppedElement
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:29:04' prior: 50924722!
pop
	
	|poppedElement|
	
	poppedElement _ top value.
	
	elements removeLast.
	
	^poppedElement
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:29:27' prior: 50924728!
pop
	
	|poppedElement|
	
	poppedElement _ top value.
	
	elements removeLast.
	
	OOStackTop for: self.
	
	^poppedElement
    	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:00'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:30:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:30:00'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:00'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:30:00'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:01'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:30:01'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:01'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:30:01'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:01'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:30:07'!
ERROR!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:30:26' prior: 50924734!
pop
	
	|poppedElement|
	
	poppedElement _ top value.
	
	elements removeLast.
	
	OOStackTop of: self.
	
	^poppedElement
    	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:30:31'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:30:31'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:31'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:30:35'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:30:55'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:30:55'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:30:55'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:32:07'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:32:50'!
FAILURE!

stack!

elements!

top!

stack!

top value.!

elements!

stack!

top value.!

stack!

top value.!

elements!

top value!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:36:57' prior: 50924780!
pop
	
	|poppedElement|
	
	poppedElement _ top value.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^poppedElement
    	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:37:01'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:37:01'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:37:01'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:37:17'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:37:19'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:37:22'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:37:22'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:37:22'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:37:36'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:38:44'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:38:56'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:40:06'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:40:25'!
FAILURE!

stack!

self pop!

self pop.!

self pop.!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:41:54'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:42:48'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:42:48'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:42:48'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:42:56'!
PASSED!

stack!

self top!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:45:31' prior: 50924871!
pop
	
	|poppedElement|
	
	top value.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^poppedElement
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:45:48' prior: 50925034!
pop
	
	|poppedElement|
	
	top value.
	
	poppedElement _ top value.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^poppedElement
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:46:01' prior: 50925041!
pop
	
	|poppedElement|
	
	poppedElement _ top.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^poppedElement
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:46:09' prior: 50925049!
pop
	
	|poppedElement|
	
	poppedElement _ top.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^poppedElement value.
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:46:30' prior: 50925056!
pop
	
	|elementGettinPoped|
	
	elementGettinPoped _ top.
	
	elements removeLast.
	
	top _ OOStackTop of: self.
	
	^elementGettinPoped value.
    	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:46:43'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:46:43'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:46:43'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:46:55'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:47:00'!
FAILURE!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:48:15' prior: 50925063!
pop
	
	
	
	^ top canPop.
    	
	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:48:25' prior: 50925114!
pop
	
	^ top canPop.
    	
	! !
!OOEmptyStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:49:24'!
canPop
	
	! !
!OOEmptyStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:49:39' prior: 50925122!
canPop

	self error: OOStack stackEmptyErrorDescription
	
	! !
!OOStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:50:37'!
canPop
	
	self subclassResponsibility.! !
!OOEmptyStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:51:03'!
canPop: anOOStack

	self error: OOStack stackEmptyErrorDescription
	
	! !

!methodRemoval: OOEmptyStackTop #canPop stamp: 'mf 4/28/2022 07:51:18'!
canPop

	self error: OOStack stackEmptyErrorDescription
	
	!
!OOStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:52:02'!
canPop: anOOStack
	
	self subclassResponsibility.! !

!methodRemoval: OOStackTop #canPop stamp: 'mf 4/28/2022 07:52:11'!
canPop
	
	self subclassResponsibility.!
!OONotEmptyStackTop methodsFor: 'checks' stamp: 'mf 4/28/2022 07:53:02' overrides: 50925143!
canPop: anOOStack
	
	anOOStack removeTop.! !
!OONotEmptyStackTop methodsFor: 'checks' stamp: 'mf 4/28/2022 07:53:54' prior: 50925151 overrides: 50925143!
canPop: anOOStack
	
	anOOStack removeTop.
	
	^value.! !
!OOStack methodsFor: 'private' stamp: 'mf 4/28/2022 07:54:36'!
removeTop
	
	elements removeLast.
	
	! !
!OOStack methodsFor: 'private' stamp: 'mf 4/28/2022 07:54:51' prior: 50925160!
removeTop
	
	elements removeLast.
	
	top _ OOStackTop of: self.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:55:05'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:55:05'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:55:05'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:55:05'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:55:05'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:55:05'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:55:05'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:55:06'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:55:06'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:55:06'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:55:06'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:55:17'!
ERROR!
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:56:03' prior: 50925118!
pop
	
	^ top canPop: self.
    	
	! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 07:56:20' prior: 50925208!
pop
	
	^ top canPopFrom: self.
    	
	! !
!OOStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:56:46' prior: 50925143!
canPop: anOOStack
	
	self subclassResponsibility.! !
!OOEmptyStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:57:17'!
canPopFrom: anOOStack

	self error: OOStack stackEmptyErrorDescription
	
	! !
!OONotEmptyStackTop methodsFor: 'checks' stamp: 'mf 4/28/2022 07:57:17'!
canPopFrom: anOOStack
	
	anOOStack removeTop.
	
	^value.! !
!OOStackTop methodsFor: 'check' stamp: 'mf 4/28/2022 07:57:17'!
canPopFrom: anOOStack
	
	self subclassResponsibility.! !

!methodRemoval: OOEmptyStackTop #canPop: stamp: 'mf 4/28/2022 07:57:17'!
canPop: anOOStack

	self error: OOStack stackEmptyErrorDescription
	
	!

!methodRemoval: OONotEmptyStackTop #canPop: stamp: 'mf 4/28/2022 07:57:17'!
canPop: anOOStack
	
	anOOStack removeTop.
	
	^value.!

!methodRemoval: OOStackTop #canPop: stamp: 'mf 4/28/2022 07:57:17'!
canPop: anOOStack
	
	self subclassResponsibility.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:57:26'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:57:26'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:57:26'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:57:26'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:57:27'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:57:27'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:57:27'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:57:51'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:57:51'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:57:51'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:58:13'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:58:13'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:58:13'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:58:44'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 07:58:52'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 07:58:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 07:58:55'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:58:59'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 07:59:01'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 07:59:03'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 07:59:05'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 07:59:07'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:59:09'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 07:59:09'!
ERROR!

stack!

top canPopFrom: self!

top value!

top value.!
!OOEmptyStackTop class methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 08:01:55' prior: 50924619!
for: anOOStack

	^self new	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'mf 4/28/2022 08:02:03'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'elements top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'mf 4/28/2022 08:02:11'!
Object subclass: #OOStack
	instanceVariableNames: 'elements top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'Initialization' stamp: 'mf 4/28/2022 08:02:20' prior: 50924665 overrides: 16896425!
initialize
	
	top _ OOEmptyStackTop new.
	
	elements _ OrderedCollection new.! !
!OOStack methodsFor: 'modify' stamp: 'mf 4/28/2022 08:02:38' prior: 50924702!
push: anElement

	elements addLast: anElement.
	
	top _ OONotEmptyStackTop withValue: anElement
	! !

!testRun: #SentenceFinderByPrefixTest #test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound stamp: 'mf 4/28/2022 08:03:13'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound stamp: 'mf 4/28/2022 08:03:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound stamp: 'mf 4/28/2022 08:03:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentencedFoundShouldBeSizeOfSentencesWithPrefix stamp: 'mf 4/28/2022 08:03:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentencedFoundShouldBeInSameOrderAnWithPrefix stamp: 'mf 4/28/2022 08:03:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentencedFinderDoesNotChangeTheStack stamp: 'mf 4/28/2022 08:03:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05prefixCanNotBeBlank stamp: 'mf 4/28/2022 08:03:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06prefixCanNotHaveSpaces stamp: 'mf 4/28/2022 08:03:17'!
PASSED!

!classRemoval: #EmptyState stamp: 'mf 4/28/2022 08:03:28'!
State subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NotEmptyState stamp: 'mf 4/28/2022 08:03:29'!
State subclass: #NotEmptyState
	instanceVariableNames: 'lastPoppedElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #State stamp: 'mf 4/28/2022 08:03:29'!
Object subclass: #State
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 08:03:52' prior: 50924050!
test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound
	
	|stackOraciones prefijo|
	
	prefijo:= 'sum'.
	
	stackOraciones := (OOStack new push: 'Winter') push:'winter'.
	
	self assert: 	((SentenceFinderByPrefix new withStack: stackOraciones) find: prefijo) isEmpty
	
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 08:04:01' prior: 50925521!
test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound
	
	|stackOraciones prefijo|
	
	prefijo _ 'sum'.
	
	stackOraciones := (OOStack new push: 'Winter') push:'winter'.
	
	self assert: 	((SentenceFinderByPrefix new withStack: stackOraciones) find: prefijo) isEmpty
	
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'mf 4/28/2022 08:04:07' prior: 50925534!
test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound
	
	|stackOraciones prefijo|
	
	prefijo _ 'sum'.
	
	stackOraciones _ (OOStack new push: 'Winter') push:'winter'.
	
	self assert: 	((SentenceFinderByPrefix new withStack: stackOraciones) find: prefijo) isEmpty
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:11:43' prior: 50924243!
withStack: anStack
	
	savedStack _ anStack . 
	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'originalOrderStack reversedStack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'originalOrderStack reversedStack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:17:20' prior: 50924210!
find: aPrefix
	|sentence sf sp|
	
	sp := OrderedCollection new.
	sf := OrderedCollection new.	
	
	(aPrefix = '') ifTrue:[self error: SentenceFinderByPrefix prefixBlankErrorDescription].
	((aPrefix findString: ' ') > 0) ifTrue:[self error: SentenceFinderByPrefix prefixHaveSpacesErrorDescription].
	
	
	[((savedStack isEmpty) not)] 
		whileTrue:[sentence := savedStack pop.
				(sentence beginsWith: aPrefix) 
					ifTrue:[sf addFirst: sentence].
				sp addFirst: sentence.
				].
			
	self fillSavedStackWith: sp.			
	
			
				
	^sf.
	
	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'originalStack reversedOrderStack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'mf 4/28/2022 08:19:11'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'originalStack reversedOrderStack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:20:08' prior: 50925559!
withStack: anStack
	
	| reversed |
	originalStack _ anStack . 
	reversed _ OOStack new.
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:20:34' prior: 50925611!
withStack: anStack
	
	originalStack _ anStack . 
	reversedOrderStack _ OOStack new.
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:20:50' prior: 50925617!
withStack: anStack
	
	originalStack _ anStack . 
	reversedOrderStack _ OOStack new.
	sentencesFound _ OrderedCollection new
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:21:01' prior: 50925623!
withStack: anStack
	
	originalStack _ anStack. 
	reversedOrderStack _ OOStack new.
	sentencesFound _ OrderedCollection new
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:23:33' prior: 50925576!
find: aPrefix
	
	(aPrefix = '') ifTrue:[self error: SentenceFinderByPrefix prefixBlankErrorDescription].
	((aPrefix findString: ' ') > 0) ifTrue:[self error: SentenceFinderByPrefix prefixHaveSpacesErrorDescription].
	
	
	[self areSentencesRemaining] 
		whileTrue:[
			
				].
			

	
			
				
	^'hola'
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:24:43'!
areSentencesRemaining

	^ originalStack isEmpty not.
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:27:12' prior: 50925638!
find: aPrefix
	
	(aPrefix = '') ifTrue:[self error: SentenceFinderByPrefix prefixBlankErrorDescription].
	((aPrefix findString: ' ') > 0) ifTrue:[self error: SentenceFinderByPrefix prefixHaveSpacesErrorDescription].
	
	
	[self areSentencesRemaining] 
		whileTrue:[ | sentence |
			sentence := originalStack pop.
				(sentence beginsWith: aPrefix) 
					ifTrue:[sentencesFound addFirst: sentence].
				reversedOrderStack addFirst: sentence.
				
				].
			

	
			
				
	^'hola'
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:27:46'!
checkIfAPrefixIsValid: aPrefix

	(aPrefix = '') ifTrue:[self error: SentenceFinderByPrefix prefixBlankErrorDescription].
	((aPrefix findString: ' ') > 0) ifTrue:[self error: SentenceFinderByPrefix prefixHaveSpacesErrorDescription]! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:27:46' prior: 50925656!
find: aPrefix
	
	self checkIfAPrefixIsValid: aPrefix.
	
	
	[self areSentencesRemaining] 
		whileTrue:[ | sentence |
			sentence := originalStack pop.
				(sentence beginsWith: aPrefix) 
					ifTrue:[sentencesFound addFirst: sentence].
				reversedOrderStack addFirst: sentence.
				
				].
			

	
			
				
	^'hola'
	
	! !
!SentenceFinderByPrefix methodsFor: 'checks' stamp: 'mf 4/28/2022 08:28:30' prior: 50925674!
checkIfAPrefixIsValid: aPrefix

	(aPrefix = '') ifTrue:[self error: SentenceFinderByPrefix prefixBlankErrorDescription].
	
	((aPrefix findString: ' ') > 0) ifTrue:[self error: SentenceFinderByPrefix prefixHaveSpacesErrorDescription]! !

!testRun: #SentenceFinderByPrefixTest #test05prefixCanNotBeBlank stamp: 'mf 4/28/2022 08:28:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06prefixCanNotHaveSpaces stamp: 'mf 4/28/2022 08:28:46'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:31:28'!
saveTheTopOfTheStackIfItStartsWith: aPrefix

	| sentence |
			sentence := originalStack pop.
				(sentence beginsWith: aPrefix) 
					ifTrue:[sentencesFound addFirst: sentence].
				reversedOrderStack addFirst: sentence! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:31:28' prior: 50925685!
find: aPrefix
	
	self checkIfAPrefixIsValid: aPrefix.
	
	
	[self areSentencesRemaining] 
		whileTrue:[ self saveTheTopOfTheStackIfItStartsWith: aPrefix.
				
				].
			

	
			
				
	^'hola'
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:35:38' prior: 50925726!
find: aPrefix
	
	self checkIfAPrefixIsValid: aPrefix.
	
	self findSentencesStartedWith: aPrefix.		
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:37:57'!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] whileTrue:
		[
			self areSentencesRemaining.
			]
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'mf 4/28/2022 08:38:01' prior: 50925743!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] whileTrue:
		[
			self areSentencesRemaining.
			].
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:39:10' prior: 50925751!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] whileTrue:
		[
			self saveTheTopOfTheStackIfItStartsWith: aPrefix.
			].
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:41:09' prior: 50925715!
saveTheTopOfTheStackIfItStartsWith: aPrefix

	(originalStack top beginsWith: aPrefix) ifTrue:[sentencesFound addFirst: (originalStack top)].! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:42:22' prior: 50925759!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] whileTrue:
		[
			self saveTheTopOfTheStackIfItStartsWith: aPrefix.
			self removeTopOfTheStackAndSaveIt.
			
			].
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:42:59'!
removeTopOfTheStackAndSaveIt

	reversedOrderStack push: originalStack pop.
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:43:50' prior: 50925776!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] whileTrue:
		[
			self saveTheTopOfTheStackIfItStartsWith: aPrefix.
			self removeTopOfTheStackAndSaveIt.
			
			].
		
	self returnTheStackToItsOriginalValue.
				
	^sentencesFound
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:46:07'!
returnTheStackToItsOriginalValue

	[reversedOrderStack isEmpty not]
	whileTrue:[
		originalStack push: reversedOrderStack pop.
		]
	
	! !
!SentenceFinderByPrefix methodsFor: 'modify' stamp: 'mf 4/28/2022 08:46:40' prior: 50925791!
findSentencesStartedWith: aPrefix
	
	[self areSentencesRemaining] 
	whileTrue:[
			self saveTheTopOfTheStackIfItStartsWith: aPrefix.
			self removeTopOfTheStackAndSaveIt.	
		].
		
	self returnTheStackToItsOriginalValue.
				
	^sentencesFound
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentencedFoundShouldBeEmptyIfNotSentenceWithPrefixFound stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentencedFoundShouldBeSizeOfSentencesWithPrefix stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentencedFoundShouldBeInSameOrderAnWithPrefix stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentencedFinderDoesNotChangeTheStack stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05prefixCanNotBeBlank stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06prefixCanNotHaveSpaces stamp: 'mf 4/28/2022 08:47:04'!
PASSED!

----QUIT----(28 April 2022 08:48:21) CuisUniversity-4532.image priorSource: 18952617!

----STARTUP---- (28 April 2022 08:49:54) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'mf 4/28/2022 08:50:01'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'originalStack reversedOrderStack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONotEmptyStackTop stamp: 'mf 4/28/2022 08:50:01'!
OOStackTop subclass: #OONotEmptyStackTop
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOEmptyStackTop stamp: 'mf 4/28/2022 08:50:02'!
OOStackTop subclass: #OOEmptyStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTop stamp: 'mf 4/28/2022 08:50:02'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'mf 4/28/2022 08:50:02'!
Object subclass: #OOStack
	instanceVariableNames: 'elements top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'mf 4/28/2022 08:50:03'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'mf 4/28/2022 08:50:03'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\Cuis\03-Stack\Stack-Exercise.st----!

!methodRemoval: SentenceFinderByPrefix #fillSavedStackWith: stamp: 'mf 4/28/2022 08:51:18'!
fillSavedStackWith: aCollectionOfSentences
	
	[((aCollectionOfSentences isEmpty) not)] 
		whileTrue:[		savedStack push: aCollectionOfSentences first.
				aCollectionOfSentences removeFirst.
				].!

----QUIT----(28 April 2022 08:52:00) CuisUniversity-4532.image priorSource: 19014320!

----STARTUP---- (1 May 2022 18:54:57) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\Parciales-master\2021-2c\1erParcial\ISW1-2021-2C-1erParcial.st----!
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:25:22'!
assertThereIsEnoughWater: anAmmountOfWater AndEnergy: anAmmountOfEnergy 

	| aService |
	services ifNil: [ services _ OrderedCollection new].
	services add: aService.! !

5 + ep.!

5 * ep.!

5 * ep unit !

5 * ep.!

5 * ep!
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:28:39' prior: 50926991!
assertThereIsEnoughWater: anAmmountOfWater AndEnergy: anAmmountOfEnergy 

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:28:56' prior: 50927001!
assertThereIsEnoughWater: anAmmountOfWater AndEnergy: anAmmountOfEnergy 

	self energyAvailable < (anAmmountOfEnergy * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (anAmmountOfWater * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:30:18' prior: 50926775!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self assertThereISEnoughWater: (9*wp) AndEnergy: (5*ep).
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:30:31' prior: 50927024!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self assertThereIsEnoughWater: (9*wp) AndEnergy: (5*ep).
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:30:55' prior: 50927051!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self assertThereIsEnoughWater: (9*wp) AndEnergy: (5*ep).
	].

	aZone type = #Commertial ifTrue: [
		self assertThereIsEnoughWater: (8*wp) AndEnergy: (2*ep).
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:31:14' prior: 50927078!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self assertThereIsEnoughWater: (9*wp) AndEnergy: (5*ep).
	].

	aZone type = #Commertial ifTrue: [
		self assertThereIsEnoughWater: (8*wp) AndEnergy: (2*ep).
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self assertThereIsEnoughWater: (10*wp) AndEnergy: (10*ep).
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'mf 5/1/2022 19:31:27' prior: 50927101!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self assertThereIsEnoughWater: (9*wp) AndEnergy: (5*ep).
	].

	aZone type = #Commertial ifTrue: [
		self assertThereIsEnoughWater: (8*wp) AndEnergy: (2*ep).		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self assertThereIsEnoughWater: (10*wp) AndEnergy: (10*ep).
	].

	zones add: aZone.
! !

!classRemoval: #Zone stamp: 'mf 5/1/2022 19:33:11'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 5/1/2022 19:33:11'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 5/1/2022 19:33:11'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 5/1/2022 19:33:12'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\Parciales-master\2021-2c\1erParcial\ISW1-2021-2C-1erParcial-Solution.st----!
!City methodsFor: 'zones' stamp: 'mf 5/1/2022 19:34:52' prior: 50927553!
addZone: aZone

	aZone assertCanBeAddedTo: self.
	
	zones add: aZone.
! !

!classRemoval: #ResidentialZone stamp: 'mf 5/1/2022 19:36:44'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'mf 5/1/2022 19:36:44'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'mf 5/1/2022 19:36:45'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 5/1/2022 19:36:45'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 5/1/2022 19:36:45'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 5/1/2022 19:36:46'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 5/1/2022 19:36:46'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\Parciales-master\2021-2c\1erParcial\ISW1-2021-2C-1erParcial.st----!

!classRemoval: #Zone stamp: 'mf 5/1/2022 19:43:28'!
Object subclass: #Zone
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 5/1/2022 19:43:29'!
Object subclass: #Service
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 5/1/2022 19:43:29'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 5/1/2022 19:43:29'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\Parciales-master\2021-2c\1erParcial\ISW1-2021-2C-1erParcial-Solution.st----!

----QUIT----(1 May 2022 19:49:00) CuisUniversity-4532.image priorSource: 19032192!

----STARTUP---- (1 May 2022 19:54:22) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #ResidentialZone stamp: 'mf 5/1/2022 19:54:42'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'mf 5/1/2022 19:54:42'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'mf 5/1/2022 19:54:43'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 5/1/2022 19:54:43'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 5/1/2022 19:54:43'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 5/1/2022 19:54:44'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 5/1/2022 19:54:44'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of D:\Descargas\Parciales-master\2021-2c\Recuperatorio\ISW1-2021-2C-Recuperatorio-1erParcial.st----!

!testRun: #TestISWSmartBuilding #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'mf 5/1/2022 20:01:59'!
ERROR!

!testRun: #TestISWSmartBuilding #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'mf 5/1/2022 20:02:07'!
ERROR!

!classRemoval: #ServicioMeteorologico stamp: 'mf 5/1/2022 20:02:23'!
Object subclass: #ServicioMeteorologico
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #PrecioFijo stamp: 'mf 5/1/2022 20:02:23'!
PrecioDeConstruccion subclass: #PrecioFijo
	instanceVariableNames: 'precio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #PrecioDependienteDeClima stamp: 'mf 5/1/2022 20:02:23'!
PrecioDeConstruccion subclass: #PrecioDependienteDeClima
	instanceVariableNames: 'precioParaDiasNoLluviosos precioParaDiasLluviosos servicioMeteorologico'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #PrecioDeConstruccion stamp: 'mf 5/1/2022 20:02:23'!
Object subclass: #PrecioDeConstruccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #EquipoSimple stamp: 'mf 5/1/2022 20:02:24'!
EquipoDeTrabajo subclass: #EquipoSimple
	instanceVariableNames: 'precio capacidadDeConstruccion estadoDeAnimo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #EquipoCombinado stamp: 'mf 5/1/2022 20:02:24'!
EquipoDeTrabajo subclass: #EquipoCombinado
	instanceVariableNames: 'equipos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #EquipoDeTrabajo stamp: 'mf 5/1/2022 20:02:24'!
Object subclass: #EquipoDeTrabajo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #CapacidadVariable stamp: 'mf 5/1/2022 20:02:25'!
CapacidadDeConstruccion subclass: #CapacidadVariable
	instanceVariableNames: 'capacidadDeConstruccionInicial tiempoInicial capacidadDeConstruccionRestante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #CapacidadFija stamp: 'mf 5/1/2022 20:02:25'!
CapacidadDeConstruccion subclass: #CapacidadFija
	instanceVariableNames: 'capacidadDeConstruccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #CapacidadDeConstruccion stamp: 'mf 5/1/2022 20:02:25'!
Object subclass: #CapacidadDeConstruccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classRemoval: #TestISWSmartBuilding stamp: 'mf 5/1/2022 20:02:26'!
TestCase subclass: #TestISWSmartBuilding
	instanceVariableNames: 'diasLluviosos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

----End fileIn of D:\Descargas\Parciales-master\2021-2c\Recuperatorio\ISW1-2021-2C-Recuperatorio-1erParcial.st----!

!testRun: #TestISWSmartBuilding #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'mf 5/1/2022 20:02:43'!
ERROR!

!testRun: #TestISWSmartBuilding #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'mf 5/1/2022 20:02:43'!
ERROR!

----STARTUP---- (1 May 2022 20:35:40) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\Parciales-master\2021-1c\1erParcial\ISW1-2021-1C-1erParcial-11Parcial.st----!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/1/2022 20:39:31'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/1/2022 20:39:33'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/1/2022 20:39:33'!
PASSED!
!Robot methodsFor: 'initialization' stamp: 'mf 5/1/2022 20:39:54' prior: 50931658!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons _ OrderedCollection new.

	! !
!Robot methodsFor: 'attacking' stamp: 'mf 5/1/2022 20:40:12' prior: 50931667!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:40:22' prior: 50931677!
addWeapon: aWeapon
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:40:34' prior: 50931689!
includesWeapon: aWeapon 

	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:40:43' prior: 50931695!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:40:51' prior: 50931702!
removeWeapon: aWeapon 

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:41:00' prior: 50931708!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:41:09' prior: 50931721!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/1/2022 20:41:16' prior: 50931733!
weaponsCount

	^ weapons size 	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/1/2022 20:41:41'!
PASSED!

----QUIT----(1 May 2022 20:45:14) CuisUniversity-4532.image priorSource: 19118817!

----STARTUP---- (2 May 2022 04:57:47) as D:\Cuis\CuisUniversity-4532.image!

!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 04:59:11' prior: 50931988!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	aWeapon attack: aVictim by: self! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 04:59:17'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 04:59:17'!
PASSED!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 04:59:47' prior: 50931978!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.

	! !
!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:03:47' prior: 50932123!
attack: aVictim with: aWeapon

	(self includesWeapon: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	aWeapon attack: aVictim by: self! !
!Robot methodsFor: 'life' stamp: 'mf 5/2/2022 05:04:23' prior: 50931741!
life: newLife

	life _ newLife! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:04:35' prior: 50932201!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:05:30' prior: 50932223!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| totalWeaponWeight |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:06:12' prior: 50932233!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| totalWeaponWeight |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:06:50' prior: 50932245!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| kk |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	kk _ 0.
	

	! !

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:06:58'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:07:08' prior: 50932275!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:08:41' prior: 50932301!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ aMaxWeaponWeight.
	

	! !

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons availableWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:10:12'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons availableWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:10:24' prior: 50932312!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	availableWeight _ aMaxWeaponWeight.
	

	! !

Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:12:13'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:12:23' prior: 50932338!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	

	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:13:59' prior: 50932035!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	weapons sum: [:aWeapon | aWeapon weight]

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:14:14' prior: 50932373!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	weapons sum: [:aWeapon | aWeapon weight]

	"^ total.	"! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:14:17' prior: 50932385!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^weapons sum: [:aWeapon | aWeapon weight]

	"^ total.	"! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:14:26'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:16:30' prior: 50932397!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^weapons sum: [:aWeapon | aWeapon weight] ifEmpty: 0.

	"^ total.	"! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:16:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:16:37'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:17:00' prior: 50932412!
totalWeaponWeight

	^weapons sum: [:aWeapon | aWeapon weight] ifEmpty: 0.
! !

carlos : OrderedCollection with: 1 with: (-1) with: 4.!

carlos _ OrderedCollection with: 1 with: (-1) with: 4.!

carlos detect: [:aNumber | aNumber > 0].!
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:29:19' prior: 50932023!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	"^ total."
	
	^(weapons select: [:aWeapon | aWeapon weight > (10 * kilogram)]) sum: [:aWeapon | aWeapon speedImpact] ifEmpty: 0 .! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:29:25'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:29:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:29:26'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:29:49' prior: 50932503!
totalSpeedImpact
	
	^(weapons select: [:aWeapon | aWeapon weight > (10 * kilogram)]) sum: [:aWeapon | aWeapon speedImpact] ifEmpty: 0 .! !
!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:31:29' prior: 50932211!
attack: aVictim with: aWeapon

	(self includesWeapon: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	
	aWeapon attack: aVictim by: self! !

Weapon subclass: #Claw
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:33:48'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:34:02'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/2/2022 05:34:17'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Claw new.!

Claw new class.!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:35:18'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:35:19'!
PASSED!

	^self class.!
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:35:31' prior: 50931872!
type
	
	^self class.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:35:34'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:35:37'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:35:37'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:35:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:35:37'!
FAILURE!

Claw new type.!

Claw new className!

Claw new className!
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:38:17' prior: 50932715!
type
	
	^self className.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:38:25'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:38:25'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:38:25'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:38:26'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:38:26'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:38:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:38:26'!
FAILURE!
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:39:51' prior: 50932793!
type
	
	^self class name.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:40:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:40:06'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:40:06'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:40:06'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:40:06'!
FAILURE!

self class!

self class name!

Claw new class name!
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:41:14' prior: 50932866!
type
	
	^type.! !
!Claw methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:43:21' overrides: 16896425!
initialize
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:43:49' prior: 50932945 overrides: 16896425!
initialize

	weight := 0.
	speedImpact := 0.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:44:27' prior: 50932949 overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * meter / hour.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:45:07' prior: 50932955 overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:45:17' prior: 50932962 overrides: 16896425!
initialize

	weight _ 10 * kilogram.
	speedImpact _ 5 * kilometer / hour.
	usedTimes _ 0.
	
	! !
!HSBlaster class methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:46:10' overrides: 16883149!
initialize
	
	! !

!methodRemoval: HSBlaster class #initialize stamp: 'mf 5/2/2022 05:46:23'!
initialize
	
	!
!HSBlaster methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:47:00' overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour ! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:47:23' prior: 50932982 overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour.
	usedTimes _ 0.! !
!TurboLaserCannon methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:47:39' overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour.
	usedTimes _ 0! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:47:57' prior: 50932994 overrides: 16896425!
initialize 

	weight _ 40 * kilogram. 
	speedImpact _ 15 * kilometer / hour.
	usedTimes _ 0! !
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:48:20' prior: 50932941!
type
	
	^self class name.! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:39' prior: 50931606!
createClaw

	^ Claw new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:46' prior: 50931610!
createHSBlaster

	^ HSBlaster new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:53' prior: 50931614!
createTurboLaserCannon

	^ TurboLaserCannon new! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:49:03'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:49:03'!
FAILURE!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:49:44'!
FAILURE!

attackerWeapon!

attackerWeapon!

self class name!

self type!

self weight!

self speedImpact!

attacker!
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:53:26' prior: 50931832!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:53:38'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:53:39'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:53:39'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:53:39'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:53:39'!
FAILURE!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:54:31'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:54:31'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:54:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:54:31'!
FAILURE!
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:55:37' prior: 50933101!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:55:47' prior: 50933281!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:56:04' prior: 50933322!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (HSBlaster new) ]
		].
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:56:10'!
PASSED!

!methodRemoval: Weapon class #ofType: stamp: 'mf 5/2/2022 05:57:15'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'!

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'mf 5/2/2022 05:57:20'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 05:57:25'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 05:57:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 05:57:26'!
PASSED!
!Weapon methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:57:55' overrides: 16896425!
initialize
	
	self subclassResponsibility.! !
!Weapon methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:58:00' prior: 50933566 overrides: 16896425!
initialize
	
	self subclassResponsibility! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:59:38' overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:07' overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:13' overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:53' prior: 50933589 overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:01:39' prior: 50933615 overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:02' prior: 50933602 overrides: 50933362!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 06:04:14'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 06:04:14'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 06:04:14'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 06:04:14'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 06:04:14'!
FAILURE!
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:48' prior: 50933576 overrides: 50933362!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:54' prior: 50933628 overrides: 50933362!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:05:01' prior: 50933645 overrides: 50933362!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'mf 5/2/2022 06:05:06'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'mf 5/2/2022 06:05:07'!
PASSED!

!classRemoval: #TurboLaserCannon stamp: 'mf 5/2/2022 06:08:24'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

!classRemoval: #HSBlaster stamp: 'mf 5/2/2022 06:08:24'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

!classRemoval: #Claw stamp: 'mf 5/2/2022 06:08:25'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

!classRemoval: #Weapon stamp: 'mf 5/2/2022 06:08:25'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

!classRemoval: #Robot stamp: 'mf 5/2/2022 06:08:25'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

!classRemoval: #RobotWarsTest stamp: 'mf 5/2/2022 06:08:26'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Solucion robot manu kpo'!

----End fileIn of D:\Descargas\Parciales-master\2021-1c\1erParcial\ISW1-2021-1C-1erParcial-11Resolucion.st----!

----STARTUP---- (16 May 2022 12:51:44) as D:\Cuis\CuisUniversity-4532.image!

!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 04:59:11' prior: 50931988!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	aWeapon attack: aVictim by: self! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 04:59:47' prior: 50931978!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.

	! !
!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:03:47' prior: 50934542!
attack: aVictim with: aWeapon

	(self includesWeapon: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	aWeapon attack: aVictim by: self! !
!Robot methodsFor: 'life' stamp: 'mf 5/2/2022 05:04:23' prior: 50931741!
life: newLife

	life _ newLife! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:04:35' prior: 50934550!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:05:30' prior: 50934572!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| totalWeaponWeight |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:06:12' prior: 50934582!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| totalWeaponWeight |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:06:50' prior: 50934594!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	| kk |
	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	kk _ 0.
	

	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons totalWeaponWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:07:08' prior: 50934606!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ 0.
	

	! !
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:08:41' prior: 50934635!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	totalWeaponWeight _ aMaxWeaponWeight.
	

	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons availableWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons availableWeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:10:24' prior: 50934646!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	availableWeight _ aMaxWeaponWeight.
	

	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:12:23' prior: 50934675!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type _ aRobotType.
	life _ lifePoints.
	speed _ aSpeed.
	maxWeaponWeight _ aMaxWeaponWeight.
	weapons _ OrderedCollection new.
	

	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:13:59' prior: 50932035!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	weapons sum: [:aWeapon | aWeapon weight]

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:14:14' prior: 50934713!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	weapons sum: [:aWeapon | aWeapon weight]

	"^ total.	"! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:14:17' prior: 50934725!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^weapons sum: [:aWeapon | aWeapon weight]

	"^ total.	"! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:16:30' prior: 50934737!
totalWeaponWeight

	| total index |

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^weapons sum: [:aWeapon | aWeapon weight] ifEmpty: 0.

	"^ total.	"! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:17:00' prior: 50934749!
totalWeaponWeight

	^weapons sum: [:aWeapon | aWeapon weight] ifEmpty: 0.
! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:29:19' prior: 50932023!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	"^ total."
	
	^(weapons select: [:aWeapon | aWeapon weight > (10 * kilogram)]) sum: [:aWeapon | aWeapon speedImpact] ifEmpty: 0 .! !
!Robot methodsFor: 'weapons' stamp: 'mf 5/2/2022 05:29:49' prior: 50934766!
totalSpeedImpact
	
	^(weapons select: [:aWeapon | aWeapon weight > (10 * kilogram)]) sum: [:aWeapon | aWeapon speedImpact] ifEmpty: 0 .! !
!Robot methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:31:29' prior: 50934560!
attack: aVictim with: aWeapon

	(self includesWeapon: aWeapon) ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ].
	
	aWeapon attack: aVictim by: self! !

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:48'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:49'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:49'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:49'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:49'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:49'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:35:31' prior: 50931872!
type
	
	^self class.! !
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:38:17' prior: 50934842!
type
	
	^self className.! !
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:39:51' prior: 50934846!
type
	
	^self class name.! !
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:41:14' prior: 50934850!
type
	
	^type.! !
!Claw methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:43:21' overrides: 16896425!
initialize
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:43:49' prior: 50934858 overrides: 16896425!
initialize

	weight := 0.
	speedImpact := 0.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:44:27' prior: 50934862 overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * meter / hour.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:45:07' prior: 50934868 overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:45:17' prior: 50934875 overrides: 16896425!
initialize

	weight _ 10 * kilogram.
	speedImpact _ 5 * kilometer / hour.
	usedTimes _ 0.
	
	! !
!HSBlaster class methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:46:10' overrides: 16883149!
initialize
	
	! !

!methodRemoval: HSBlaster class #initialize stamp: 'mf 5/16/2022 12:51:49'!
initialize
	
	!
!HSBlaster methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:47:00' overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour ! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:47:23' prior: 50934895 overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour.
	usedTimes _ 0.! !
!TurboLaserCannon methodsFor: 'no messages' stamp: 'mf 5/2/2022 05:47:39' overrides: 16896425!
initialize 

	weight _ 20 * kilogram. 
	speedImpact _ 10 * kilometer / hour.
	usedTimes _ 0! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:47:57' prior: 50934907 overrides: 16896425!
initialize 

	weight _ 40 * kilogram. 
	speedImpact _ 15 * kilometer / hour.
	usedTimes _ 0! !
!Weapon methodsFor: 'type' stamp: 'mf 5/2/2022 05:48:20' prior: 50934854!
type
	
	^self class name.! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:39' prior: 50931606!
createClaw

	^ Claw new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:46' prior: 50931610!
createHSBlaster

	^ HSBlaster new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'mf 5/2/2022 05:48:53' prior: 50931614!
createTurboLaserCannon

	^ TurboLaserCannon new! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:53:26' prior: 50931832!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:55:37' prior: 50934938!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:55:47' prior: 50934979!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'mf 5/2/2022 05:56:04' prior: 50935020!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	self type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		].
	].

	self type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (HSBlaster new) ]
		].
	].! !

!methodRemoval: Weapon class #ofType: stamp: 'mf 5/16/2022 12:51:49'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'!

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'mf 5/16/2022 12:51:49'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!
!Weapon methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:57:55' overrides: 16896425!
initialize
	
	self subclassResponsibility.! !
!Weapon methodsFor: 'initialization' stamp: 'mf 5/2/2022 05:58:00' prior: 50935125 overrides: 16896425!
initialize
	
	self subclassResponsibility! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 05:59:38' overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:07' overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:13' overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:00:53' prior: 50935148 overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:01:39' prior: 50935174 overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:02' prior: 50935161 overrides: 50935060!
attack: aVictim by: anAttacker 	

	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:48' prior: 50935135 overrides: 50935060!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:04:54' prior: 50935187 overrides: 50935060!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (5 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (TurboLaserCannon new) ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (50 * year).
		aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'mf 5/2/2022 06:05:01' prior: 50935204 overrides: 50935060!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (100 * year).
		usedTimes = 5 ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (HSBlaster new) ]
	].! !

!classRemoval: #TurboLaserCannon stamp: 'mf 5/16/2022 12:51:50'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'mf 5/16/2022 12:51:50'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'mf 5/16/2022 12:51:50'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'mf 5/16/2022 12:51:51'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'mf 5/16/2022 12:51:51'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'mf 5/16/2022 12:51:51'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:51'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:51'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:10'!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	addedWeapon := self createTurboLaserCannon.
	robot addWeapon: addedWeapon.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:48'!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRover.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 16:04:51'!
test03ShouldHaveZeroWeightWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilogram equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:23'!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot weapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.

	robot addWeapon: weapon.

	self assert: weapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 16:05:22'!
test05ShouldHaveZeroSpeedWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilometer / hour equals: robot totalSpeedImpact.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:57'!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapon anotherWeapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.
	anotherWeapon := self createClaw.

	robot addWeapon: weapon.
	robot addWeapon: anotherWeapon.

	self assert: weapon weight + anotherWeapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:05'!
test07ClawReducesLifeOfAluminum3000By25

	self assertAttacking: self createAluminum3000 with: self createClaw reducesLifeBy: 25 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:09'!
test08ClawReducesLifeOfTankRoverBy5

	self assertAttacking: self createTankRover with: self createClaw reducesLifeBy: 5 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:13'!
test09HSBlasterReducesLifeOfAluminum3000By5

	self assertAttacking: self createAluminum3000 with: self createHSBlaster reducesLifeBy: 5 * year
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:05:33'!
test10HSBlasterReducesLifeOfTankRoverBy50

	self assertAttacking: self createTankRover with: self createHSBlaster reducesLifeBy: 50 * year
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:20'!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	self assertAttacking: self createAluminum3000 with: self createTurboLaserCannon reducesLifeBy: 100 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:24'!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	self assertAttacking: self createTankRover with: self createTurboLaserCannon reducesLifeBy: 100 * year! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:41:40'!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	2 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:42:05'!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:58:31'!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:58:48'!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:43:35'!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createTurboLaserCannon.
	attacker addWeapon: attackerWeapon.
	
	10 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:31:17'!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon .
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: HSBlaster)
	! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 17:49:45'!
createAluminum3000

	^ Aluminum3000 new! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 17:49:52'!
createTankRover

	^ TankRover new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:41'!
createClaw

	^ Claw new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:50'!
createHSBlaster

	^ HSBlaster new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:56'!
createTurboLaserCannon

	^ TurboLaserCannon new! !
!RobotWarsTest methodsFor: 'assertions' stamp: 'HAW 5/2/2021 16:05:45'!
assertAttacking: attacked with: attackerWeapon reducesLifeBy: delta  

	| attacker |
	
	attacker := self createAluminum3000.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 100 * year - delta equals: attacked life! !

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:52'!
RobotWarsTest class
	instanceVariableNames: ''!

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:52'!
RobotWarsTest class
	instanceVariableNames: ''!
!RobotWarsTest class methodsFor: 'class initialization' stamp: 'HAW 5/2/2021 16:01:30' overrides: 16883149!
initialize

	"Este método está para crear una unidad que falta, no lo deben tocar ni darle importancia durante 
	el parcial - Hernan"
	| kilogram |
	gram := BaseUnit named: 'gram' sign: 'g'.
	kilogram := ProportionalDerivedUnit baseUnit: gram conversionFactor: 1000  named: 'kilogram' sign: 'kg'.
	
	Smalltalk at: #kilogram put: kilogram
	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'assertions' stamp: 'HAW 4/30/2021 19:23:06'!
assertAddingNewWeaponDoesNotPassMaxWeaponWeight: aWeapon

	^ (self totalWeaponWeight + aWeapon weight) > self maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ]! !
!Robot methodsFor: 'assertions' stamp: 'HAW 4/30/2021 19:21:43'!
assertAddingNewWeaponDoesNotPassSpeed: aWeapon

	^ (self totalSpeedImpact + aWeapon speedImpact) > self speed ifTrue: [ self signalSpeedBelowZero ]! !
!Robot methodsFor: 'attacking' stamp: 'HAW 4/30/2021 17:13:38'!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:06:40'!
attackedWith: aWeapon by: anAttacker

	self subclassResponsibility ! !
!Robot methodsFor: 'exceptions' stamp: 'HAW 4/29/2021 20:49:49'!
signalCanNotAttackWithWeaponNotBelongingToRobot
	
	self error: self class canNotAttackWithWeaponNotBelongingToRobotErrorDescription! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 16:02:10'!
signalMaxWeaponWeightExceeded

	self error: self class maxWeaponWeightExceededErrorDescription 	! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 22:53:14'!
signalSpeedBelowZero

	self error: self class speedBelowZeroErrorDescription 	! !
!Robot methodsFor: 'initialization' stamp: 'HAW 5/2/2021 16:01:56' overrides: 16896425!
initialize
	
	weapons := OrderedCollection new.
	life := 100 * year.

	! !
!Robot methodsFor: 'life' stamp: 'FRT 4/28/2021 20:33:19'!
life

	^ life! !
!Robot methodsFor: 'life' stamp: 'HAW 4/30/2021 18:05:23'!
reduceLifeBy: lifePoints

	life := life - lifePoints! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:18:10'!
addWeapon: aWeapon

	self assertAddingNewWeaponDoesNotPassMaxWeaponWeight: aWeapon.
	self assertAddingNewWeaponDoesNotPassSpeed: aWeapon.
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:13:44'!
includesWeapon: aWeapon 
	
	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:58:42'!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon class = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:13:54'!
removeWeapon: aWeapon 
	
	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 16:02:46'!
totalSpeedImpact

	^ (weapons select: [ :weapon | weapon weight > (10 * kilogram) ])
		sum: [ :weapon | weapon speedImpact ] ifEmpty: [ 0 * kilometer / hour ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 16:02:54'!
totalWeaponWeight

	^weapons sum: [ :weapon | weapon weight ] ifEmpty: [ 0 * kilogram ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:14:11'!
weaponsCount

	^ weapons size 	! !
!Robot methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:24:25'!
maxWeaponWeight

	self subclassResponsibility ! !
!Robot methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:24:30'!
speed

	self subclassResponsibility ! !

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot class
	instanceVariableNames: ''!

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot class
	instanceVariableNames: ''!
!Robot class methodsFor: 'error description' stamp: 'HAW 4/29/2021 20:50:34'!
canNotAttackWithWeaponNotBelongingToRobotErrorDescription
	
	^'Cannot attack with weapon not belonging to robot'! !
!Robot class methodsFor: 'error description' stamp: 'FRT 4/28/2021 16:04:48'!
maxWeaponWeightExceededErrorDescription

	^ 'Maximum weapon weight has been exceeded'! !
!Robot class methodsFor: 'error description' stamp: 'FRT 4/28/2021 22:53:14'!
speedBelowZeroErrorDescription

	^ 'Speed cannot be below zero'! !

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Aluminum3000 methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 17:51:56' overrides: 50935651!
attackedWith: aWeapon by: anAttacker

	^aWeapon attackAluminum3000: self by: anAttacker ! !
!Aluminum3000 methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:12' overrides: 50935725!
maxWeaponWeight

	^50 * kilogram ! !
!Aluminum3000 methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:22' overrides: 50935729!
speed

	^ 90 * kilometer / hour
	! !

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!TankRover methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 17:53:09' overrides: 50935651!
attackedWith: aWeapon by: anAttacker

	^aWeapon attackTankRover: self by: anAttacker ! !
!TankRover methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:30' overrides: 50935725!
maxWeaponWeight

	^200 * kilogram ! !
!TankRover methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:40' overrides: 50935729!
speed
	
	^40 * kilometer / hour! !

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:53'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Weapon methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:28:14'!
speedImpact
	
	self subclassResponsibility ! !
!Weapon methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:28:21'!
weight
	
	self subclassResponsibility ! !
!Weapon methodsFor: 'initialization' stamp: 'HAW 4/30/2021 19:27:23' overrides: 16896425!
initialize 
	
	usedTimes := 0.! !
!Weapon methodsFor: 'attacking' stamp: 'HAW 4/30/2021 17:57:18'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim attackedWith: self by: anAttacker 
	! !
!Weapon methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:01:40'!
attackAluminum3000: aVictim by: anAttacker

	self subclassResponsibility ! !
!Weapon methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:01:55'!
attackTankRover: aVictim by: anAttacker
	
	self subclassResponsibility ! !

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:06:56' overrides: 50935853!
attackAluminum3000: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 25 * year.
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
! !
!Claw methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:01' overrides: 50935858!
attackTankRover: aVictim by: anAttacker

	aVictim reduceLifeBy: 5 * year.
	anAttacker removeWeapon: self.
	! !
!Claw methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:53' overrides: 50935834!
speedImpact

	^ 5 * kilometer / hour
! !
!Claw methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:58' overrides: 50935838!
weight

	^ 10 * kilogram ! !

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!HSBlaster methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:09' overrides: 50935853!
attackAluminum3000: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 5 * year.
	usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: self.
		anAttacker addWeapon: TurboLaserCannon new ].
! !
!HSBlaster methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:08:21' overrides: 50935858!
attackTankRover: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 50 * year.
	aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
! !
!HSBlaster methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:07' overrides: 50935834!
speedImpact

	^ 10 * kilometer / hour! !
!HSBlaster methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:14' overrides: 50935838!
weight

	^ 20 * kilogram ! !

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'mf 5/16/2022 12:51:54'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!TurboLaserCannon methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:19' overrides: 50935853!
attackAluminum3000: aVictim by: anAttacker 
	
	aVictim reduceLifeBy: 100 * year.
	usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ].
	! !
!TurboLaserCannon methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:25' overrides: 50935858!
attackTankRover: aVictim by: anAttacker

	aVictim reduceLifeBy: 100 * year.
	usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: self.
		anAttacker addWeapon: HSBlaster new].
	! !
!TurboLaserCannon methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:24' overrides: 50935834!
speedImpact

	^ 15 * kilometer / hour! !
!TurboLaserCannon methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:32' overrides: 50935838!
weight

	^ 40 * kilogram ! !

!classRemoval: #TurboLaserCannon stamp: 'mf 5/16/2022 12:52:06'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'mf 5/16/2022 12:52:07'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'mf 5/16/2022 12:52:07'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'mf 5/16/2022 12:52:07'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'mf 5/16/2022 12:52:07'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'mf 5/16/2022 12:52:08'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'mf 5/16/2022 12:52:08'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'mf 5/16/2022 12:52:08'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #ResidentialZone stamp: 'mf 5/16/2022 12:52:24'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'mf 5/16/2022 12:52:24'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'mf 5/16/2022 12:52:24'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'mf 5/16/2022 12:52:25'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'mf 5/16/2022 12:52:25'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'mf 5/16/2022 12:52:25'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'mf 5/16/2022 12:52:26'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'mf 5/16/2022 12:52:42'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'mf 5/16/2022 12:53:07'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

(0,0) !

Point!

carlos _ Point x: 0 y: 0!

carlos!

carlos _ 0@0!

carlos _ 0@0.!

carlos _ carlos + (1@0)!

carlos _ carlos + (1@0)!

carlos _ carlos + (1@0)!

carlos _ carlos + (1@0)!

carlos _ carlos + (1@0)!

carlos _ carlos + (1@0)!

!classRemoval: #MarsRover stamp: 'mf 5/16/2022 13:03:14'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'mf 5/16/2022 13:03:15'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of D:\Descargas\ing1-2021-c2-main\16-Mars Rover\Mars-Rover.st----!

!classRenamed: #MarsRover as: #MarsRoverValen stamp: 'mf 5/16/2022 13:07:14'!
Smalltalk renameClassNamed: #MarsRover as: #MarsRoverValen!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936159!
test04OneCommandLeft
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'l'.
	self assert: 1@4 equals: newMars position.
	self assert: 'O' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936240!
test12MoreCommandsWithErrorStops
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'fefff'.
	self assert: 1@5 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936149!
test03OneCommandBackward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'b'.
	self assert: 1@3 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936179!
test06TwoCommandLeftForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'lf'.
	self assert: 0@4 equals: newMars position.
	self assert: 'O' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936139!
test02OneCommandForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'f'.
	self assert: 1@5 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936129!
test01NewMarsIsWhereDeployedAndPointing
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: ''.
	self assert: 1@4 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936209!
test09MoreCommandsForwardForwardForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'fff'.
	self assert: 1@7 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936169!
test05OneCommandRight
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'r'.
	self assert: 1@4 equals: newMars position.
	self assert: 'E' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936199!
test08TwoCommandForwardForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'ff'.
	self assert: 1@6 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverValen class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936538!
deployAt: aPosition pointing: aDirection
	^ MarsRoverValen new initializeDeployAt: aPosition poiting: aDirection.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936230!
test11MoreCommandsRightLeftForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'rlf'.
	self assert: 1@5 equals: newMars position.
	self assert: 'N' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936220!
test10MoreCommandsLeftLeftForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'llf'.
	self assert: 1@3 equals: newMars position.
	self assert: 'S' equals: newMars pointingDirection.
	
	! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:07:14' prior: 50936189!
test07TwoCommandRightForward
	|newMars|
	newMars := MarsRoverValen deployAt: 1@4 pointing: 'N'.
	newMars processCommands: 'rf'.
	self assert: 2@4 equals: newMars position.
	self assert: 'E' equals: newMars pointingDirection.
	
	! !

!classRenamed: #MarsRoverTests as: #MarsRoverValenTests stamp: 'mf 5/16/2022 13:07:47'!
Smalltalk renameClassNamed: #MarsRoverTests as: #MarsRoverValenTests!

!testRun: #MarsRoverValenTests #test01NewMarsIsWhereDeployedAndPointing stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test01NewMarsIsWhereDeployedAndPointing stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test02OneCommandForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test03OneCommandBackward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test04OneCommandLeft stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test05OneCommandRight stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test06TwoCommandLeftForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test07TwoCommandRightForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test08TwoCommandForwardForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test09MoreCommandsForwardForwardForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test10MoreCommandsLeftLeftForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test11MoreCommandsRightLeftForward stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

!testRun: #MarsRoverValenTests #test12MoreCommandsWithErrorStops stamp: 'mf 5/16/2022 13:07:52'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #MarsRover category: 'Mars-Rover' stamp: 'mf 5/16/2022 13:15:47'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #MarsRoverTest category: 'Mars-Rover' stamp: 'mf 5/16/2022 13:15:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'mf 5/16/2022 13:17:18'!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| temporary variable |
	! !

Cardinal!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:22:20' prior: 50936759!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| marsRover |
	marsRover deployedAt: 7@5 pointing: North.! !

North!

North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:24:23' prior: 50936766!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| marsRover |
	marsRover deployedAt: 7@5 pointing: North.! !

Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #North category: 'Mars-Rover' stamp: 'mf 5/16/2022 13:24:44'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:25:49' prior: 50936774!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| marsRover |
	marsRover deployedAt: 7@5 pointing: 'South'.! !

!classRemoval: #North stamp: 'mf 5/16/2022 13:26:02'!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:29:11' prior: 50936792!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| marsRover |
	marsRover deployedAt: 7@5 pointing: 'South'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:31:59' prior: 50936805!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| aMarsRover |
	aMarsRover deployedAt: 7@5 pointing: 'S'.
	self assert: (aMarsRover position) equals: 7@5.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:34:27'!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover deployedAt: 7@5 pointing: 'S'.
	self assert: (aMarsRover position) equals: 7@5.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:35:58'!
createMarsRoverAtOrigin

	^MarsRover deployedAt: 0@0 pointing: 'N'.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:36:19' prior: 50936812!
test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: 7@5 pointing: 'S'.
	self assert: (aMarsRover position) equals: 7@5.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:37:02' prior: 50936822!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover position) equals: 7@5.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:37:22' prior: 50936849!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:37:29' prior: 50936859!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:40:16' prior: 50936868!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:40:50' prior: 50936877!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:40:57' prior: 50936888!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:41:21'!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.! !

!methodRemoval: MarsRoverTest #test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees stamp: 'mf 5/16/2022 13:41:21'!
test02MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:42:43'!
test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection
	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	self assert: (aMarsRover direction) equals: 'N'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:45:09' prior: 50936950!
test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection
	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: ''.
	self assert: (aMarsRover direction) equals: 'N'.
	self assert: (aMarsRover position) equals: (0@0).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:46:48'!
test04MarsRoverLeftLeftComandRotatesMarsRoverDirection180degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'll'.
	self assert: (aMarsRover direction) equals: ''.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:46:53' prior: 50936977!
test04MarsRoverLeftLeftComandRotatesMarsRoverDirection180degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'll'.
	self assert: (aMarsRover direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:47:14' prior: 50936918!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:48:10'!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.! !

!methodRemoval: MarsRoverTest #test03MarsRoverLeftComandRotatesMarsRoverDirection90degrees stamp: 'mf 5/16/2022 13:48:10'!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:51:27'!
test05MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:51:34' prior: 50937047!
test05MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.! !

!methodRemoval: MarsRoverTest #test04MarsRoverLeftLeftComandRotatesMarsRoverDirection180degrees stamp: 'mf 5/16/2022 13:52:17'!
test04MarsRoverLeftLeftComandRotatesMarsRoverDirection180degrees

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'll'.
	self assert: (aMarsRover direction) equals: 'S'.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:52:46'!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.! !

!methodRemoval: MarsRoverTest #test05MarsRightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 13:52:46'!
test05MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:53:33'!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	| aMarsRover |
	aMarsRover _ self createMarsRoverAtOrigin.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'O'.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:54:15' prior: 50937013!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	| aMarsRover |
	
	aMarsRover _ self createMarsRoverAtOrigin.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:54:34' prior: 50937091!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	| aMarsRover |
	
	aMarsRover _ self createMarsRoverAtOrigin.
	
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'E'.
	
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'S'.
	
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'O'.
	
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 13:58:23' prior: 50937125!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	| aMarsRover |
	
	aMarsRover _ MarsRover deployedAt: (1@1) pointing: 'N'.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals:  (1@2).! !

(1@2)!

1@2 x.!

(1@2) x.!

(1@2) y.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:04:55'!
assertRotatingAMarsRoverLeftChangesItDirectionFrom: aMarsRover

	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:04:55' prior: 50937142!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	| aMarsRover |
	
	aMarsRover _ self createMarsRoverAtOrigin.
	
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: aMarsRover.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:06:38'!
assertRotatingAMarsRoverLeftChangesItDirectionFrom: originalDirection to: newDirection

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: originalDirection.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: newDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:07:00'!
assertRotatingAMarsRoverRightChangesItDirectionFrom: originalDirection to: newDirection

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: originalDirection.
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: newDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:07:04' prior: 50937223!
assertRotatingAMarsRoverRightChangesItDirectionFrom: originalDirection to: newDirection

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: originalDirection.
	aMarsRover execute: 'r'.
	self assert: (aMarsRover direction) equals: newDirection.! !

!methodRemoval: MarsRoverTest #assertRotatingAMarsRoverLeftChangesItDirectionFrom: stamp: 'mf 5/16/2022 14:08:07'!
assertRotatingAMarsRoverLeftChangesItDirectionFrom: aMarsRover

	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'O'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:08:44' prior: 50937195!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	| aMarsRover |
	
	aMarsRover _ self createMarsRoverAtOrigin.
	
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'N' to: 'O'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'S'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'E'.
	
	aMarsRover execute: 'l'.
	self assert: (aMarsRover direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:09:44' prior: 50937255!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	
	
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'N' to: 'O'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'O' to: 'S'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'S' to: 'E'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'E' to: 'N'.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:09:51' prior: 50937272!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'N' to: 'O'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'O' to: 'S'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'S' to: 'E'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'E' to: 'N'.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:10:51' prior: 50937159!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:11:02' prior: 50937302!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'E' to: ''.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:11:12' prior: 50937310!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'E' to: 'S'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'S' to: 'O'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:11:23' prior: 50937320!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'E' to: 'S'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'S' to: 'O'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'O' to: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:11:45' prior: 50937176!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:13:11'!
assertMovingFowardAMarsRoverPoinging: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:13:36'!
assertMovingBackwardsAMarsRoverPoinging: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:15:56' prior: 50937347!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' changesItPositionFrom: (1@1) to: (1@2).

	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:16:19'!
assertMovingFowardAMarsRoverPointing: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !

!methodRemoval: MarsRoverTest #assertMovingFowardAMarsRoverPoinging:changesItPositionFrom:to: stamp: 'mf 5/16/2022 14:16:19'!
assertMovingFowardAMarsRoverPoinging: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:16:31'!
assertMovingBackwardsAMarsRoverPointing: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !

!methodRemoval: MarsRoverTest #assertMovingBackwardsAMarsRoverPoinging:changesItPositionFrom:to: stamp: 'mf 5/16/2022 14:16:31'!
assertMovingBackwardsAMarsRoverPoinging: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:18:09'!
assertMovingBackwardsAMarsRoverPointing: aDirection inPosition1x1yMovesItTo: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (1@1) pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:18:19' prior: 50937434!
assertMovingBackwardsAMarsRoverPointing: aDirection inPosition1x1yMovesItTo: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (1@1) pointing: aDirection.
	aMarsRover execute: 'b'.
	self assert: (aMarsRover position) equals: newPosition.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 14:18:44'!
assertMovingFowardAMarsRoverPointing: aDirection inPosition1x1yMovesItTo: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (1@1) pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.! !

!methodRemoval: MarsRoverTest #assertMovingBackwardsAMarsRoverPointing:changesItPositionFrom:to: stamp: 'mf 5/16/2022 14:18:50'!
assertMovingBackwardsAMarsRoverPointing: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.!

!methodRemoval: MarsRoverTest #assertMovingFowardAMarsRoverPointing:changesItPositionFrom:to: stamp: 'mf 5/16/2022 14:18:58'!
assertMovingFowardAMarsRoverPointing: aDirection changesItPositionFrom: originalPosition to: newPosition

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: originalPosition pointing: aDirection.
	aMarsRover execute: 'f'.
	self assert: (aMarsRover position) equals: newPosition.!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:20:24' prior: 50936966!
test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection
	
	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: 7@5 pointing: 'S'.
	aMarsRover execute: ''.
	self assert: (aMarsRover position) equals: 7@5.
	self assert: (aMarsRover direction) equals: 'S'.! !

!methodRemoval: MarsRoverTest #createMarsRoverAtOrigin stamp: 'mf 5/16/2022 14:20:33'!
createMarsRoverAtOrigin

	^MarsRover deployedAt: 0@0 pointing: 'N'.
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:21:24' prior: 50937376!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' 

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:23:03' prior: 50937510!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (0@1).

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:24:17'!
test05MarsFowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (0@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test05MarsFrontCommandMovesItOnePositionOnePointFoward stamp: 'mf 5/16/2022 14:24:17'!
test05MarsFrontCommandMovesItOnePositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (0@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:24:38'!
test05MarsBackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (0@1).

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:25:55' prior: 50937562!
test05MarsBackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:26:29'!
test06MarsBackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test05MarsBackwardsCommandMovesItsPositionOnePointBackwards stamp: 'mf 5/16/2022 14:26:29'!
test05MarsBackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:26:35' prior: 50937532!
test05MarsFowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:29:51'!
test05MarsRoverFowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test05MarsFowardCommandMovesItsPositionOnePointFoward stamp: 'mf 5/16/2022 14:29:51'!
test05MarsFowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:30:48'!
test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft

	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'N' to: 'O'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'O' to: 'S'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'S' to: 'E'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'E' to: 'N'.
	! !

!methodRemoval: MarsRoverTest #test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:30:48'!
test03MarsRoverLeftComandRotatesMarsRoverDirection90degreesToTheLeft

	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'N' to: 'O'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'O' to: 'S'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'S' to: 'E'.
	self assertRotatingAMarsRoverLeftChangesItDirectionFrom: 'E' to: 'N'.
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:31:00'!
test04RightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'E' to: 'S'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'S' to: 'O'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'O' to: 'N'.! !

!methodRemoval: MarsRoverTest #test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 14:31:01'!
test04MarsRightComandRotatesMarsRoverDirection90degreesToTheRight

	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'N' to: 'E'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'E' to: 'S'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'S' to: 'O'.
	self assertRotatingAMarsRoverRightChangesItDirectionFrom: 'O' to: 'N'.!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:31:13'!
test05FowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test05MarsRoverFowardCommandMovesItsPositionOnePointFoward stamp: 'mf 5/16/2022 14:31:13'!
test05MarsRoverFowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:31:27'!
test06BackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test06MarsBackwardsCommandMovesItsPositionOnePointBackwards stamp: 'mf 5/16/2022 14:31:27'!
test06MarsBackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:31:51'!
test05FowardCommandMovesMarsRoverOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test05FowardCommandMovesItsPositionOnePointFoward stamp: 'mf 5/16/2022 14:31:51'!
test05FowardCommandMovesItsPositionOnePointFoward

	self assertMovingFowardAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@2).
	self assertMovingFowardAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (2@1).
	self assertMovingFowardAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@0).
	self assertMovingFowardAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (0@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:32:04'!
test06BackwardsCommandMovesMarsRoverOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	! !

!methodRemoval: MarsRoverTest #test06BackwardsCommandMovesItsPositionOnePointBackwards stamp: 'mf 5/16/2022 14:32:04'!
test06BackwardsCommandMovesItsPositionOnePointBackwards

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:33:27'!
test07ExecutingAChainOfCommandsWorksCorrectly

	self assertMovingBackwardsAMarsRoverPointing: 'N' inPosition1x1yMovesItTo: (1@0).
	self assertMovingBackwardsAMarsRoverPointing: 'E' inPosition1x1yMovesItTo: (0@1).
	self assertMovingBackwardsAMarsRoverPointing: 'S' inPosition1x1yMovesItTo: (1@2).
	self assertMovingBackwardsAMarsRoverPointing: 'O' inPosition1x1yMovesItTo: (2@1).

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:34:23' prior: 50937849!
test07ExecutingAChainOfCommandsWorksCorrectly

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: 'N'.
	

	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:38:04' prior: 50937864!
test07ExecutingAChainOfCommandsWorksCorrectly

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: 'N'.
	aMarsRover execute: 'rfflffrbrbl'.
	self assert: (aMarsRover position) equals: (1@3).
	self assert: (aMarsRover direction) equals: 'E'.
	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 14:39:28'!
test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: 'N'.
	aMarsRover execute: 'rfflffrbrbljkasimeg'.
	self assert: (aMarsRover position) equals: (1@3).
	self assert: (aMarsRover direction) equals: 'E'.
	
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:39:38'!
ERROR!
!MarsRover class methodsFor: 'no messages' stamp: 'mf 5/16/2022 14:41:20'!
deployedAt: aPosition pointing: aDirection

	^self new initializeAt: aPosition pointing: aDirection.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:41:36'!
ERROR!

!classDefinition: #MarsRover category: 'Mars-Rover' stamp: 'mf 5/16/2022 14:43:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #MarsRover category: 'Mars-Rover' stamp: 'mf 5/16/2022 14:43:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'mf 5/16/2022 14:43:09'!
initializeAt: aPosition pointing: aDirection
	
	position _ aPosition.
	direction _ aDirection.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:43:27'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:43:28'!
ERROR!

!classRemoval: #MarsRoverValen stamp: 'mf 5/16/2022 14:44:59'!
Object subclass: #MarsRoverValen
	instanceVariableNames: 'position pointedCardinal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #WestCardinal stamp: 'mf 5/16/2022 14:44:59'!
Cardinal subclass: #WestCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #SouthCardinal stamp: 'mf 5/16/2022 14:44:59'!
Cardinal subclass: #SouthCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #NorthCardinal stamp: 'mf 5/16/2022 14:45:00'!
Cardinal subclass: #NorthCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #EastCardinal stamp: 'mf 5/16/2022 14:45:00'!
Cardinal subclass: #EastCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #Cardinal stamp: 'mf 5/16/2022 14:45:00'!
Object subclass: #Cardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!

!classRemoval: #MarsRoverValenTests stamp: 'mf 5/16/2022 14:45:01'!
TestCase subclass: #MarsRoverValenTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover-Valen'!
!MarsRover methodsFor: 'accesing' stamp: 'mf 5/16/2022 14:45:33'!
position
	
	^position.! !
!MarsRover methodsFor: 'accesing' stamp: 'mf 5/16/2022 14:45:41'!
direction
	
	^direction.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:45:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:45:48'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 14:45:48'!
ERROR!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:45:48'!
ERROR!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 14:45:48'!
ERROR!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 14:45:48'!
ERROR!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 14:45:49'!
ERROR!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 14:45:49'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 14:45:49'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:45:54'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 14:45:56'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 14:45:56'!
ERROR!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 14:46:51'!
execute: aChainOfCommands
	
	^self.! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 14:46:53' prior: 50938034!
execute: aChainOfCommands
	
	^self! !
!MarsRover methodsFor: 'accesing' stamp: 'mf 5/16/2022 14:46:57' prior: 50937980!
position
	
	^position! !
!MarsRover methodsFor: 'accesing' stamp: 'mf 5/16/2022 14:47:00' prior: 50937983!
direction
	
	^direction! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:47:06'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 14:47:07'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:47:09'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:47:09'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 14:48:23' prior: 50938038!
execute: aChainOfCommands
	
	
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 14:48:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 14:48:30'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:48:31'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 14:48:31'!
FAILURE!

----SNAPSHOT----(16 May 2022 14:50:00) CuisUniversity-4532.image priorSource: 19214956!

Object subclass: #MarsRoverCardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #MarsRoverCardinalDirection category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:00:13'!
Object subclass: #MarsRoverCardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

'clasn' first.!

'clasn' removeFirst.!

'casljlfa' withoutPrefix: 'c'.!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:05:37' prior: 50938066!
execute: aChainOfCommands
	
	aChainOfCommands ifEmpty: [^self]
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:05:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:05:44'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:05:46'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:05:46'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:07:00' prior: 50938104!
execute: aChainOfCommands
	
	|currentCommand |
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	! !

String!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:09:53' prior: 50938125!
execute: aChainOfCommands
	
	|currentCommand nextCommands |
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands withoutPrefix: currentCommand.
	
	(currentCommand = $f) ifTrue:[self forward . self processCommands: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self processCommands: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self processCommands: nextCommands.].
	(currentCommand = $r) ifTrue:[self rotateRight. self processCommands: nextCommands.].! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:11:39' prior: 50938133!
execute: aChainOfCommands
	
	|currentCommand nextCommands |
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands withoutPrefix: currentCommand.
	
	(currentCommand = $l) ifTrue:[self rotateLeft. self processCommands: nextCommands.].
	"(currentCommand = $f) ifTrue:[self forward . self processCommands: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self processCommands: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self processCommands: nextCommands.].
	(currentCommand = $r) ifTrue:[self rotateRight. self processCommands: nextCommands.]."! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:12:57' prior: 50938153!
execute: aChainOfCommands
	
	|currentCommand nextCommands |
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands withoutPrefix: currentCommand.
	
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	"(currentCommand = $f) ifTrue:[self forward . self execute: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self execute: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands.]."! !
!MarsRoverCardinalDirection methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:14:51'!
leftDirection
	
	self subclassResponsibility.! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:14:53' prior: 50938198!
leftDirection
	
	self subclassResponsibility! !

MarsRoverCardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #North category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:15:07'!
MarsRoverCardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

MarsRoverCardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #South category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:15:11'!
MarsRoverCardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

MarsRoverCardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #West category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:15:14'!
MarsRoverCardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

MarsRoverCardinalDirection subclass: #Est
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #Est category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:15:17'!
MarsRoverCardinalDirection subclass: #Est
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

MarsRoverCardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classDefinition: #East category: 'Mars-Rover' stamp: 'mf 5/16/2022 15:15:22'!
MarsRoverCardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!classRemoval: #Est stamp: 'mf 5/16/2022 15:15:27'!
MarsRoverCardinalDirection subclass: #Est
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars-Rover'!

!methodRemoval: MarsRoverCardinalDirection #leftDirection stamp: 'mf 5/16/2022 15:16:42'!
leftDirection
	
	self subclassResponsibility!
!MarsRoverCardinalDirection class methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:17:25'!
canHandle: aDirection
	self subclassResponsibilty.! !
!MarsRoverCardinalDirection class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:17:33' prior: 50938275!
canHandle: aDirection
	self subclassResponsibility.! !
!MarsRoverCardinalDirection class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:17:34' prior: 50938281!
canHandle: aDirection
	self subclassResponsibility! !
!East class methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:18:16' overrides: 50938287!
canHandle: aDirection
	
	(aDirection = $E)! !
!East class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:18:23' prior: 50938292 overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = $E)! !
!North class methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:18:34' overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = $N)! !
!South class methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:18:47' overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = $S)! !
!West class methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:19:14' overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = $O)! !
!MarsRoverCardinalDirection class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:23:26'!
pointing: aDirection

! !
!MarsRoverCardinalDirection class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:24:10' prior: 50938317!
pointing: aDirection

	^(self subclasses detect:[:subclass| subclass canHandle: aDirection]) new.

! !
!MarsRoverCardinalDirection methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:24:47' overrides: 16881101!
asString
	
	self subclassResponsibility! !
!East methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:25:03' overrides: 50938329!
asString
	
	'E'! !
!North methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:25:14' overrides: 50938329!
asString
	
	'N'! !
!South methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:25:24' overrides: 50938329!
asString
	
	'S'! !
!West methodsFor: 'no messages' stamp: 'mf 5/16/2022 15:25:35' overrides: 50938329!
asString
	
	'O'! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:26:05'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:26:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:26:08'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:26:09'!
ERROR!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:26:09'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'mf 5/16/2022 15:27:04' prior: 50937922!
initializeAt: aPosition pointing: aDirection
	
	position _ aPosition.
	direction _ MarsRoverCardinalDirection pointing: aDirection.! !
!MarsRover methodsFor: 'accesing' stamp: 'mf 5/16/2022 15:27:10' prior: 50938046!
direction
	
	^direction asString.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:27:18'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:27:18'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:27:35'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:28:01'!
ERROR!
!South class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:29:02' prior: 50938307 overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = 'S')! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:29:14'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:29:15'!
FAILURE!
!North class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:30:12' prior: 50938302 overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = 'N')! !
!East class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:30:20' prior: 50938297 overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = 'E')! !
!West class methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:30:31' prior: 50938312 overrides: 50938287!
canHandle: aDirection
	
	^(aDirection = 'O')! !
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:30:58' prior: 50938333 overrides: 50938329!
asString
	
	^'E'! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:31:04' prior: 50938337 overrides: 50938329!
asString
	
	^'N'! !
!South methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:31:12' prior: 50938341 overrides: 50938329!
asString
	
	^'S'! !
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:31:19' prior: 50938345 overrides: 50938329!
asString
	
	^'O'! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:31:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:31:41'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:31:43'!
ERROR!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:31:43'!
ERROR!
!MarsRover methodsFor: 'execution-private' stamp: 'mf 5/16/2022 15:32:39'!
rotateLeft
	
	direction _ direction left.! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:33:14'!
left
	
	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:33:37' overrides: 50938467!
left
	
	^North new.! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:33:55' overrides: 50938467!
left
	
	^West new.! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:33:56' prior: 50938476 overrides: 50938467!
left
	
	^West new! !
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:34:00' prior: 50938472 overrides: 50938467!
left
	
	^North new! !
!South methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:34:18' overrides: 50938467!
left
	
	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:34:33' overrides: 50938467!
left
	
	^West new.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:35:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:35:09'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:35:11'!
ERROR!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:35:11'!
ERROR!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:35:50'!
ERROR!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:37:26' prior: 50938176!
execute: aChainOfCommands
	
	|currentCommand|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	(currentCommand = 'l') ifTrue:[self rotateLeft].
	"(currentCommand = $f) ifTrue:[self forward . self execute: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self execute: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands.]."! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:37:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:37:38'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:37:40'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:37:40'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:38:06'!
FAILURE!

aMarsRover!

aMarsRover!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:40:35'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:41:36' prior: 50938518!
execute: aChainOfCommands
	
	|currentCommand|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	"(currentCommand = $f) ifTrue:[self forward . self execute: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self execute: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands.]."! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:41:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:41:49'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:41:51'!
FAILURE!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:41:51'!
FAILURE!
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:42:16' prior: 50938494 overrides: 50938467!
left
	
	^South new.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:42:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:42:33'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:42:36'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 15:42:39'!
FAILURE!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 15:42:39'!
FAILURE!
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:43:22'!
risht
	
	self subclassResponsibility.! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:44:03'!
right
	
	self subclassResponsibility.! !

!methodRemoval: MarsRoverCardinalDirection #risht stamp: 'mf 5/16/2022 15:44:03'!
risht
	
	self subclassResponsibility.!
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:44:15' overrides: 50938628!
right
	
	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:44:30' overrides: 50938628!
right
	
	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:44:48' overrides: 50938628!
right
	
	^West new.! !
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:45:01' overrides: 50938628!
right
	
	^North new.! !
!MarsRover methodsFor: 'execution-private' stamp: 'mf 5/16/2022 15:45:31'!
rotateRight
	
	direction _ direction right.! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:46:24' prior: 50938562!
execute: aChainOfCommands
	
	|currentCommand|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	(currentCommand = $r) ifTrue:[self rotateRight].
	"(currentCommand = $f) ifTrue:[self forward . self execute: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self execute: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	"! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:46:34'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:46:36'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:46:38'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 15:46:42'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:46:45'!
FAILURE!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:46:45'!
FAILURE!
!MarsRover methodsFor: 'execution-private' stamp: 'mf 5/16/2022 15:49:48'!
moveFoward
	
	position _ position + (direction fowardPoint).! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:50:40'!
fowardPoint
	
	self subclassResponsibility.! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:50:41' prior: 50938703!
fowardPoint
	
	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:51:26' overrides: 50938708!
fowardPoint
	
	^(0@1)! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:51:46' overrides: 50938708!
fowardPoint
	
	^(0@1)! !
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:51:54' prior: 50938713 overrides: 50938708!
fowardPoint
	
	^(1@0)! !
!South methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:52:24' overrides: 50938708!
fowardPoint
	
	^(0@-1)! !
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:52:40' overrides: 50938708!
fowardPoint
	
	^(-1@0)! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:52:57'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:52:59'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:53:03'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 15:53:04'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:53:08'!
FAILURE!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:53:08'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:53:40' prior: 50938657!
execute: aChainOfCommands
	
	|currentCommand|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	"(currentCommand = $f) ifTrue:[self forward . self execute: nextCommands.].		
	(currentCommand = $b) ifTrue:[self backward. self execute: nextCommands.].				
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands.].
	"! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 15:53:57'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 15:54:01'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 15:54:03'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 15:54:04'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:54:07'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 15:54:08'!
FAILURE!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 15:54:08'!
FAILURE!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:54:14'!
PASSED!
!MarsRover methodsFor: 'execution-private' stamp: 'mf 5/16/2022 15:54:45'!
moveBackwards
	
	position _ position + (direction backwardsPoint).! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:01'!
BackwardsPoint
	
	self subclassResponsibility! !
!MarsRoverCardinalDirection methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:17'!
backwardsPoint
	
	self subclassResponsibility! !

!methodRemoval: MarsRoverCardinalDirection #BackwardsPoint stamp: 'mf 5/16/2022 15:55:17'!
BackwardsPoint
	
	self subclassResponsibility!
!East methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:31' overrides: 50938822!
backwardsPoint
	
	^(-1@0)! !
!North methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:41' overrides: 50938822!
backwardsPoint
	
	^(0@-1)! !
!South methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:49' overrides: 50938822!
backwardsPoint
	
	^(0@1)! !
!West methodsFor: 'as yet unclassified' stamp: 'mf 5/16/2022 15:55:58' overrides: 50938822!
backwardsPoint
	
	^(1@0)! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:57:02' prior: 50938757!
execute: aChainOfCommands
	
	|currentCommand|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.]
	! !

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 15:57:15'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 15:57:18'!
FAILURE!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 15:57:18'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 15:59:09' prior: 50938847!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands withoutPrefix: currentCommand.
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.]
	! !

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 15:59:20'!
ERROR!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 15:59:20'!
ERROR!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:59:23'!
ERROR!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 15:59:23'!
ERROR!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:04:15' prior: 50938871!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.]
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:04:29'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:04:29'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:04:29'!
FAILURE!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:04:38'!
FAILURE!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:04:38'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:06:59' prior: 50938901!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft.].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.].
	
	self execute: nextCommands
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:07:33'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:07:33'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 16:07:51' prior: 50937882!
test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: 'N'.
	aMarsRover execute: 'rfflffrbrbljkasimegl'.
	self assert: (aMarsRover position) equals: (1@3).
	self assert: (aMarsRover direction) equals: 'E'.
	
	
	! !

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:07:56'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:07:56'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'mf 5/16/2022 16:08:47' prior: 50939052!
test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives

	| aMarsRover |
	aMarsRover _ MarsRover deployedAt: (0@0) pointing: 'N'.
	aMarsRover execute: 'rfflffrbrbljjjjjflb'.
	self assert: (aMarsRover position) equals: (1@3).
	self assert: (aMarsRover direction) equals: 'E'.
	
	
	! !

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:08:49'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:09:02'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:09:02'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:09:02'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:10:12' prior: 50938960!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	(self currentCommandIsValid: currentCommand ) ifFalse: [^self].	
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft.].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.].
	
	self execute: nextCommands
	! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:11:24' prior: 50939124!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft.].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.].
	
	self execute: nextCommands
	! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:17:28' prior: 50939143!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft.].
	(currentCommand = $r) ifTrue:[self rotateRight].
	(currentCommand = $f) ifTrue:[self moveFoward].
	(currentCommand = $b) ifTrue:[self moveBackwards.].
	
	self execute: nextCommands
	! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:18:27' prior: 50939160!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands].
	(currentCommand = $f) ifTrue:[self moveFoward. self execute: nextCommands].
	(currentCommand = $b) ifTrue:[self moveBackwards. self execute: nextCommands].
	! !
!MarsRover methodsFor: 'execution' stamp: 'mf 5/16/2022 16:18:47' prior: 50939177!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands].
	(currentCommand = $f) ifTrue:[self moveFoward. self execute: nextCommands].
	(currentCommand = $b) ifTrue:[self moveBackwards. self execute: nextCommands].
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:18:52'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:18:59'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:19:01'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/16/2022 16:19:01'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/16/2022 16:19:02'!
PASSED!

----QUIT----(16 May 2022 16:19:44) CuisUniversity-4532.image priorSource: 19405933!

----STARTUP---- (17 May 2022 13:13:34) as D:\Cuis\CuisUniversity-4532.image!

!MarsRover methodsFor: 'execution' stamp: 'mf 5/17/2022 13:19:38' prior: 50939197!
execute: aChainOfCommands
	
	|currentCommand nextCommands|
	
	aChainOfCommands ifEmpty: [^self].
	
	currentCommand _ aChainOfCommands first.
	nextCommands _ aChainOfCommands copyFrom: 2 to: (aChainOfCommands size).
	
	(currentCommand = $l) ifTrue:[self rotateLeft. self execute: nextCommands].
	(currentCommand = $r) ifTrue:[self rotateRight. self execute: nextCommands].
	(currentCommand = $f) ifTrue:[self moveFoward. self execute: nextCommands].
	(currentCommand = $b) ifTrue:[self moveBackwards. self execute: nextCommands].
	! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/17/2022 13:29:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/17/2022 13:29:03'!
PASSED!
!Behavior method!
deployedAt: aPosition pointing: aDirection
	^ [
	([
	(self coverAll:
		{47 to: 50}) new ] valueCoveringAll:
		{52 to: 54})
		initializeAt:
			(aPosition
				cover: (70 to: 78)
				declaredAt: (13 to: 21))
		pointing:
			(aDirection
				cover: (90 to: 99)
				declaredAt: (33 to: 42)) ] valueCoveringAll:
		{56 to: 68. 80 to: 88}.! !
!Behavior method!
initializeAt: aPosition pointing: aDirection
	(position _ aPosition
		cover: (60 to: 68)
		declaredAt: (15 to: 23))
		cover: (49 to: 56)
		declaredAt: (49 to: 56).
	(direction _ [
	(MarsRoverCardinalDirection
		cover: (84 to: 109)
		declaredAt: (84 to: 109)) pointing:
		(aDirection
			cover: (121 to: 130)
			declaredAt: (35 to: 44)) ] valueCoveringAll:
		{111 to: 119})
		cover: (72 to: 80)
		declaredAt: (72 to: 80).! !
!Behavior method!
pointing: aDirection
	^ [
	([
	([
	(self coverAll:
		{26 to: 29}) subclasses ] valueCoveringAll:
		{31 to: 40}) detect: [ :subclass |
		[
		(subclass
			cover: (61 to: 68)
			declaredAt: (51 to: 58)) canHandle:
			(aDirection
				cover: (81 to: 90)
				declaredAt: (11 to: 20)) ] valueCoveringAll:
			{70 to: 79} ]] valueCoveringAll:
		{42 to: 48}) new ] valueCoveringAll:
		{94 to: 96}.! !
!Behavior method!
canHandle: aDirection
	^ [
	(aDirection
		cover: (28 to: 37)
		declaredAt: (12 to: 21)) =
		('N' coverAll:
			{41 to: 43}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
canHandle: aDirection
	^ [
	(aDirection
		cover: (28 to: 37)
		declaredAt: (12 to: 21)) =
		('S' coverAll:
			{41 to: 43}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
position
	^ position
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !
!Behavior method!
direction
	^ [
	(direction
		cover: (15 to: 23)
		declaredAt: (15 to: 23)) asString ] valueCoveringAll:
		{25 to: 32}.! !
!Behavior method!
asString
	^ 'S' coverAll:
		{14 to: 16}.! !

!testRun: #MarsRoverTest #test01MarsRoverIsWhereItWasDeployedPoitingToTheSameDirection stamp: 'mf 5/17/2022 13:29:06'!
PASSED!
!Behavior method!
execute: aChainOfCommands
	| currentCommand nextCommands |
	[
	(aChainOfCommands
		cover: (63 to: 78)
		declaredAt: (10 to: 25)) ifEmpty: [ ^ self coverAll:
			{91 to: 94} ]] valueCoveringAll:
		{80 to: 87}.
	(currentCommand _ [
	(aChainOfCommands
		cover: (118 to: 133)
		declaredAt: (10 to: 25)) first ] valueCoveringAll:
		{135 to: 139})
		cover: (101 to: 114)
		declaredAt: (31 to: 44).
	(nextCommands _ [
	(aChainOfCommands
		cover: (158 to: 173)
		declaredAt: (10 to: 25))
		copyFrom:
			(2 coverAll:
				{185 to: 185})
		to:
			([
			(aChainOfCommands
				cover: (192 to: 207)
				declaredAt: (10 to: 25)) size ] valueCoveringAll:
				{209 to: 212}) ] valueCoveringAll:
		{175 to: 183. 187 to: 189})
		cover: (143 to: 154)
		declaredAt: (46 to: 57).
	[
	([
	(currentCommand
		cover: (220 to: 233)
		declaredAt: (31 to: 44)) =
		($l coverAll:
			{237 to: 238}) ] valueCoveringAll:
		{235 to: 235}) ifTrue: [
		[
		(self coverAll:
			{249 to: 252}) rotateLeft ] valueCoveringAll:
			{254 to: 263}.
		[
		(self coverAll:
			{266 to: 269}) execute:
			(nextCommands
				cover: (280 to: 291)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{271 to: 278} ]] valueCoveringAll:
		{241 to: 247}.
	[
	([
	(currentCommand
		cover: (297 to: 310)
		declaredAt: (31 to: 44)) =
		($r coverAll:
			{314 to: 315}) ] valueCoveringAll:
		{312 to: 312}) ifTrue: [
		[
		(self coverAll:
			{326 to: 329}) rotateRight ] valueCoveringAll:
			{331 to: 341}.
		[
		(self coverAll:
			{344 to: 347}) execute:
			(nextCommands
				cover: (358 to: 369)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{349 to: 356} ]] valueCoveringAll:
		{318 to: 324}.
	[
	([
	(currentCommand
		cover: (375 to: 388)
		declaredAt: (31 to: 44)) =
		($f coverAll:
			{392 to: 393}) ] valueCoveringAll:
		{390 to: 390}) ifTrue: [
		[
		(self coverAll:
			{404 to: 407}) moveFoward ] valueCoveringAll:
			{409 to: 418}.
		[
		(self coverAll:
			{421 to: 424}) execute:
			(nextCommands
				cover: (435 to: 446)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{426 to: 433} ]] valueCoveringAll:
		{396 to: 402}.
	[
	([
	(currentCommand
		cover: (452 to: 465)
		declaredAt: (31 to: 44)) =
		($b coverAll:
			{469 to: 470}) ] valueCoveringAll:
		{467 to: 467}) ifTrue: [
		[
		(self coverAll:
			{481 to: 484}) moveBackwards ] valueCoveringAll:
			{486 to: 498}.
		[
		(self coverAll:
			{501 to: 504}) execute:
			(nextCommands
				cover: (515 to: 526)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{506 to: 513} ]] valueCoveringAll:
		{473 to: 479}.! !

!testRun: #MarsRoverTest #test02MarsRoverExecuteEmptyCommandDoesntModifyItsPositionAndDirection stamp: 'mf 5/17/2022 13:29:06'!
PASSED!
!Behavior method!
rotateLeft
	(direction _ [
	(direction
		cover: (15 to: 23)
		declaredAt: (15 to: 23)) left ] valueCoveringAll:
		{37 to: 40})
		cover: (27 to: 35)
		declaredAt: (15 to: 23).! !
!Behavior method!
left
	^ [
	(West
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) new ] valueCoveringAll:
		{15 to: 17}.! !
!Behavior method!
asString
	^ 'O' coverAll:
		{14 to: 16}.! !
!Behavior method!
canHandle: aDirection
	^ [
	(aDirection
		cover: (28 to: 37)
		declaredAt: (12 to: 21)) =
		('O' coverAll:
			{41 to: 43}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
left
	^ [
	(South
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) new ] valueCoveringAll:
		{16 to: 18}.! !
!Behavior method!
left
	^ [
	(East
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) new ] valueCoveringAll:
		{15 to: 17}.! !
!Behavior method!
asString
	^ 'E' coverAll:
		{14 to: 16}.! !
!Behavior method!
canHandle: aDirection
	^ [
	(aDirection
		cover: (28 to: 37)
		declaredAt: (12 to: 21)) =
		('E' coverAll:
			{41 to: 43}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
left
	^ [
	(North
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) new ] valueCoveringAll:
		{16 to: 18}.! !
!Behavior method!
asString
	^ 'N' coverAll:
		{14 to: 16}.! !

!testRun: #MarsRoverTest #test03LeftComandRotatesMarsRoverDirection90degreesToTheLeft stamp: 'mf 5/17/2022 13:29:07'!
PASSED!
!Behavior method!
rotateRight
	(direction _ [
	(direction
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) right ] valueCoveringAll:
		{38 to: 42})
		cover: (28 to: 36)
		declaredAt: (16 to: 24).! !
!Behavior method!
right
	^ [
	(East
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) new ] valueCoveringAll:
		{16 to: 18}.! !
!Behavior method!
right
	^ [
	(South
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) new ] valueCoveringAll:
		{17 to: 19}.! !
!Behavior method!
right
	^ [
	(West
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) new ] valueCoveringAll:
		{16 to: 18}.! !
!Behavior method!
right
	^ [
	(North
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) new ] valueCoveringAll:
		{17 to: 19}.! !

!testRun: #MarsRoverTest #test04RightComandRotatesMarsRoverDirection90degreesToTheRight stamp: 'mf 5/17/2022 13:29:07'!
PASSED!
!Behavior method!
moveFoward
	(position _ [
	(position
		cover: (15 to: 22)
		declaredAt: (15 to: 22)) +
		([
		(direction
			cover: (38 to: 46)
			declaredAt: (38 to: 46)) fowardPoint ] valueCoveringAll:
			{48 to: 58}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (15 to: 22).! !
!Behavior method!
fowardPoint
	^ [
	(0 coverAll:
		{18 to: 18}) @
		(1 coverAll:
			{20 to: 20}) ] valueCoveringAll:
		{19 to: 19}.! !
!Behavior method!
fowardPoint
	^ [
	(1 coverAll:
		{18 to: 18}) @
		(0 coverAll:
			{20 to: 20}) ] valueCoveringAll:
		{19 to: 19}.! !
!Behavior method!
fowardPoint
	^ [
	(0 coverAll:
		{18 to: 18}) @
		(-1 coverAll:
			{20 to: 21}) ] valueCoveringAll:
		{19 to: 19}.! !
!Behavior method!
fowardPoint
	^ [
	(-1 coverAll:
		{18 to: 19}) @
		(0 coverAll:
			{21 to: 21}) ] valueCoveringAll:
		{20 to: 20}.! !

!testRun: #MarsRoverTest #test05FowardCommandMovesMarsRoverOnePointFoward stamp: 'mf 5/17/2022 13:29:07'!
PASSED!
!Behavior method!
moveBackwards
	(position _ [
	(position
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) +
		([
		(direction
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) backwardsPoint ] valueCoveringAll:
			{51 to: 64}) ] valueCoveringAll:
		{38 to: 38})
		cover: (29 to: 36)
		declaredAt: (18 to: 25).! !
!Behavior method!
backwardsPoint
	^ [
	(0 coverAll:
		{21 to: 21}) @
		(-1 coverAll:
			{23 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
backwardsPoint
	^ [
	(-1 coverAll:
		{21 to: 22}) @
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{23 to: 23}.! !
!Behavior method!
backwardsPoint
	^ [
	(0 coverAll:
		{21 to: 21}) @
		(1 coverAll:
			{23 to: 23}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
backwardsPoint
	^ [
	(1 coverAll:
		{21 to: 21}) @
		(0 coverAll:
			{23 to: 23}) ] valueCoveringAll:
		{22 to: 22}.! !

!testRun: #MarsRoverTest #test06BackwardsCommandMovesMarsRoverOnePointBackwards stamp: 'mf 5/17/2022 13:29:07'!
PASSED!

!testRun: #MarsRoverTest #test07ExecutingAChainOfCommandsWorksCorrectly stamp: 'mf 5/17/2022 13:29:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverExecutesChainOfCommandUntilInvalidCommandArrives stamp: 'mf 5/17/2022 13:29:07'!
PASSED!

----QUIT----(17 May 2022 15:22:35) CuisUniversity-4532.image priorSource: 19444487!

----STARTUP---- (18 May 2022 17:07:27) as D:\Cuis\CuisUniversity-4532.image!


----End fileIn of D:\Descargas\2022-1c-main\05-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:08:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:08:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:08:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:08:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:08:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:08:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:08:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:08:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:08:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:10:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:10:12'!
FAILURE!

| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
!

----QUIT----(18 May 2022 17:18:41) CuisUniversity-4532.image priorSource: 19455812!

----STARTUP---- (18 May 2022 17:19:47) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'mf 5/18/2022 17:20:09'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'mf 5/18/2022 17:20:10'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'mf 5/18/2022 17:20:10'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'mf 5/18/2022 17:20:10'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'mf 5/18/2022 17:20:11'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\Descargas\ing1-2021-c2-main\17-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:20:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test08PortfolioHaveZeroBalanceWhenCreated stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test09PortfolioIncreasesBalanceWithOneAccountDeposit stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test10PortfolioHaveKnowsBalancesWithTwoAccountDepositDifferenteBalances stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test11PortfolioHaveKnowsBalancesWithOnePortfolioWithAccountAndTransaction stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test12PortfolioKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test13PortfolioDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test14PortfolioKnowsItsTransactions stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test15PortfolioCanNotAddAccountAlreadyIncluded stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test16PortfolioCanNotAddPortfolioWithAccountsAlreadyIncluded stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test17PortfolioCanNotAddAccountWithAccountsAlreadyIncludedInParentPortfolio stamp: 'mf 5/18/2022 17:20:55'!
PASSED!

!classRemoval: #ReceptiveAccount stamp: 'mf 5/18/2022 17:22:25'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'mf 5/18/2022 17:22:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'groupedAccounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'mf 5/18/2022 17:22:26'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'mf 5/18/2022 17:22:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'mf 5/18/2022 17:22:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'mf 5/18/2022 17:22:27'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\Descargas\2022-1c-main\05-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:23:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:23:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:23:27'!
FAILURE!
!Deposit methodsFor: 'value' stamp: 'mf 5/18/2022 17:25:44'!
balanceValue

	^ value! !

13215 negative!

- 132!

carlos _ 45.!

carlos * (-1)!
!Withdraw methodsFor: 'value' stamp: 'mf 5/18/2022 17:27:43'!
balanceValue

	^ -1 * value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'mf 5/18/2022 17:28:15' prior: 50940896!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceValue ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:28:21'!
PASSED!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:29:26'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:26' prior: 50940819 overrides: 50940781!
value

	^ value2! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:27' prior: 50940943!
balanceValue

	^ value2! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:27' prior: 50940814!
initializeFor: aValue

	value2 := aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:29:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:38' prior: 50940852 overrides: 50940781!
value

	^ value2! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:38' prior: 50940948!
balanceValue

	^ -1 * value2 ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 17:29:38' prior: 50940847!
initializeFor: aValue

	value2 := aValue ! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:29:57'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'mf 5/18/2022 17:29:55' prior: 50940781 overrides: 16881508!
value 

	^ value ! !
!AccountTransaction methodsFor: 'initialization' stamp: 'mf 5/18/2022 17:30:34'!
initializeFor: aValue
	
	value _ aValue! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:30:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:30:56'!
PASSED!

!methodRemoval: AccountTransaction #initializeFor: stamp: 'mf 5/18/2022 17:31:51'!
initializeFor: aValue
	
	value _ aValue!
!AccountTransaction methodsFor: 'value' stamp: 'mf 5/18/2022 17:32:01' prior: 50941035 overrides: 16881508!
value 

	^ self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:32:08'!
PASSED!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:32:15'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:32:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:32:52'!
PASSED!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:33:01'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'mf 5/18/2022 17:33:20' prior: 50941162 overrides: 16881508!
value 

	^value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:33:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:33:25'!
PASSED!
!AccountTransaction methodsFor: 'initialization' stamp: 'mf 5/18/2022 17:33:56'!
initializeFor: aValue
	
	value _ aValue! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:34:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:34:12'!
PASSED!

!methodRemoval: Deposit #initializeFor: stamp: 'mf 5/18/2022 17:34:22'!
initializeFor: aValue

	value2 := aValue !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:34:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:34:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:34:47'!
FAILURE!
!AccountTransaction methodsFor: 'initialization' stamp: 'mf 5/18/2022 17:35:41' prior: 50941320!
initializeFor: aValue
	
	value _ aValue.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:35:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:35:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:35:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:36:01'!
FAILURE!

Deposit register: 100 on: account.!

!methodRemoval: Deposit #value stamp: 'mf 5/18/2022 17:36:48'!
value

	^ value2!
!Deposit methodsFor: 'value' stamp: 'mf 5/18/2022 17:36:52' prior: 50940997!
balanceValue

	^ value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:36:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:36:58'!
PASSED!

!methodRemoval: Withdraw #value stamp: 'mf 5/18/2022 17:37:10'!
value

	^ value2!

!methodRemoval: Withdraw #initializeFor: stamp: 'mf 5/18/2022 17:37:15'!
initializeFor: aValue

	value2 := aValue !
!Withdraw methodsFor: 'value' stamp: 'mf 5/18/2022 17:37:20' prior: 50941018!
balanceValue

	^ -1 * value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:37:39'!
PASSED!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:37:45'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:37:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 17:38:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 17:38:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 17:38:49'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 17:39:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----QUIT----(18 May 2022 17:41:52) CuisUniversity-4532.image priorSource: 19467715!

----STARTUP---- (18 May 2022 20:06:48) as D:\Cuis\CuisUniversity-4532.image!

!AccountTransaction methodsFor: 'balance' stamp: 'mf 5/18/2022 20:07:56'!
balanceValue
	
	self subclassResponsibility! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 20:08:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 20:08:02'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/18/2022 20:08:09'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (26 to: 30)
		declaredAt: (26 to: 30).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 20:08:10'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
balanceValue
	^ [
	(-1 coverAll:
		{18 to: 19}) *
		(value
			cover: (23 to: 27)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{21 to: 21}.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/18/2022 20:08:10'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/18/2022 20:08:10'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/18/2022 20:08:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/18/2022 20:08:10'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/18/2022 20:08:10'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 20:18:11'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:17:59'!
test01

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:18:14'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:18:29'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:18:44' prior: 50941751!
balance
	
	^0! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:18:48' prior: 50941743!
test01

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:18:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:18:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:22:40'!
test02

	| portfolio transaction |
	
	portfolio _ Portfolio new.
	
	self assert: ((portfolio hasRegistered: transaction) not).! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:22:56' prior: 50941770!
test02

	| aPortfolio transaction |
	
	aPortfolio _ Portfolio new.
	
	self assert: ((aPortfolio hasRegistered: transaction) not).! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:23:06' prior: 50941777!
test02

	| aPortfolio aTransaction |
	
	aPortfolio _ Portfolio new.
	
	self assert: ((aPortfolio hasRegistered: aTransaction) not).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:24:06'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:24:23'!
hasRegistered: anUndefinedObject 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:24:34' prior: 50941793!
hasRegistered: anUndefinedObject 
	^false.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:24:53' prior: 50941798!
hasRegistered: aTransaction 
	^false.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:24:58'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:25:00'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:25:00'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:25:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:27:26' prior: 50941784!
test02

	| aPortfolio aTransaction |
	
	aPortfolio _ Portfolio new.
	
	self assert: (aPortfolio hasRegistered: aTransaction) not.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:27:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:27:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:27:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:28:24'!
test03

	| aPortfolio |
	
	aPortfolio _ Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:30:00'!
ERROR!
!Object methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:30:06'!
transactions
	self shouldBeImplemented.! !

!methodRemoval: Object #transactions stamp: 'mf 5/18/2022 20:31:49'!
transactions
	self shouldBeImplemented.!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:31:58'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:32:06'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:32:19' prior: 50941849!
transactions
	
	^{}.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:32:34'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:32:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:32:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:32:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:33:05' prior: 50941831!
test03

	| aPortfolio |
	
	aPortfolio _ Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:35:00' prior: 50941867!
test03

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:35:17' prior: 50941817!
test02

	| portfolio aTransaction |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio hasRegistered: aTransaction) not.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:35:37' prior: 50941879!
test02

	| portfolio transaction |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio hasRegistered: transaction) not.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:36:45'!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	
	account := ReceptiveAccount new.
	
	self assert: (portfolio transactions) isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:37:49' prior: 50941893!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	account := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	self assert: (portfolio transactions) isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:39:10' prior: 50941901!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:39:24'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:40:58' prior: 50941910!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:41:23' prior: 50941922!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio includes: account) not.
	! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:41:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:41:49'!
includes: anUndefinedObject 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:42:08' prior: 50941936!
includes: anAcount 
	
	false.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/18/2022 20:42:16' prior: 50941941!
includes: anAcount 
	
	^false! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:42:24'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:42:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:42:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:42:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:42:24'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:43:35'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:43:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:43:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:43:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:43:35'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:47:54'!
test05

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self assert: portfolio includes: account.
	! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:47:58'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/18/2022 20:48:27'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/18/2022 20:48:52' prior: 50941982!
add: aReceptiveAccount 
	
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/18/2022 20:50:04'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/18/2022 20:50:01' prior: 50941987!
add: aReceptiveAccount 
	
	account _ aReceptiveAccount! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:50:10'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:50:44'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:51:04' prior: 50941972!
test05

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self assert: (portfolio includes: account).
	! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:51:04'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/18/2022 20:51:33' prior: 50941945!
includes: anAccount 
	
	^account = anAccount! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:51:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:51:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:51:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:51:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:51:43'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:51:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:51:43'!
FAILURE!

	| portfolio account |!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:52:01'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:52:31'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:53:15' prior: 50941927!
test04

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	self assert: (portfolio includes: account) not.
	! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:53:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:55:30'!
test06

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: (portfolio includes: account).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:55:52' prior: 50942066!
test06

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: transaction).
	! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/18/2022 20:57:17' prior: 50941803!
hasRegistered: aTransaction 
	
	account ifNil: [^false].
	^account hasRegistered: aTransaction.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/18/2022 20:57:22'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:59:48'!
test07

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 21:00:01' prior: 50942109!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 20:59:48' prior: 50942119!
test07

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 21:02:41' prior: 50942129!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account transactions) equals: (portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/18/2022 21:05:18'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/18/2022 21:07:02' prior: 50941854!
transactions
	
	account ifNil: [^{}].
	^account transactions! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/18/2022 21:07:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/18/2022 21:09:11' prior: 50942139!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account balance) equals: (portfolio balance).
	
	! !

!methodRemoval: PortfolioTest #test07 stamp: 'mf 5/18/2022 21:11:59'!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account balance) equals: (portfolio balance).
	
	!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 21:12:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/18/2022 21:12:06'!
PASSED!

----QUIT----(18 May 2022 21:12:09) CuisUniversity-4532.image priorSource: 19517928!

----STARTUP---- (19 May 2022 01:58:31) as D:\Cuis\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:01:14' prior: 50942076!
test06

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	transaction _ Withdraw register: 50 on: account.
	
	self assert: (portfolio hasRegistered: transaction).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:01:24' prior: 50942222!
test06

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: transaction).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:02:58'!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:04:52' prior: 50942244!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account transactions) equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:05:09'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/19/2022 02:06:40' prior: 50942153!
transactions
	
	account ifNil: [^{}].
	"^account transactions"! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:06:44'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:06:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:06:48'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:06:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:06:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 02:06:49'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 02:06:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 02:06:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 02:06:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:06:49'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:06:49'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/19/2022 02:07:12' prior: 50942284!
transactions
	
	account ifNil: [^{}].
	^account transactions! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:07:19'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:07:51'!
test08

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account balance) equals: portfolio balance.
	! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 02:07:52'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 02:08:56'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/19/2022 02:09:37' prior: 50941756!
balance
	
	account ifNil: [^0].
	^account balance! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:09:43'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:09:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 02:09:44'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:10:01'!
test09

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: (account balance) equals: portfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:10:33' prior: 50942379!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	self assert: (account1 balance) equals: portfolio balance.
	! !

!methodRemoval: PortfolioTest #test09 stamp: 'mf 5/19/2022 02:12:06'!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	self assert: (account1 balance) equals: portfolio balance.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 02:13:50'!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: portfolio includes: account1.
	self assert: portfolio includes: account2.
	! !

!classRemoval: #PortfolioTest stamp: 'mf 5/19/2022 02:15:32'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'mf 5/19/2022 02:15:37'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'mf 5/19/2022 02:15:49'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'mf 5/19/2022 02:15:50'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'mf 5/19/2022 02:15:50'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'mf 5/19/2022 02:15:50'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'mf 5/19/2022 02:15:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\Cuis\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/19/2022 02:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/19/2022 02:16:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/19/2022 02:16:38'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'mf 5/19/2022 02:17:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/19/2022 02:19:54'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'mf 5/19/2022 02:19:44'!
test01

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	self assert: (portfolio includes: account) not.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:20:01'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 02:20:16'!
includes: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 02:20:32' prior: 50942750!
includes: aReceptiveAccount 
	
	^false.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 02:20:35' prior: 50942755!
includes: aReceptiveAccount 
	
	^false! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:20:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 02:20:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 02:21:21'!
test02

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self assert: portfolio includes: account.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:23:15'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 02:23:34'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 02:23:50' prior: 50942768!
test02

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.
	
	self assert: portfolio includes: account.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 02:23:57'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 02:24:24'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

----STARTUP---- (19 May 2022 10:01:30) as D:\Cuis\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:06:03'!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: account transactions equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:06:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:06:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:06:32'!
test08

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: account balance equals: portfolio balance.
	! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:06:35'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:06:53'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/19/2022 10:08:00' prior: 50941756!
balance
	
	account ifNil: [^0].
	account balance.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:08:09'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:08:09'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:08:09'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:08:17'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:08:17'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/19/2022 10:08:33' prior: 50942845!
balance
	
	account ifNil: [^0].
	^account balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:09:51'!
test09

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: account balance equals: portfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:09:56' prior: 50942882!
test09

	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	self assert: account1 balance equals: portfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:11:12' prior: 50942893!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: portfolio includes: account1.
	self assert: portfolio includes: account2.
	! !

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:11:36'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:12:12'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:12:30' prior: 50942904!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio includes: account1).
	self assert: (portfolio includes: account2).
	! !

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:12:31'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 10:14:45' prior: 50941998!
add: aReceptiveAccount 
	
	account ifNil: [account _ aReceptiveAccount].
	(account class = ReceptiveAccount) ifTrue: [account _ OrderedCollection with: account].
	account add: aReceptiveAccount.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/19/2022 10:15:21'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 10:15:21' prior: 50942153!
transactions
	
	accounts ifNil: [^{}].
	^accounts transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 10:15:21' prior: 50942087!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	^accounts hasRegistered: aTransaction.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 10:15:22' prior: 50942019!
includes: anAccount 
	
	^accounts = anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 10:15:22' prior: 50942878!
balance
	
	accounts ifNil: [^0].
	^accounts balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 10:15:22' prior: 50942935!
add: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:15:31'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:17:12' prior: 50942964!
includes: anAccount 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^(accounts = anAccount)].
	^accounts includes: anAccount.! !

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:17:17'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:17:17'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:17:17'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:17:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:17:33'!
ERROR!

portfolio!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 10:18:57' prior: 50942974!
add: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:19:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:19:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:19:04'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:19:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:19:17'!
test10

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio includes: account1).
	self assert: (portfolio includes: account2).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:22:17' prior: 50943052!
test10

	| portfolio account1 account2 transaction1 transaction2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 200 on: account2.
	
	self assert: (portfolio includes: account1).
	self assert: (portfolio includes: account2).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 10:22:50' prior: 50943064!
test10

	| portfolio account1 account2 transaction1 transaction2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 200 on: account2.
	
	self assert: (portfolio hasRegistered: transaction1).
	self assert: (portfolio hasRegistered: transaction2).
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:26:15'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:26:22'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:29:19' prior: 50942957!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:35:59' prior: 50943101!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts detect: [:anAccount | anAccount hasRegistered: aTransaction] ifFound: [^true] ifNone: [^false].! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:36:35'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:38:53'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:39:09'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:40:47'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:41:13' prior: 50943109!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction)] ifFound: [^true] ifNone: [^false].! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:41:30' prior: 50943129!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction).] ifFound: [^true] ifNone: [^false].! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:41:38'!
ERROR!

portfolio!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:42:47'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:46:54'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:47:45' prior: 50943140!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction).] ifNone: [^false].! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:48:34' prior: 50943158!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	^accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction).] ifNone: [^false].
	! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:48:45' prior: 50943169!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction).] ifNone: [^false].
	! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/19/2022 10:48:53' prior: 50943180!
hasRegistered: aTransaction 
	
	accounts ifNil: [^false].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts hasRegistered: aTransaction].
	accounts detect: [:anAccount | (anAccount hasRegistered: aTransaction).] ifNone: [^false].
	^true! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 10:50:11'!
PASSED!

----QUIT----(19 May 2022 10:57:39) CuisUniversity-4532.image priorSource: 19538110!

----STARTUP---- (19 May 2022 13:08:54) as D:\Cuis\CuisUniversity-4532.image!

!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 13:11:39'!
addAccount: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 13:11:39' prior: 50943020!
add: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts addAccount: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/19/2022 13:11:39' prior: 50943232!
addAccount: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts addAccount: aReceptiveAccount.! !

!methodRemoval: Portfolio #add: stamp: 'mf 5/19/2022 13:11:40'!
add: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts addAccount: aReceptiveAccount.!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/19/2022 13:11:50' prior: 50943252!
addAccount: aReceptiveAccount 
	
	accounts ifNil: [accounts _ aReceptiveAccount. ^self].
	(accounts class = ReceptiveAccount) ifTrue: [accounts _ OrderedCollection with: accounts].
	accounts add: aReceptiveAccount.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:12:11' prior: 50942008!
test05

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.
	
	self assert: (portfolio includes: account).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:12:18' prior: 50942076!
test06

	| portfolio account transaction |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.
	transaction _ Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: transaction).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:12:23' prior: 50942800!
test07

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: account transactions equals: portfolio transactions.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:12:29' prior: 50942829!
test08

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	self assert: account balance equals: portfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:13:09' prior: 50942921!
test09

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio includes: account1).
	self assert: (portfolio includes: account2).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:13:24' prior: 50943080!
test10

	| portfolio account1 account2 transaction1 transaction2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 200 on: account2.
	
	self assert: (portfolio hasRegistered: transaction1).
	self assert: (portfolio hasRegistered: transaction2).
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 13:13:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:14:10' prior: 50943337!
test10

	| portfolio account1 account2 transaction1 transaction2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 200 on: account2.
	
	self assert: (portfolio hasRegistered: transaction1).
	self assert: (portfolio hasRegistered: transaction2).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:14:26'!
test11

	| portfolio account1 account2 transaction1 transaction2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 200 on: account2.
	
	self assert: (portfolio hasRegistered: transaction1).
	self assert: (portfolio hasRegistered: transaction2).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:15:58' prior: 50943397!
test11

	| portfolio account1 account2 transaction1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	self assert: (portfolio hasRegistered: transaction1).
	.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:17:04' prior: 50943414!
test11

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	self assert: ((account1 balance) + (account2 balance)) equals: portfolio balance.
	! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:17:09'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:17:40'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/19/2022 13:19:13' prior: 50942969!
balance
	
	accounts ifNil: [^0].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts balance].
	^ accounts sum: [:anAccount | anAccount balance]! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:19:17'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 13:19:17'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 13:19:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 13:19:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 13:19:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:19:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:20:33'!
test12

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	self assert: ((account1 transactions) + (account2 transactions)) equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:20:34'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:22:06'!
ERROR!

account2 transactions!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:23:06'!
ERROR!

jorge _ OrderedCollection with: 4.!

jeronimo _ OrderedCollection with: 254.!

jorge + jeronimo.!

jorge add: jeronimo.!

jorge add: jeronimo.!

jorge composite: jeronimo.!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:33:05' prior: 50943487!
test12

	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	self assert: ((account1 transactions) addAll: (account2 transactions)) equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:33:06'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:33:54'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:33:58'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/19/2022 13:38:12' prior: 50942952!
transactions
	
	| transactions |
	transactions _ OrderedCollection new.
	accounts ifNil: [^{}].
	(accounts class = ReceptiveAccount) ifTrue: [^accounts transactions].
	accounts do: [:anAccount | transactions addAll: (anAccount transactions)].
	^transactions! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:38:30'!
FAILURE!

((account1 transactions) addAll: (account2 transactions))!

account1 transactions!

account2 transactions!

portfolio transactions!

account1 _ ReceptiveAccount new.!

account2 _ ReceptiveAccount new.!

Deposit register: 100 on: account1.!

Deposit register: 280 on: account2.!

Withdraw register: 50 on: account1.!

Withdraw register: 28 on: account2.!

account1 transactions!

account2 transactions!

(account1 transactions) addAll: (account2 transactions)!

(account1 transactions) addAll: account2 transactions!

(account1 transactions) addAll: account2!

(account1 transactions) addAll: {4,5}!

(account1 transactions) addAll: {4 , 5}!

(account1 transactions) addAll: {4}!

(account1 transactions) !

(account2 transactions) !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:47:07' prior: 50943517!
test12

	| portfolio account1 account2 transactions |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	transactions _ ((account1 transactions) addAll: (account2 transactions)).
	
	self assert: transactions equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:47:10'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:48:09' prior: 50943579!
test12

	| portfolio account1 account2 transactions |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	transactions _ OrderedCollection new.
	
	self assert: transactions equals: portfolio transactions.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/19/2022 13:48:39' prior: 50943600!
test12

	| portfolio account1 account2 transactions |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	Deposit register: 100 on: account1.
	Deposit register: 280 on: account2.
	Withdraw register: 50 on: account1.
	Withdraw register: 28 on: account2.
	
	transactions _ OrderedCollection new.
	transactions addAll: account1 transactions.
	transactions addAll: account2 transactions.
	
	self assert: transactions equals: portfolio transactions.
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:48:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/19/2022 13:55:03'!
PASSED!

----QUIT----(19 May 2022 14:04:44) CuisUniversity-4532.image priorSource: 19570435!

----STARTUP---- (21 May 2022 12:27:38) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'mf 5/21/2022 12:36:26'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'mf 5/21/2022 12:36:27'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'mf 5/21/2022 12:36:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'mf 5/21/2022 12:36:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'mf 5/21/2022 12:36:28'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'mf 5/21/2022 12:36:28'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'mf 5/21/2022 12:36:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\Descargas\2022-1c-main\05-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 12:37:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/21/2022 12:37:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 12:37:14'!
FAILURE!
!Deposit methodsFor: 'value' stamp: 'mf 5/21/2022 12:37:26'!
balanceValue

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'mf 5/21/2022 12:37:35'!
balanceValue

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'mf 5/21/2022 12:37:43' prior: 50944012!
balanceValue

	^ -1 * value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'mf 5/21/2022 12:37:55' prior: 50943962!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceValue ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/21/2022 12:37:59'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 12:38:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 12:40:34'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'mf 5/21/2022 12:40:24'!
test01
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio contents) isEmpty.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:40:38'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:41:09'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:41:17'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 12:41:25'!
contents
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 12:41:37' prior: 50944088!
contents
	
	^{}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:41:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:41:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:42:21'!
test02
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:42:24'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 12:42:31'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 12:42:49' prior: 50944108!
transactions
	
	^OrderedCollection new.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 12:42:57' prior: 50944112!
transactions
	
	^{}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:42:58'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:42:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:43:36'!
test03
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 12:43:39'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 12:43:50'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 12:43:59' prior: 50944132!
balance
	
	^0! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 12:44:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:44:02'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:44:02'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 12:44:02'!
PASSED!

!classRemoval: #PortfolioTest stamp: 'mf 5/21/2022 12:48:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'mf 5/21/2022 12:48:27'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 12:48:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 12:49:42'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'mf 5/21/2022 12:49:38'!
test01
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:49:45'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 12:50:42'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 12:50:53' prior: 50944188!
balance
	
	^0! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:53:21'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:53:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:54:10'!
test02
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	Deposit 
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:55:14' prior: 50944200!
test02
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	
	self assert: (account balance) equals: portfolio balance.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:55:19'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 12:55:35'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 12:55:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 12:55:56' prior: 50944220!
add: aReceptiveAccount 
	
	account _ aReceptiveAccount.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:56:13'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 12:57:09' prior: 50944192!
balance
	
	account ifNil: [^0].
	^account balance! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:57:16'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:57:16'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:57:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:58:54'!
test03
	
	| portfolio1 portfolio2 account |
	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio2 add: account.
	Deposit register: 100 on: account.
	portfolio1 add: portfolio2.
	
	
	self assert: (portfolio1 balance) equals: portfolio2 balance.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 12:58:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 12:58:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 12:58:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 12:58:55'!
PASSED!

!methodRemoval: PortfolioTest #test03 stamp: 'mf 5/21/2022 12:59:09'!
test03
	
	| portfolio1 portfolio2 account |
	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio2 add: account.
	Deposit register: 100 on: account.
	portfolio1 add: portfolio2.
	
	
	self assert: (portfolio1 balance) equals: portfolio2 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:59:29'!
test03
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	
	self assert: (account balance) equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:59:39' prior: 50944284!
test03
	
	| portfolio1 account |
	
	portfolio1 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 add: account.
	Deposit register: 100 on: account.
	
	
	self assert: (account balance) equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 12:59:46' prior: 50944294!
test03
	
	| portfolio1 account1 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	
	self assert: (account1 balance) equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:00:02' prior: 50944305!
test03
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	
	self assert: (account1 balance) equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:01:36' prior: 50944316!
test03
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (portfolio2 balance)) equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:01:38'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 13:03:44' prior: 50944232!
add: anAccountOrPortfolio 
	
	account _ anAccountOrPortfolio.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/21/2022 13:04:01'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:04:01' prior: 50944239!
balance
	
	accountsAndPortfolios ifNil: [^0].
	^accountsAndPortfolios balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:04:01' prior: 50944346!
add: anAccountOrPortfolio 
	
	accountsAndPortfolios _ anAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 13:04:47' prior: 50944365!
add: anAccountOrPortfolio 
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:04:56'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'mf 5/21/2022 13:05:35' overrides: 16896425!
initialize
	
	accountsAndPortfolios _ OrderedCollection new.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:05:41'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:05:55'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:06:02'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 13:06:58' prior: 50944359!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPortfolio | anAccountOrPortfolio balance]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 13:07:00'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 13:07:00'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:07:00'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 13:07:00'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 13:07:14' prior: 50944390!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPortfolio | anAccountOrPortfolio balance] ifEmpty: 0! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 13:07:16'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 13:07:16'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:07:16'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty:
			(0 coverAll:
				{103 to: 104}) ] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 13:08:29'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(accountsAndPortfolios
		cover: (31 to: 51)
		declaredAt: (31 to: 51)) add:
		(anAccountOrPortfolio
			cover: (58 to: 77)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{53 to: 56}.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 13:08:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:08:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:09:19'!
test04
	
	| portfolio1 account1  portfolio2 account2 transaction1 transactions2 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transactions2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (portfolio2 balance)) equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:09:40' prior: 50944508!
test04
	
	| portfolio1 account1  portfolio2 account2 transaction1 transactions2 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transactions2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 13:11:26' prior: 50944527!
test04
	
	| portfolio1 account1  portfolio2 account2 transaction1 transaction2 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2)
	! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:11:31'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:11:59'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:12:06'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 13:12:20'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 13:12:39' prior: 50944569!
hasRegistered: aDeposit 
	
	! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 13:16:07' prior: 50944574!
hasRegistered: aTransaction 
	
	accountsAndPortfolios detect: [:anAccountOrPortfolio | anAccountOrPortfolio hasRegistered: aTransaction] 
	ifFound: [^true] 
	ifNone: [^false]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 13:16:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 13:16:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 13:16:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:16:09'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:16:09'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:16:18'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:16:50'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 13:18:05'!
ERROR!

----SNAPSHOT----(21 May 2022 13:32:18) CuisUniversity-4532.image priorSource: 19585526!

----QUIT----(21 May 2022 13:32:20) CuisUniversity-4532.image priorSource: 19614524!

----STARTUP---- (21 May 2022 15:00:56) as D:\Cuis\CuisUniversity-4532.image!


!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:01:18'!
ERROR!

carlitos _ OrderedCollection with: 3 with: 4 with:17.!

carlitos detect: [:jjj | (jjj mod: 2) = 0]!

carlitos detect: [:jjj | (jjj mod: 2) = 0] ifFound: [^true] ifNone: [^false].!

carlitos detect: [:jjj | (jjj mod: 2) = 0] ifFound: [:jorge | ^true] ifNone: [^false].!

carlitos detect: [:jjj | (jjj mod: 2) = 0] ifNone: [^false].  !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/21/2022 15:06:57' prior: 50944578!
hasRegistered: aTransaction 
	
	accountsAndPortfolios detect: [:anAccountOrPortfolio | anAccountOrPortfolio hasRegistered: aTransaction] 
	ifNone: [^false].
	
	^true! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:07:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:07:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:07:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:07:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:07:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:10:15'!
test05
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	(transactions addAll: (account1 transactions)) addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:10:39'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:13:05' prior: 50944646!
test05
	
	| portfolio |
	
	portfolio _ Portfolio new.

	self assert:	 (portfolio transactions) isEmpty.! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:13:08'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:13:15'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:13:18'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:13:23'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/21/2022 15:13:40'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/21/2022 15:13:55' prior: 50944686!
transactions
	
	^{}! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:13:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:13:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:13:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:13:57'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:13:57'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:14:28'!
test06
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	(transactions addAll: (account1 transactions)) addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:14:44' prior: 50944327!
test03
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (account2 balance)) equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:14:47'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:14:47'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:14:47'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:15:00'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:15:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:15:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:15:06'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:15:06'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'mf 5/21/2022 15:18:16' prior: 50944691!
transactions
	
	| transactions |
	transactions _ OrderedCollection new.
	accountsAndPortfolios do: [:anAccountOrPortfolio | transactions addAll: (anAccountOrPortfolio transactions)].
	^transactions! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:18:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:18:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:18:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:18:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:18:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:18:20'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:18:20'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:19:07' prior: 50944706!
test06
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:19:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:19:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:19:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:19:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:19:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:19:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:19:08'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty:
			(0 coverAll:
				{103 to: 104}) ] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:25:38'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(accountsAndPortfolios
		cover: (31 to: 51)
		declaredAt: (31 to: 51)) add:
		(anAccountOrPortfolio
			cover: (58 to: 77)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{53 to: 56}.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:25:39'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:25:39'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:25:39'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:25:39'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:25:39'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:26:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:26:37'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty:
			(0 coverAll:
				{103 to: 104}) ] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:26:41'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(accountsAndPortfolios
		cover: (31 to: 51)
		declaredAt: (31 to: 51)) add:
		(anAccountOrPortfolio
			cover: (58 to: 77)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{53 to: 56}.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:26:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:26:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:26:41'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:26:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:26:42'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 15:28:14' prior: 50944405!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPortfolio | anAccountOrPortfolio balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:28:24'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{105 to: 105} ]] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:28:43'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(accountsAndPortfolios
		cover: (31 to: 51)
		declaredAt: (31 to: 51)) add:
		(anAccountOrPortfolio
			cover: (58 to: 77)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{53 to: 56}.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:28:43'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:28:43'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:28:44'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:28:44'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:28:44'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 15:29:12' prior: 50945187!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPortfolio | anAccountOrPortfolio balance] "ifEmpty: [0]"! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:29:13'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:29:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:29:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:29:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:29:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:29:13'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:29:13'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'mf 5/21/2022 15:29:21' prior: 50945369!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPortfolio | anAccountOrPortfolio balance] ifEmpty: [0]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:30:45' prior: 50944543!
test04
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2)
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:31:12' prior: 50945399!
test04
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2).
	self assert: (portfolio1 hasRegistered: transaction3) not
	! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:31:12'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:31:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:34:33'!
test07
	
	| portfolio number |
	
	portfolio _ Portfolio new.
	number _ 4.
	
	self 
	should: [portfolio add: number]
	raise: Error
	 ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:36:47' prior: 50945463!
test07
	
	| portfolio number |
	
	portfolio _ Portfolio new.
	number _ 4.
	
	self 
	should: [portfolio add: number]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio canNotAddObjectDifferentThatPortfolioOrAccount]
	 ! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 15:36:53'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 15:41:03' prior: 50945471!
test07
	
	| portfolio number |
	
	portfolio _ Portfolio new.
	number _ 4.
	
	self 
	should: [portfolio add: number]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	 ! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 15:41:30' prior: 50944370!
add: anAccountOrPortfolio 

	((anAccountOrPortfolio class ~= ReceptiveAccount) or: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:41:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:41:32'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:41:32'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:41:32'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:41:32'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:41:32'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 15:41:32'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:41:52'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:41:52'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:41:58'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 15:42:34' prior: 50945495!
add: anAccountOrPortfolio 

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:42:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:42:39'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 15:42:39'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 15:42:39'!
ERROR!
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 15:43:00'!
objectAddedUnknownErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 15:43:10' prior: 50945563!
objectAddedUnknownErrorDescription
	
	! !
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 15:43:58' prior: 50945568!
objectAddedUnknownErrorDescription

	^ ' The object you are trying to add is neither an account or a portfolio'.
	
	! !
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 15:44:00' prior: 50945573!
objectAddedUnknownErrorDescription

	^ ' The object you are trying to add is neither an account or a portfolio'
	
	! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 15:44:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 15:44:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 15:44:05'!
PASSED!

portfolio _ Portfolio new.!

number _ 4.!

portfolio add: number!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:00:00'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:00:03'!
PASSED!

jorgito _ ReceptiveAccount new.!

jorgelin _ ReceptiveAccount new.!

Deposit register: 100 on: jorgito. !

Deposit register: 100 on: jorgelin. !

jorgito = jorgelin.!

jorgito _ ReceptiveAccount new.!

jorgelin _ ReceptiveAccount new.!

jorgito balance!

jorgito = jorgelin!

carlito _ jorgito!

carlito = jorgelin!

carlito = jorgito!

Deposit register: 100 on: carlito!

jorgito balance!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{105 to: 105} ]] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	([
	([
	([
	(anAccountOrPortfolio
		cover: (32 to: 51)
		declaredAt: (6 to: 25)) class ] valueCoveringAll:
		{53 to: 57}) ~=
		(ReceptiveAccount
			cover: (62 to: 77)
			declaredAt: (62 to: 77)) ] valueCoveringAll:
		{59 to: 60}) and:
		([
		([
		(anAccountOrPortfolio
			cover: (86 to: 105)
			declaredAt: (6 to: 25)) class ] valueCoveringAll:
			{107 to: 111}) ~=
			(Portfolio
				cover: (116 to: 124)
				declaredAt: (116 to: 124)) ] valueCoveringAll:
			{113 to: 114}) ] valueCoveringAll:
		{80 to: 83}) ifTrue: [
		[
		(self coverAll:
			{139 to: 142}) error:
			([
			(Portfolio
				cover: (151 to: 159)
				declaredAt: (116 to: 124)) objectAddedUnknownErrorDescription ] valueCoveringAll:
				{161 to: 194}) ] valueCoveringAll:
			{144 to: 149} ]] valueCoveringAll:
		{130 to: 136}.
	[
	(accountsAndPortfolios
		cover: (201 to: 221)
		declaredAt: (201 to: 221)) add:
		(anAccountOrPortfolio
			cover: (228 to: 247)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{223 to: 226}.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!Behavior method!
objectAddedUnknownErrorDescription
	^ ' The object you are trying to add is neither an account or a portfolio' coverAll:
		{40 to: 111}.! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:06:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:12:23'!
test08
	
	| portfolio1 account portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	 ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:12:43' prior: 50945849!
test08
	
	| portfolio account portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio add: portfolio2.
	 ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:13:03' prior: 50945859!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	 ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:15:53' prior: 50945869!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	
	self
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:15:57'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 16:18:17' prior: 50945529!
add: anAccountOrPortfolio 

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	accountsAndPortfolios includes: anAccountOrPortfolio ifTrue: [self error: Portfolio duplicateInformationErrorDescription].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 16:18:26' prior: 50945891!
add: anAccountOrPortfolio 

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	(accountsAndPortfolios includes: anAccountOrPortfolio) ifTrue: [self error: Portfolio duplicateInformationErrorDescription].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:18:38'!
ERROR!
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 16:18:56'!
duplicateInformationErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error handling' stamp: 'mf 5/21/2022 16:19:21' prior: 50945923!
duplicateInformationErrorDescription
	
	^ 'Adding this object generates duplication of information'! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:19:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:20:49'!
test09
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	
	self
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !

!methodRemoval: PortfolioTest #test09 stamp: 'mf 5/21/2022 16:24:15'!
test09
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	
	self
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:24:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:24:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:24:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:24:19'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 16:25:46'!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	(accountsAndPortfolios includes: anAccountOrPortfolio) ifTrue: [self error: Portfolio duplicateInformationErrorDescription]! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 16:25:47' prior: 50945906!
add: anAccountOrPortfolio 

	self assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio.
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:27:45'!
test09
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	
	self
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:27:56' prior: 50946021!
test09
	
	| portfolio1 account |
	
	portfolio1 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	
	self
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:28:02' prior: 50946033!
test09
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	
	self
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:28:15' prior: 50946045!
test09
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	
	self
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:28:34' prior: 50946058!
test09
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]! !

!methodRemoval: PortfolioTest #test07 stamp: 'mf 5/21/2022 16:33:58'!
test07
	
	| portfolio number |
	
	portfolio _ Portfolio new.
	number _ 4.
	
	self 
	should: [portfolio add: number]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	 !

!methodRemoval: PortfolioTest #test08 stamp: 'mf 5/21/2022 16:34:13'!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio add: account.
	
	self
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]!

!methodRemoval: PortfolioTest #test09 stamp: 'mf 5/21/2022 16:34:16'!
test09
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]!

!methodRemoval: Portfolio #assertAnAccountOrPortfolioCanBeAdded: stamp: 'mf 5/21/2022 16:34:28'!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio)) 
	ifTrue: [self error: Portfolio objectAddedUnknownErrorDescription].
	
	(accountsAndPortfolios includes: anAccountOrPortfolio) ifTrue: [self error: Portfolio duplicateInformationErrorDescription]!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:34:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:34:36'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:34:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:34:36'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:34:36'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:34:36'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:34:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:34:36'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 16:34:51' prior: 50946013!
add: anAccountOrPortfolio 
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:36:18'!
test07
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio accounts) isEmpty.! !

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:36:24'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:36:42'!
accounts
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:37:02' prior: 50946166!
accounts
	
	^{}.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:37:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:38:52'!
test08
	
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	
	
	self assert: (portfolio accounts) isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:39:24' prior: 50946190!
test08
	
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	self assert: (portfolio accounts) isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:39:40' prior: 50946197!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	self assert: (portfolio accounts) isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:40:36' prior: 50946205!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self assert: 1 equals: (portfolio accounts) size.
	self assert: (portfolio accounts) includes: account.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:40:42' prior: 50946213!
test08
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self assert: 1 equals: (portfolio accounts) size.
	self assert: ((portfolio accounts) includes: account).! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:40:43'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:41:04' prior: 50946170!
accounts
	
	^accountsAndPortfolios.! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:41:12'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:41:26' prior: 50946237!
accounts
	
	^accountsAndPortfolios copy! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:41:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:41:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:42:48' prior: 50946224!
test08
	
	| portfolio2 account |
	
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio2 add: account.
	
	self assert: 1 equals: (portfolio2 accounts) size.
	self assert: ((portfolio2 accounts) includes: account).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:43:23' prior: 50946285!
test08
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio2 add: account.
	
	self assert: 1 equals: (portfolio2 accounts) size.
	self assert: ((portfolio2 accounts) includes: account).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:45:06' prior: 50946296!
test08
	
	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	
	self assert: 2 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).! !

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:45:07'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:49:19' prior: 50946262!
accounts
	
	^(accountsAndPortfolios 
	detect: [:anAccountOrPortfolio | (anAccountOrPortfolio class = Portfolio)] 
	ifNone: [^accountsAndPortfolios]) accounts.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:49:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:50:19'!
test09
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 2 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 16:50:44' prior: 50946354!
test09
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).! !

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 16:50:46'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:53:58' prior: 50946327!
accounts
	
	| accounts |
	accounts _ OrderedCollection new.
	
	accountsAndPortfolios do: 
	[:anAccountOrPortfolio | 
		(anAccountOrPortfolio class = ReceptiveAccount) ifTrue: [accounts add: anAccountOrPortfolio].
		(anAccountOrPortfolio class = Portfolio) ifTrue: [accounts addAll: (anAccountOrPortfolio accounts)].  ].! !
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 16:54:09' prior: 50946396!
accounts
	
	| accounts |
	accounts _ OrderedCollection new.
	
	accountsAndPortfolios do: 
	[:anAccountOrPortfolio | 
		(anAccountOrPortfolio class = ReceptiveAccount) ifTrue: [accounts add: anAccountOrPortfolio].
		(anAccountOrPortfolio class = Portfolio) ifTrue: [accounts addAll: (anAccountOrPortfolio accounts)].  ].
	
	^accounts! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 16:54:10'!
PASSED!
!ReceptiveAccount methodsFor: 'private' stamp: 'mf 5/21/2022 17:13:09'!
accounts
	
	^ OrderedCollection with: self! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:13:14'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:13:15'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/21/2022 17:13:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/21/2022 17:13:19'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 17:13:57' prior: 50946409!
accounts
	
	| accounts |
	accounts _ OrderedCollection new.
	
	accountsAndPortfolios do: 
	[:anAccountOrPortfolio | accounts addAll: anAccountOrPortfolio accounts].
	
	^accounts! !
!Portfolio methodsFor: 'private' stamp: 'mf 5/21/2022 17:14:04' prior: 50946503!
accounts
	
	| accounts |
	accounts _ OrderedCollection new.
	
	accountsAndPortfolios do:  [:anAccountOrPortfolio | accounts addAll: anAccountOrPortfolio accounts].
	
	^accounts! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:14:05'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:14:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:15:29'!
test010
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:15:33'!
test10
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).! !

!methodRemoval: PortfolioTest #test010 stamp: 'mf 5/21/2022 17:15:39'!
test010
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:17:13' prior: 50946586!
test10
	
	| portfolio anObject |
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:19:26' prior: 50946627!
test10
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ 4.
	
	self 
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio ]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:19:44' prior: 50946632!
test10
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ 4.
	
	self 
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:19:53'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:21:35' prior: 50946152!
add: anAccountOrPortfolio 
	
	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription].  
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:21:37'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:21:43' prior: 50946655!
add: anAccountOrPortfolio 
	
	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription].  
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:22:32'!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	^ ((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription]! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:22:32' prior: 50946689!
add: anAccountOrPortfolio 
	
	self assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio.  
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/21/2022 17:22:47' prior: 50946699!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:22:48'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/21/2022 17:23:14'!
assertObjectIsAccountOrPortfolio: anAccountOrPortfolio

	^ ((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription]! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/21/2022 17:23:14' prior: 50946717!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/21/2022 17:23:26' prior: 50946750!
assertObjectIsAccountOrPortfolio: anAccountOrPortfolio

	((anAccountOrPortfolio class ~= ReceptiveAccount) and: (anAccountOrPortfolio class ~= Portfolio))
	
	ifTrue:[self error: Portfolio objectAddedUnknownErrorDescription]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:23:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:25:51' prior: 50946642!
test10
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:26:06' prior: 50946801!
test10
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	
	self 
	should: [portfolio add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:26:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:26:42' prior: 50946709!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:26:45'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:26:45'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:26:45'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:26:53'!
PASSED!

!methodRemoval: Portfolio #assertAnAccountOrPortfolioCanBeAdded: stamp: 'mf 5/21/2022 17:27:02'!
assertAnAccountOrPortfolioCanBeAdded: anAccountOrPortfolio

	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:27:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:32:04' prior: 50946827!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	(accountsAndPortfolios includes: anAccountOrPortfolio) ifTrue: [self error: '¿'].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:32:27' prior: 50946872!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	(accountsAndPortfolios includes: anAccountOrPortfolio) ifTrue: [self error: Portfolio duplicateInformationErrorDescription].
	
	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:32:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:32:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:35:19' prior: 50946813!
test10
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 add: account.
	
	self 
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:36:06' prior: 50946917!
test10
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:36:14' prior: 50946930!
test10
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:36:15'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:40:11' prior: 50946882!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	(anAccountOrPortfolio accounts) detect: [:anAccount | self accounts includes: anAccount] 
	ifNone: [accountsAndPortfolios add: anAccountOrPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:42:59' prior: 50946966!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	(anAccountOrPortfolio accounts) allSatisfy: []! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:45:52' prior: 50946977!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	((anAccountOrPortfolio accounts) allSatisfy: [:anAccount | (self accounts includes: anAccount) not]) 
	ifFalse: [self error: Portfolio duplicateInformationErrorDescription ].
	
	accountsAndPortfolios add: anAccountOrPortfolio! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:46:33'!
PASSED!

----SNAPSHOT----(21 May 2022 17:46:53) CuisUniversity-4532.image priorSource: 19614613!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:48:14' prior: 50946947!
test10
	
	| portfolio1 portfolio2  account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:48:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:48:25' prior: 50947027!
test10
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 17:48:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:48:41'!
test11
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/21/2022 17:49:21' prior: 50947109!
test11
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/21/2022 17:49:22'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:53:29'!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	^ ((anAccountOrPortfolio accounts) allSatisfy: [:anAccount | (self accounts includes: anAccount) not]) 
	ifFalse: [self error: Portfolio duplicateInformationErrorDescription ]! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 17:53:29' prior: 50946985!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	self assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio.
	
	accountsAndPortfolios add: anAccountOrPortfolio! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/21/2022 18:06:51' prior: 50947153!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	self assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio.
	
	accountsAndPortfolios add: anAccountOrPortfolio! !

!methodRemoval: PortfolioTest #test11 stamp: 'mf 5/21/2022 18:07:03'!
test11
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/21/2022 18:07:07'!
PASSED!

----SNAPSHOT----(21 May 2022 18:46:06) CuisUniversity-4532.image priorSource: 19691922!

----QUIT----(21 May 2022 18:55:46) CuisUniversity-4532.image priorSource: 19697949!

----STARTUP---- (23 May 2022 13:04:56) as D:\Cuis\CuisUniversity-4532.image!


!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:05:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:07:56'!
test11
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	
	
	
	
	! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:08:00'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/23/2022 13:08:19'!
isChildOf: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/23/2022 13:08:43'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'testing' stamp: 'mf 5/23/2022 13:08:40' prior: 50947256!
isChildOf: aPortfolio 
	
	^father = aPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:08:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:08:54'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:08:54'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:09:08'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'mf 5/23/2022 13:10:27' prior: 50947163!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	self assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio.
	
	(anAccountOrPortfolio class = Portfolio) ifTrue: [anAccountOrPortfolio setFather: self].
	
	accountsAndPortfolios add: anAccountOrPortfolio! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:10:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:10:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:10:32'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:10:32'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:10:32'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:10:32'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:10:32'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:10:33'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:10:33'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:10:33'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:10:33'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:10:42'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'mf 5/23/2022 13:10:54'!
setFather: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'mf 5/23/2022 13:11:06' prior: 50947344!
setFather: aPortfolio 
	
	father _ aPortfolio! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:11:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:12:03'!
test12
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:12:19' prior: 50947379!
test12
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:12:24'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'mf 5/23/2022 13:13:08'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:13:09' prior: 50947349!
setFather: aPortfolio 
	
	parents _ aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:13:09' prior: 50947269!
isChildOf: aPortfolio 
	
	^parents = aPortfolio.! !
!Portfolio methodsFor: 'testing' stamp: 'mf 5/23/2022 13:13:15' prior: 50947419!
isChildOf: aPortfolio 
	
	^parents includes: aPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'mf 5/23/2022 13:13:30' prior: 50947414!
setFather: aPortfolio 
	
	parents add: aPortfolio! !
!Portfolio methodsFor: 'initialization' stamp: 'mf 5/23/2022 13:13:45' prior: 50944378 overrides: 16896425!
initialize
	
	accountsAndPortfolios _ OrderedCollection new.
	parents _ OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:13:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:13:58'!
test13
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:15:34' prior: 50947391!
test12
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:17:11' prior: 50947484!
test12
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:17:13'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:19:11' prior: 50947142!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	((anAccountOrPortfolio accounts) allSatisfy: [:anAccount | (self accounts includes: anAccount) not]) 
	ifFalse: [self error: Portfolio duplicateInformationErrorDescription ]! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:19:12'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:19:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:19:12'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:19:25'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:19:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:19:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:19:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:19:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:19:32'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:19:47'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:19:49'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:19:50'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:19:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:19:59'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:20:01'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:20:01'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:20:05'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'mf 5/23/2022 13:20:05'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:20:29'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:21:02'!
test12aPortfolioCanHaveMoreThanOneParent
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	! !

!methodRemoval: PortfolioTest #test13 stamp: 'mf 5/23/2022 13:21:02'!
test13
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:21:24'!
test13
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test12 stamp: 'mf 5/23/2022 13:21:24'!
test12
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:21:29'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:26:11'!
assertInformationIsNotSharedWith: anAccountOrPortfolio

	^ (anAccountOrPortfolio accounts) allSatisfy: [:anAccount | (self accounts includes: anAccount) not]! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:26:11' prior: 50947508!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	(self assertInformationIsNotSharedWith: anAccountOrPortfolio) 
	ifFalse: [self error: Portfolio duplicateInformationErrorDescription ]! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:27:06' prior: 50947652!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	self assertInformationIsNotSharedWith: anAccountOrPortfolio
	! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:27:22' prior: 50947644!
assertInformationIsNotSharedWith: anAccountOrPortfolio

	((anAccountOrPortfolio accounts) allSatisfy: [:anAccount | (self accounts includes: anAccount) not])
	ifFalse: [self error: Portfolio duplicateInformationErrorDescription ]! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:28:41' prior: 50947662!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	
	parents do: [:aPortfolioParent | aPortfolioParent assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio]
	! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:28:46' prior: 50947679!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	
	parents 
	do: [:aPortfolioParent | aPortfolioParent assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio]
	! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:28:59' prior: 50947688!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	
	parents 
	do: [:aPortfolioParent | aPortfolioParent assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio].
	! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:29:30' prior: 50947697!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	
	parents 
	do: [:aPortfolioParent | aPortfolioParent assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio].
	! !
!Portfolio methodsFor: 'assertions' stamp: 'mf 5/23/2022 13:31:17' prior: 50947706!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio

	
	parents 
	do: [:aPortfolioParent | aPortfolioParent assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio].
	
	parents ifEmpty: [self assertInformationIsNotSharedWith: anAccountOrPortfolio].
	! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 13:31:28'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:31:28'!
PASSED!
!ReceptiveAccount methodsFor: 'private' stamp: 'mf 5/23/2022 13:32:49'!
setFather
	
	! !
!Portfolio methodsFor: 'adding' stamp: 'mf 5/23/2022 13:33:07' prior: 50947304!
add: anAccountOrPortfolio 
	
	self assertObjectIsAccountOrPortfolio: anAccountOrPortfolio.  
	
	self assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio.
	
	anAccountOrPortfolio setFather: self.
	
	accountsAndPortfolios add: anAccountOrPortfolio! !

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:33:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/23/2022 13:33:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/23/2022 13:33:09'!
PASSED!
!ReceptiveAccount methodsFor: 'private' stamp: 'mf 5/23/2022 13:33:29'!
setFather: aPortfolio
	
	! !

!methodRemoval: ReceptiveAccount #setFather stamp: 'mf 5/23/2022 13:33:35'!
setFather
	
	!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 13:33:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:33:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:34:26'!
test01emptyPortfolioBalanceIsZero
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'mf 5/23/2022 13:34:26'!
test01
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 13:59:00'!
test02portfolioWithOneAccountBalanceEqualsAccountBalance
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	
	self assert: (account balance) equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02 stamp: 'mf 5/23/2022 13:59:00'!
test02
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 100 on: account.
	
	
	self assert: (account balance) equals: portfolio balance.!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 13:59:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mf 5/23/2022 13:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mf 5/23/2022 13:59:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 14:04:10'!
test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (account2 balance)) equals: portfolio1 balance.! !

!methodRemoval: PortfolioTest #test03 stamp: 'mf 5/23/2022 14:04:10'!
test03
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (account2 balance)) equals: portfolio1 balance.!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).
	(parents _ [
	(OrderedCollection
		cover: (73 to: 89)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{91 to: 93})
		cover: (63 to: 69)
		declaredAt: (63 to: 69).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{105 to: 105} ]] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:05:11'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(self coverAll:
		{31 to: 34}) assertObjectIsAccountOrPortfolio:
		(anAccountOrPortfolio
			cover: (70 to: 89)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{36 to: 68}.
	[
	(self coverAll:
		{97 to: 100}) assertAddingDoesNotGenerateDuplicateInformation:
		(anAccountOrPortfolio
			cover: (151 to: 170)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{102 to: 149}.
	[
	(anAccountOrPortfolio
		cover: (176 to: 195)
		declaredAt: (6 to: 25)) setFather:
		(self coverAll:
			{208 to: 211}) ] valueCoveringAll:
		{197 to: 206}.
	[
	(accountsAndPortfolios
		cover: (217 to: 237)
		declaredAt: (217 to: 237)) add:
		(anAccountOrPortfolio
			cover: (244 to: 263)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertObjectIsAccountOrPortfolio: anAccountOrPortfolio
	[
	([
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) class ] valueCoveringAll:
		{81 to: 85}) ~=
		(ReceptiveAccount
			cover: (90 to: 105)
			declaredAt: (90 to: 105)) ] valueCoveringAll:
		{87 to: 88}) and:
		([
		([
		(anAccountOrPortfolio
			cover: (114 to: 133)
			declaredAt: (35 to: 54)) class ] valueCoveringAll:
			{135 to: 139}) ~=
			(Portfolio
				cover: (144 to: 152)
				declaredAt: (144 to: 152)) ] valueCoveringAll:
			{141 to: 142}) ] valueCoveringAll:
		{108 to: 111}) ifTrue: [
		[
		(self coverAll:
			{167 to: 170}) error:
			([
			(Portfolio
				cover: (179 to: 187)
				declaredAt: (144 to: 152)) objectAddedUnknownErrorDescription ] valueCoveringAll:
				{189 to: 222}) ] valueCoveringAll:
			{172 to: 177} ]] valueCoveringAll:
		{159 to: 165}.! !
!Behavior method!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio
	[
	(parents
		cover: (75 to: 81)
		declaredAt: (75 to: 81)) do: [ :aPortfolioParent |
		[
		(aPortfolioParent
			cover: (110 to: 125)
			declaredAt: (91 to: 106)) assertAddingDoesNotGenerateDuplicateInformation:
			(anAccountOrPortfolio
				cover: (176 to: 195)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{127 to: 174} ]] valueCoveringAll:
		{85 to: 87}.
	[
	(parents
		cover: (202 to: 208)
		declaredAt: (75 to: 81)) ifEmpty: [
		[
		(self coverAll:
			{220 to: 223}) assertInformationIsNotSharedWith:
			(anAccountOrPortfolio
				cover: (259 to: 278)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{225 to: 257} ]] valueCoveringAll:
		{210 to: 217}.! !
!Behavior method!
assertInformationIsNotSharedWith: anAccountOrPortfolio
	[
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) accounts ] valueCoveringAll:
		{81 to: 88}) allSatisfy: [ :anAccount |
		[
		([
		([
		(self coverAll:
			{118 to: 121}) accounts ] valueCoveringAll:
			{123 to: 130}) includes:
			(anAccount
				cover: (142 to: 150)
				declaredAt: (105 to: 113)) ] valueCoveringAll:
			{132 to: 140}) not ] valueCoveringAll:
			{153 to: 155} ]] valueCoveringAll:
		{91 to: 101}) ifFalse: [
		[
		(self coverAll:
			{170 to: 173}) error:
			([
			(Portfolio
				cover: (182 to: 190)
				declaredAt: (182 to: 190)) duplicateInformationErrorDescription ] valueCoveringAll:
				{192 to: 227}) ] valueCoveringAll:
			{175 to: 180} ]] valueCoveringAll:
		{160 to: 167}.! !
!Behavior method!
accounts
	^ [
	(OrderedCollection
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) with:
		(self coverAll:
			{39 to: 42}) ] valueCoveringAll:
		{33 to: 37}.! !
!Behavior method!
accounts
	| accounts |
	(accounts _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (27 to: 34)
		declaredAt: (15 to: 22).
	[
	(accountsAndPortfolios
		cover: (64 to: 84)
		declaredAt: (64 to: 84)) do: [ :anAccountOrPortfolio |
		[
		(accounts
			cover: (116 to: 123)
			declaredAt: (15 to: 22)) addAll:
			([
			(anAccountOrPortfolio
				cover: (133 to: 152)
				declaredAt: (93 to: 112)) accounts ] valueCoveringAll:
				{154 to: 161}) ] valueCoveringAll:
			{125 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ accounts
		cover: (169 to: 176)
		declaredAt: (15 to: 22).! !
!Behavior method!
setFather: aPortfolio
	^ self.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:05:11'!
PASSED!
!Behavior method!
setFather: aPortfolio
	[
	(parents
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		(aPortfolio
			cover: (40 to: 49)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{35 to: 38}.! !

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!Behavior method!
duplicateInformationErrorDescription
	^ 'Adding this object generates duplication of information' coverAll:
		{43 to: 99}.! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!Behavior method!
isChildOf: aPortfolio
	^ [
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) includes:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{36 to: 44}.! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:05:12'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:05:55' prior: 50947245!
test11
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self assert: (portfolio1 isChildOf: portfolio2) not
	
	
	
	
	! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:05:57'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:05:57'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).
	(parents _ [
	(OrderedCollection
		cover: (73 to: 89)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{91 to: 93})
		cover: (63 to: 69)
		declaredAt: (63 to: 69).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{105 to: 105} ]] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:06:05'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(self coverAll:
		{31 to: 34}) assertObjectIsAccountOrPortfolio:
		(anAccountOrPortfolio
			cover: (70 to: 89)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{36 to: 68}.
	[
	(self coverAll:
		{97 to: 100}) assertAddingDoesNotGenerateDuplicateInformation:
		(anAccountOrPortfolio
			cover: (151 to: 170)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{102 to: 149}.
	[
	(anAccountOrPortfolio
		cover: (176 to: 195)
		declaredAt: (6 to: 25)) setFather:
		(self coverAll:
			{208 to: 211}) ] valueCoveringAll:
		{197 to: 206}.
	[
	(accountsAndPortfolios
		cover: (217 to: 237)
		declaredAt: (217 to: 237)) add:
		(anAccountOrPortfolio
			cover: (244 to: 263)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertObjectIsAccountOrPortfolio: anAccountOrPortfolio
	[
	([
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) class ] valueCoveringAll:
		{81 to: 85}) ~=
		(ReceptiveAccount
			cover: (90 to: 105)
			declaredAt: (90 to: 105)) ] valueCoveringAll:
		{87 to: 88}) and:
		([
		([
		(anAccountOrPortfolio
			cover: (114 to: 133)
			declaredAt: (35 to: 54)) class ] valueCoveringAll:
			{135 to: 139}) ~=
			(Portfolio
				cover: (144 to: 152)
				declaredAt: (144 to: 152)) ] valueCoveringAll:
			{141 to: 142}) ] valueCoveringAll:
		{108 to: 111}) ifTrue: [
		[
		(self coverAll:
			{167 to: 170}) error:
			([
			(Portfolio
				cover: (179 to: 187)
				declaredAt: (144 to: 152)) objectAddedUnknownErrorDescription ] valueCoveringAll:
				{189 to: 222}) ] valueCoveringAll:
			{172 to: 177} ]] valueCoveringAll:
		{159 to: 165}.! !
!Behavior method!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio
	[
	(parents
		cover: (75 to: 81)
		declaredAt: (75 to: 81)) do: [ :aPortfolioParent |
		[
		(aPortfolioParent
			cover: (110 to: 125)
			declaredAt: (91 to: 106)) assertAddingDoesNotGenerateDuplicateInformation:
			(anAccountOrPortfolio
				cover: (176 to: 195)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{127 to: 174} ]] valueCoveringAll:
		{85 to: 87}.
	[
	(parents
		cover: (202 to: 208)
		declaredAt: (75 to: 81)) ifEmpty: [
		[
		(self coverAll:
			{220 to: 223}) assertInformationIsNotSharedWith:
			(anAccountOrPortfolio
				cover: (259 to: 278)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{225 to: 257} ]] valueCoveringAll:
		{210 to: 217}.! !
!Behavior method!
assertInformationIsNotSharedWith: anAccountOrPortfolio
	[
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) accounts ] valueCoveringAll:
		{81 to: 88}) allSatisfy: [ :anAccount |
		[
		([
		([
		(self coverAll:
			{118 to: 121}) accounts ] valueCoveringAll:
			{123 to: 130}) includes:
			(anAccount
				cover: (142 to: 150)
				declaredAt: (105 to: 113)) ] valueCoveringAll:
			{132 to: 140}) not ] valueCoveringAll:
			{153 to: 155} ]] valueCoveringAll:
		{91 to: 101}) ifFalse: [
		[
		(self coverAll:
			{170 to: 173}) error:
			([
			(Portfolio
				cover: (182 to: 190)
				declaredAt: (182 to: 190)) duplicateInformationErrorDescription ] valueCoveringAll:
				{192 to: 227}) ] valueCoveringAll:
			{175 to: 180} ]] valueCoveringAll:
		{160 to: 167}.! !
!Behavior method!
accounts
	^ [
	(OrderedCollection
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) with:
		(self coverAll:
			{39 to: 42}) ] valueCoveringAll:
		{33 to: 37}.! !
!Behavior method!
accounts
	| accounts |
	(accounts _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (27 to: 34)
		declaredAt: (15 to: 22).
	[
	(accountsAndPortfolios
		cover: (64 to: 84)
		declaredAt: (64 to: 84)) do: [ :anAccountOrPortfolio |
		[
		(accounts
			cover: (116 to: 123)
			declaredAt: (15 to: 22)) addAll:
			([
			(anAccountOrPortfolio
				cover: (133 to: 152)
				declaredAt: (93 to: 112)) accounts ] valueCoveringAll:
				{154 to: 161}) ] valueCoveringAll:
			{125 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ accounts
		cover: (169 to: 176)
		declaredAt: (15 to: 22).! !
!Behavior method!
setFather: aPortfolio
	^ self.! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
setFather: aPortfolio
	[
	(parents
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		(aPortfolio
			cover: (40 to: 49)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{35 to: 38}.! !

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
duplicateInformationErrorDescription
	^ 'Adding this object generates duplication of information' coverAll:
		{43 to: 99}.! !

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!Behavior method!
isChildOf: aPortfolio
	^ [
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) includes:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{36 to: 44}.! !

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:06:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:08:06'!
test14
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio ]
	
	
	! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:08:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:08:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:08:16'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:08:16'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:08:16'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:08:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:08:45' prior: 50948714!
test14
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:08:46'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:09:26' prior: 50948807!
test14
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio ]
	
	
	! !

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:09:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:09:30' prior: 50948859!
test14
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:09:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:25:38'!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2).
	self assert: (portfolio1 hasRegistered: transaction3) not
	! !

!methodRemoval: PortfolioTest #test04 stamp: 'mf 5/23/2022 15:25:38'!
test04
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2).
	self assert: (portfolio1 hasRegistered: transaction3) not
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:26:08'!
test05emptyPortfolioHasNoTransactions
	
	| portfolio |
	
	portfolio _ Portfolio new.

	self assert:	 (portfolio transactions) isEmpty.! !

!methodRemoval: PortfolioTest #test05 stamp: 'mf 5/23/2022 15:26:08'!
test05
	
	| portfolio |
	
	portfolio _ Portfolio new.

	self assert:	 (portfolio transactions) isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:27:03' prior: 50948962!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2).
	self deny: (portfolio1 hasRegistered: transaction3) not
	! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:27:05'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:27:10' prior: 50949024!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	transaction1 _ Deposit register: 100 on: account1.
	
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	transaction2 _ Deposit register: 75 on: account2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assert: (portfolio1 hasRegistered: transaction1).
	self assert: (portfolio1 hasRegistered: transaction2).
	self deny: (portfolio1 hasRegistered: transaction3)
	! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'mf 5/23/2022 15:27:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:28:20' prior: 50948336!
test11
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self deny: (portfolio1 isChildOf: portfolio2)
	
	
	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:30:17' prior: 50944802!
test06
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:31:32'!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !

!methodRemoval: PortfolioTest #test06 stamp: 'mf 5/23/2022 15:31:32'!
test06
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	portfolio1 add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
		
	portfolio2 _ Portfolio new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account2.
	Deposit register: 75 on: account2.
	Withdraw register: 15 on: account2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:31:49'!
test07newPortfolioHasNoAccounts
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio accounts) isEmpty.! !

!methodRemoval: PortfolioTest #test07 stamp: 'mf 5/23/2022 15:31:49'!
test07
	
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: (portfolio accounts) isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:32:13'!
test08portfolioKnowsItsAccounts
	
	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	
	self assert: 2 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).! !

!methodRemoval: PortfolioTest #test08 stamp: 'mf 5/23/2022 15:32:13'!
test08
	
	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	
	self assert: 2 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).!

!methodRemoval: PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:32:55'!
test08portfolioKnowsItsAccounts
	
	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	
	self assert: 2 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:33:09'!
test08portfolioKnowsItsAccounts
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).! !

!methodRemoval: PortfolioTest #test09 stamp: 'mf 5/23/2022 15:33:09'!
test09
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:34:47'!
test10canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test10 stamp: 'mf 5/23/2022 15:34:47'!
test10
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:35:24'!
test9canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test10canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:35:24'!
test10canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:35:33'!
test09canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test9canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:35:33'!
test9canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:36:43'!
test10portfolioKnowsHowIsHisFather
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self deny: (portfolio1 isChildOf: portfolio2)
	
	
	
	
	! !

!methodRemoval: PortfolioTest #test11 stamp: 'mf 5/23/2022 15:36:43'!
test11
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self deny: (portfolio1 isChildOf: portfolio2)
	
	
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:37:26'!
test11portfolioIsChildOfMoreThanOneOtherPortfolio
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	! !

!methodRemoval: PortfolioTest #test12aPortfolioCanHaveMoreThanOneParent stamp: 'mf 5/23/2022 15:37:26'!
test12aPortfolioCanHaveMoreThanOneParent
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self assert: (portfolio3 isChildOf: portfolio1).
	self assert: (portfolio3 isChildOf: portfolio2).
	
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:37:45'!
test10portfolioIsChildOfOtherPortfolio
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self deny: (portfolio1 isChildOf: portfolio2)
	
	
	
	
	! !

!methodRemoval: PortfolioTest #test10portfolioKnowsHowIsHisFather stamp: 'mf 5/23/2022 15:37:45'!
test10portfolioKnowsHowIsHisFather
	
	| portfolio1 portfolio2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio2 isChildOf: portfolio1).
	self deny: (portfolio1 isChildOf: portfolio2)
	
	
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:39:00'!
test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test13 stamp: 'mf 5/23/2022 15:39:00'!
test13
	
	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self
	should: [portfolio2 add: account]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:39:22'!
test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	! !

!methodRemoval: PortfolioTest #test14 stamp: 'mf 5/23/2022 15:39:22'!
test14
	
	| portfolio anObject |
	
	portfolio _ Portfolio new.
	anObject _ OrderedCollection new.
		
	self
	should: [portfolio add: anObject]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio objectAddedUnknownErrorDescription]
	
	
	!
!PortfolioTest methodsFor: 'nil' stamp: 'mf 5/23/2022 15:42:12'!
newAccountWithADepositOf: anAmmoutBeeingDeposit andAWithdrawOf: anAmmountBeeingWithdraw
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 15:43:28' prior: 50949529!
newAccountWithADepositOf: anAmmountBeeingDeposit andAWithdrawOf: anAmmountBeeingWithdraw
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: anAmmountBeeingDeposit on: account.
	Withdraw register: anAmmountBeeingWithdraw on: account.
	^account! !
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 15:45:22'!
addNewAccountWithADepositOf: anAmmountBeeingDeposit andAWithdrawOf: anAmmountBeeingWithdraw to: aPortfolio
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: anAmmountBeeingDeposit on: account.
	Withdraw register: anAmmountBeeingWithdraw on: account.
	^account! !

!methodRemoval: PortfolioTest #newAccountWithADepositOf:andAWithdrawOf: stamp: 'mf 5/23/2022 15:45:27'!
newAccountWithADepositOf: anAmmountBeeingDeposit andAWithdrawOf: anAmmountBeeingWithdraw
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: anAmmountBeeingDeposit on: account.
	Withdraw register: anAmmountBeeingWithdraw on: account.
	^account!
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 15:45:48' prior: 50949548!
addNewAccountWithADepositOf: anAmmountBeeingDeposit andAWithdrawOf: anAmmountBeeingWithdraw to: aPortfolio
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: anAmmountBeeingDeposit on: account.
	Withdraw register: anAmmountBeeingWithdraw on: account.
	aPortfolio add: account.
	^account! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:45:56'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:45:57'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:45:58'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:45:58'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:45:58'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:46:01'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:46:05'!
PASSED!

----SNAPSHOT----(23 May 2022 15:46:23) CuisUniversity-4532.image priorSource: 19698038!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:47:13' prior: 50947884!
test02portfolioWithOneAccountBalanceEqualsAccountBalance
	
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio.
	
	
	self assert: (account balance) equals: portfolio balance.! !

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:47:15'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:47:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:48:11' prior: 50947972!
test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance
	
	| portfolio1 account1  portfolio2 account2|
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	
	self assert: ((account1 balance) + (account2 balance)) equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:48:13'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:49:54'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:49:54'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:49:54'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:49:54'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:49:55'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:49:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:52:41' prior: 50949053!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction1 transaction2 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	(account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))]
	! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:52:48'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:52:49'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:52:49'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:52:49'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:52:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:53:12' prior: 50949967!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	(account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	(account2 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:53:17'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:53:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:54:04' prior: 50950039!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	(account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	(account2 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	self deny: (portfolio1 hasRegistered: transaction3).! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:54:05'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:54:05'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:55:34'!
portfolio: account1 hasRegisteredAllTransactionsOf: portfolio1

	^ (account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))]! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:55:34' prior: 50950114!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self portfolio: account1 hasRegisteredAllTransactionsOf: portfolio1.
	(account2 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	self deny: (portfolio1 hasRegistered: transaction3).! !
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 15:55:59'!
assertPortfolio: account1 hasRegisteredAllTransactionsOf: portfolio1

	^ (account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'mf 5/23/2022 15:55:59' prior: 50950198!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assertPortfolio: account1 hasRegisteredAllTransactionsOf: portfolio1.
	(account2 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	self deny: (portfolio1 hasRegistered: transaction3).! !

!methodRemoval: PortfolioTest #portfolio:hasRegisteredAllTransactionsOf: stamp: 'mf 5/23/2022 15:55:59'!
portfolio: account1 hasRegisteredAllTransactionsOf: portfolio1

	^ (account1 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))]!
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 15:56:27' prior: 50950222!
assertPortfolio: aPortfolio hasRegisteredAllTransactionsOf: anAccount

	^ (anAccount transactions) do: [:aTransaction | (self assert: (aPortfolio hasRegistered: aTransaction))]! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:56:28'!
FAILURE!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:56:28'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:56:28'!
FAILURE!
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 15:56:39' prior: 50950265!
assertPortfolio: aPortfolio hasRegisteredAllTransactionsOf: anAccount

	(anAccount transactions) do: [:aTransaction | (self assert: (aPortfolio hasRegistered: aTransaction))]! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:57:07' prior: 50950231!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assertPortfolio: portfolio1 hasRegisteredAllTransactionsOf: account1.
	(account2 transactions) do: [:aTransaction | (self assert: (portfolio1 hasRegistered: aTransaction))].
	self deny: (portfolio1 hasRegistered: transaction3).! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:57:08'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:57:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:57:32' prior: 50950333!
test04portfolioKnowsRegisteredTransactions
	
	| portfolio1 account1  portfolio2 account2 account3 transaction3 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
	
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	account3 _ ReceptiveAccount new.
	transaction3 _ Deposit register:87 on: account3.
	
	self assertPortfolio: portfolio1 hasRegisteredAllTransactionsOf: account1.
	self assertPortfolio: portfolio1 hasRegisteredAllTransactionsOf: account2.
	self deny: (portfolio1 hasRegistered: transaction3).! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 15:57:37'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 15:57:37'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 15:58:58' prior: 50949155!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 transactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'set-up' stamp: 'mf 5/23/2022 16:00:03'!
assertPortfolio: aPortfolio hasAllTransactionsOf: anAccount

	(anAccount transactions) do: [:aTransaction | (self assert: ((aPortfolio transactions) includes: aTransaction))]! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:00:41' prior: 50950482!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 4 equals: (portfolio1 transactions) size.! !

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:00:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:01:38' prior: 50950511!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 4 equals: (portfolio1 transactions) size.
	self assertPortfolio: portfolio1! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:02:07' prior: 50950582!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 4 equals: (portfolio1 transactions) size.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account1.! !

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:02:08'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:02:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:02:27' prior: 50950604!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.
	
	transactions _ OrderedCollection new.
	transactions addAll: (account1 transactions).
	transactions addAll: (account2 transactions).
	

	self assert:	 4 equals: (portfolio1 transactions) size.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account1.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account2! !

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:02:31'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:02:31'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:02:41' prior: 50950677!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 transactions |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.

	self assert:	 4 equals: (portfolio1 transactions) size.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account1.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account2! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:02:47' prior: 50950752!
test06portfolioKnowsItsTransactions
	
	| portfolio1 account1  portfolio2 account2 |
	
	portfolio1 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.
		
	portfolio2 _ Portfolio new.
	account2 _ self addNewAccountWithADepositOf: 75 andAWithdrawOf: 12 to: portfolio2.
	
	portfolio1 add: portfolio2.

	self assert:	 4 equals: (portfolio1 transactions) size.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account1.
	self assertPortfolio: portfolio1 hasAllTransactionsOf: account2.! !

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:51'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:02:51'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:02:51'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:02:51'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:02:51'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:02:52'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:02:52'!
PASSED!
!Behavior method!
initialize
	(accountsAndPortfolios _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (15 to: 35)
		declaredAt: (15 to: 35).
	(parents _ [
	(OrderedCollection
		cover: (73 to: 89)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{91 to: 93})
		cover: (63 to: 69)
		declaredAt: (63 to: 69).! !
!Behavior method!
balance
	^ [
	(accountsAndPortfolios
		cover: (13 to: 33)
		declaredAt: (13 to: 33))
		sum: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (65 to: 84)
				declaredAt: (42 to: 61)) balance ] valueCoveringAll:
				{86 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{105 to: 105} ]] valueCoveringAll:
		{35 to: 38. 95 to: 102}.! !

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
add: anAccountOrPortfolio
	[
	(self coverAll:
		{31 to: 34}) assertObjectIsAccountOrPortfolio:
		(anAccountOrPortfolio
			cover: (70 to: 89)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{36 to: 68}.
	[
	(self coverAll:
		{97 to: 100}) assertAddingDoesNotGenerateDuplicateInformation:
		(anAccountOrPortfolio
			cover: (151 to: 170)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{102 to: 149}.
	[
	(anAccountOrPortfolio
		cover: (176 to: 195)
		declaredAt: (6 to: 25)) setFather:
		(self coverAll:
			{208 to: 211}) ] valueCoveringAll:
		{197 to: 206}.
	[
	(accountsAndPortfolios
		cover: (217 to: 237)
		declaredAt: (217 to: 237)) add:
		(anAccountOrPortfolio
			cover: (244 to: 263)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertObjectIsAccountOrPortfolio: anAccountOrPortfolio
	[
	([
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) class ] valueCoveringAll:
		{81 to: 85}) ~=
		(ReceptiveAccount
			cover: (90 to: 105)
			declaredAt: (90 to: 105)) ] valueCoveringAll:
		{87 to: 88}) and:
		([
		([
		(anAccountOrPortfolio
			cover: (114 to: 133)
			declaredAt: (35 to: 54)) class ] valueCoveringAll:
			{135 to: 139}) ~=
			(Portfolio
				cover: (144 to: 152)
				declaredAt: (144 to: 152)) ] valueCoveringAll:
			{141 to: 142}) ] valueCoveringAll:
		{108 to: 111}) ifTrue: [
		[
		(self coverAll:
			{167 to: 170}) error:
			([
			(Portfolio
				cover: (179 to: 187)
				declaredAt: (144 to: 152)) objectAddedUnknownErrorDescription ] valueCoveringAll:
				{189 to: 222}) ] valueCoveringAll:
			{172 to: 177} ]] valueCoveringAll:
		{159 to: 165}.! !
!Behavior method!
assertAddingDoesNotGenerateDuplicateInformation: anAccountOrPortfolio
	[
	(parents
		cover: (75 to: 81)
		declaredAt: (75 to: 81)) do: [ :aPortfolioParent |
		[
		(aPortfolioParent
			cover: (110 to: 125)
			declaredAt: (91 to: 106)) assertAddingDoesNotGenerateDuplicateInformation:
			(anAccountOrPortfolio
				cover: (176 to: 195)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{127 to: 174} ]] valueCoveringAll:
		{85 to: 87}.
	[
	(parents
		cover: (202 to: 208)
		declaredAt: (75 to: 81)) ifEmpty: [
		[
		(self coverAll:
			{220 to: 223}) assertInformationIsNotSharedWith:
			(anAccountOrPortfolio
				cover: (259 to: 278)
				declaredAt: (50 to: 69)) ] valueCoveringAll:
			{225 to: 257} ]] valueCoveringAll:
		{210 to: 217}.! !
!Behavior method!
assertInformationIsNotSharedWith: anAccountOrPortfolio
	[
	([
	([
	(anAccountOrPortfolio
		cover: (60 to: 79)
		declaredAt: (35 to: 54)) accounts ] valueCoveringAll:
		{81 to: 88}) allSatisfy: [ :anAccount |
		[
		([
		([
		(self coverAll:
			{118 to: 121}) accounts ] valueCoveringAll:
			{123 to: 130}) includes:
			(anAccount
				cover: (142 to: 150)
				declaredAt: (105 to: 113)) ] valueCoveringAll:
			{132 to: 140}) not ] valueCoveringAll:
			{153 to: 155} ]] valueCoveringAll:
		{91 to: 101}) ifFalse: [
		[
		(self coverAll:
			{170 to: 173}) error:
			([
			(Portfolio
				cover: (182 to: 190)
				declaredAt: (182 to: 190)) duplicateInformationErrorDescription ] valueCoveringAll:
				{192 to: 227}) ] valueCoveringAll:
			{175 to: 180} ]] valueCoveringAll:
		{160 to: 167}.! !
!Behavior method!
accounts
	^ [
	(OrderedCollection
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) with:
		(self coverAll:
			{39 to: 42}) ] valueCoveringAll:
		{33 to: 37}.! !
!Behavior method!
accounts
	| accounts |
	(accounts _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (27 to: 34)
		declaredAt: (15 to: 22).
	[
	(accountsAndPortfolios
		cover: (64 to: 84)
		declaredAt: (64 to: 84)) do: [ :anAccountOrPortfolio |
		[
		(accounts
			cover: (116 to: 123)
			declaredAt: (15 to: 22)) addAll:
			([
			(anAccountOrPortfolio
				cover: (133 to: 152)
				declaredAt: (93 to: 112)) accounts ] valueCoveringAll:
				{154 to: 161}) ] valueCoveringAll:
			{125 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ accounts
		cover: (169 to: 176)
		declaredAt: (15 to: 22).! !
!Behavior method!
setFather: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) balanceValue ] valueCoveringAll:
				{61 to: 72} ]
		ifEmpty: [
			0 coverAll:
				{87 to: 87} ]] valueCoveringAll:
		{25 to: 28. 76 to: 83}.! !
!Behavior method!
balanceValue
	^ value
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
balanceValue
	^ [
	(-1 coverAll:
		{18 to: 19}) *
		(value
			cover: (23 to: 27)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{21 to: 21}.! !

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
setFather: aPortfolio
	[
	(parents
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		(aPortfolio
			cover: (40 to: 49)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{35 to: 38}.! !

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
hasRegistered: aTransaction
	[
	(accountsAndPortfolios
		cover: (33 to: 53)
		declaredAt: (33 to: 53))
		detect: [ :anAccountOrPortfolio |
			[
			(anAccountOrPortfolio
				cover: (88 to: 107)
				declaredAt: (65 to: 84)) hasRegistered:
				(aTransaction
					cover: (124 to: 135)
					declaredAt: (16 to: 27)) ] valueCoveringAll:
				{109 to: 122} ]
		ifNone: [ ^ false coverAll:
				{150 to: 154} ]] valueCoveringAll:
		{55 to: 61. 140 to: 146}.
	^ true coverAll:
		{162 to: 165}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) new ] valueCoveringAll:
		{68 to: 70})
		cover: (35 to: 46)
		declaredAt: (19 to: 30).
	[
	(accountsAndPortfolios
		cover: (74 to: 94)
		declaredAt: (74 to: 94)) do: [ :anAccountOrPortfolio |
		[
		(transactions
			cover: (125 to: 136)
			declaredAt: (19 to: 30)) addAll:
			([
			(anAccountOrPortfolio
				cover: (147 to: 166)
				declaredAt: (102 to: 121)) transactions ] valueCoveringAll:
				{168 to: 179}) ] valueCoveringAll:
			{138 to: 144} ]] valueCoveringAll:
		{96 to: 98}.
	^ transactions
		cover: (186 to: 197)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:02:56'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:02:56'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:02:56'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
duplicateInformationErrorDescription
	^ 'Adding this object generates duplication of information' coverAll:
		{43 to: 99}.! !

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
isChildOf: aPortfolio
	^ [
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) includes:
		(aPortfolio
			cover: (46 to: 55)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{36 to: 44}.! !

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:02:56'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:02:56'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!Behavior method!
objectAddedUnknownErrorDescription
	^ ' The object you are trying to add is neither an account or a portfolio' coverAll:
		{40 to: 111}.! !

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:02:56'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:04:46' prior: 50949262!
test08portfolioKnowsItsAccounts
	
	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio2.
	account2 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio2.
	account3 _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio1.

	portfolio1 add: portfolio2.
	
	self assert: 3 equals: (portfolio1 accounts) size.
	self assert: ((portfolio1 accounts) includes: account1).
	self assert: ((portfolio1 accounts) includes: account2).
	self assert: ((portfolio1 accounts) includes: account3).! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:05:55' prior: 50949371!
test09canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ self addNewAccountWithADepositOf: 100 andAWithdrawOf: 50 to: portfolio2.
	portfolio3 add: account.
	
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'mf 5/23/2022 16:06:04' prior: 50951219!
test09canNotAddPortfolioThatHasTheSameAccount
	
	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolio2 add: account.
	portfolio3 add: account.
	portfolio1 add: portfolio2.
	
	self 
	should: [portfolio1 add: portfolio3]
	raise: Error
	withExceptionDo: [:anError | anError messageText = Portfolio duplicateInformationErrorDescription]
	
	
	! !

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:06:07'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:08'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:16'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:22'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:06:28'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:29'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:06:36'!
PASSED!

----QUIT----(23 May 2022 16:06:54) CuisUniversity-4532.image priorSource: 19780150!

----STARTUP---- (23 May 2022 16:07:06) as D:\Cuis\CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'mf 5/23/2022 16:07:18'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'mf 5/23/2022 16:07:19'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'mf 5/23/2022 16:07:19'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'mf 5/23/2022 16:07:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'mf 5/23/2022 16:07:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'mf 5/23/2022 16:07:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'mf 5/23/2022 16:07:20'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of D:\Cuis\Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test01emptyPortfolioBalanceIsZero stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test02portfolioWithOneAccountBalanceEqualsAccountBalance stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test03portfolioWithOneAccountAndOnotherPortfolioBalanceEqualsTheSumOfEveryAccountsBalance stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test04portfolioKnowsRegisteredTransactions stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test05emptyPortfolioHasNoTransactions stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsItsTransactions stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoAccounts stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test08portfolioKnowsItsAccounts stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test09canNotAddPortfolioThatHasTheSameAccount stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test10portfolioIsChildOfOtherPortfolio stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test11portfolioIsChildOfMoreThanOneOtherPortfolio stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test12addingAnAccountCanNotGenerateDuplicateInformationOnAPortfoliosParent stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

!testRun: #PortfolioTest #test13canNotAddObjectOtherThanPortfolioOrReceptiveAccount stamp: 'mf 5/23/2022 16:07:43'!
PASSED!

----QUIT----(23 May 2022 16:07:47) CuisUniversity-4532.image priorSource: 19835456!